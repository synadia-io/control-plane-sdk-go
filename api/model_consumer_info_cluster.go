/*
Synadia Control Plane

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the ConsumerInfoCluster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConsumerInfoCluster{}

// ConsumerInfoCluster struct for ConsumerInfoCluster
type ConsumerInfoCluster struct {
	Leader   *string                    `json:"leader,omitempty"`
	Name     *string                    `json:"name,omitempty"`
	Replicas []ClusterInfoReplicasInner `json:"replicas,omitempty"`
}

// NewConsumerInfoCluster instantiates a new ConsumerInfoCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConsumerInfoCluster() *ConsumerInfoCluster {
	this := ConsumerInfoCluster{}
	return &this
}

// NewConsumerInfoClusterWithDefaults instantiates a new ConsumerInfoCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConsumerInfoClusterWithDefaults() *ConsumerInfoCluster {
	this := ConsumerInfoCluster{}
	return &this
}

// GetLeader returns the Leader field value if set, zero value otherwise.
func (o *ConsumerInfoCluster) GetLeader() string {
	if o == nil || IsNil(o.Leader) {
		var ret string
		return ret
	}
	return *o.Leader
}

// GetLeaderOk returns a tuple with the Leader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerInfoCluster) GetLeaderOk() (*string, bool) {
	if o == nil || IsNil(o.Leader) {
		return nil, false
	}
	return o.Leader, true
}

// HasLeader returns a boolean if a field has been set.
func (o *ConsumerInfoCluster) HasLeader() bool {
	if o != nil && !IsNil(o.Leader) {
		return true
	}

	return false
}

// SetLeader gets a reference to the given string and assigns it to the Leader field.
func (o *ConsumerInfoCluster) SetLeader(v string) {
	o.Leader = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConsumerInfoCluster) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerInfoCluster) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConsumerInfoCluster) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConsumerInfoCluster) SetName(v string) {
	o.Name = &v
}

// GetReplicas returns the Replicas field value if set, zero value otherwise.
func (o *ConsumerInfoCluster) GetReplicas() []ClusterInfoReplicasInner {
	if o == nil || IsNil(o.Replicas) {
		var ret []ClusterInfoReplicasInner
		return ret
	}
	return o.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConsumerInfoCluster) GetReplicasOk() ([]ClusterInfoReplicasInner, bool) {
	if o == nil || IsNil(o.Replicas) {
		return nil, false
	}
	return o.Replicas, true
}

// HasReplicas returns a boolean if a field has been set.
func (o *ConsumerInfoCluster) HasReplicas() bool {
	if o != nil && !IsNil(o.Replicas) {
		return true
	}

	return false
}

// SetReplicas gets a reference to the given []ClusterInfoReplicasInner and assigns it to the Replicas field.
func (o *ConsumerInfoCluster) SetReplicas(v []ClusterInfoReplicasInner) {
	o.Replicas = v
}

func (o ConsumerInfoCluster) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConsumerInfoCluster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Leader) {
		toSerialize["leader"] = o.Leader
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Replicas) {
		toSerialize["replicas"] = o.Replicas
	}
	return toSerialize, nil
}

type NullableConsumerInfoCluster struct {
	value *ConsumerInfoCluster
	isSet bool
}

func (v NullableConsumerInfoCluster) Get() *ConsumerInfoCluster {
	return v.value
}

func (v *NullableConsumerInfoCluster) Set(val *ConsumerInfoCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableConsumerInfoCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableConsumerInfoCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConsumerInfoCluster(val *ConsumerInfoCluster) *NullableConsumerInfoCluster {
	return &NullableConsumerInfoCluster{value: val, isSet: true}
}

func (v NullableConsumerInfoCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConsumerInfoCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
