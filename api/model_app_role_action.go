/*
Synadia Control Plane

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// AppRoleAction the model 'AppRoleAction'
type AppRoleAction string

// List of AppRoleAction
const (
	APPROLEACTION_GET    AppRoleAction = "GET"
	APPROLEACTION_POST   AppRoleAction = "POST"
	APPROLEACTION_PATCH  AppRoleAction = "PATCH"
	APPROLEACTION_DELETE AppRoleAction = "DELETE"
)

// All allowed values of AppRoleAction enum
var AllowedAppRoleActionEnumValues = []AppRoleAction{
	"GET",
	"POST",
	"PATCH",
	"DELETE",
}

func (v *AppRoleAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AppRoleAction(value)
	for _, existing := range AllowedAppRoleActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AppRoleAction", value)
}

// NewAppRoleActionFromValue returns a pointer to a valid AppRoleAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppRoleActionFromValue(v string) (*AppRoleAction, error) {
	ev := AppRoleAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppRoleAction: valid values are %v", v, AllowedAppRoleActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppRoleAction) IsValid() bool {
	for _, existing := range AllowedAppRoleActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppRoleAction value
func (v AppRoleAction) Ptr() *AppRoleAction {
	return &v
}

type NullableAppRoleAction struct {
	value *AppRoleAction
	isSet bool
}

func (v NullableAppRoleAction) Get() *AppRoleAction {
	return v.value
}

func (v *NullableAppRoleAction) Set(val *AppRoleAction) {
	v.value = val
	v.isSet = true
}

func (v NullableAppRoleAction) IsSet() bool {
	return v.isSet
}

func (v *NullableAppRoleAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppRoleAction(val *AppRoleAction) *NullableAppRoleAction {
	return &NullableAppRoleAction{value: val, isSet: true}
}

func (v NullableAppRoleAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppRoleAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
