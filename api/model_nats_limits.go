/*
Synadia Control Plane

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the NatsLimits type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NatsLimits{}

// NatsLimits struct for NatsLimits
type NatsLimits struct {
	Data    *int64 `json:"data,omitempty"`
	Payload *int64 `json:"payload,omitempty"`
	Subs    *int64 `json:"subs,omitempty"`
}

// NewNatsLimits instantiates a new NatsLimits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNatsLimits() *NatsLimits {
	this := NatsLimits{}
	return &this
}

// NewNatsLimitsWithDefaults instantiates a new NatsLimits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNatsLimitsWithDefaults() *NatsLimits {
	this := NatsLimits{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *NatsLimits) GetData() int64 {
	if o == nil || IsNil(o.Data) {
		var ret int64
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatsLimits) GetDataOk() (*int64, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *NatsLimits) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given int64 and assigns it to the Data field.
func (o *NatsLimits) SetData(v int64) {
	o.Data = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *NatsLimits) GetPayload() int64 {
	if o == nil || IsNil(o.Payload) {
		var ret int64
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatsLimits) GetPayloadOk() (*int64, bool) {
	if o == nil || IsNil(o.Payload) {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *NatsLimits) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given int64 and assigns it to the Payload field.
func (o *NatsLimits) SetPayload(v int64) {
	o.Payload = &v
}

// GetSubs returns the Subs field value if set, zero value otherwise.
func (o *NatsLimits) GetSubs() int64 {
	if o == nil || IsNil(o.Subs) {
		var ret int64
		return ret
	}
	return *o.Subs
}

// GetSubsOk returns a tuple with the Subs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatsLimits) GetSubsOk() (*int64, bool) {
	if o == nil || IsNil(o.Subs) {
		return nil, false
	}
	return o.Subs, true
}

// HasSubs returns a boolean if a field has been set.
func (o *NatsLimits) HasSubs() bool {
	if o != nil && !IsNil(o.Subs) {
		return true
	}

	return false
}

// SetSubs gets a reference to the given int64 and assigns it to the Subs field.
func (o *NatsLimits) SetSubs(v int64) {
	o.Subs = &v
}

func (o NatsLimits) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NatsLimits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	if !IsNil(o.Subs) {
		toSerialize["subs"] = o.Subs
	}
	return toSerialize, nil
}

type NullableNatsLimits struct {
	value *NatsLimits
	isSet bool
}

func (v NullableNatsLimits) Get() *NatsLimits {
	return v.value
}

func (v *NullableNatsLimits) Set(val *NatsLimits) {
	v.value = val
	v.isSet = true
}

func (v NullableNatsLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableNatsLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNatsLimits(val *NatsLimits) *NullableNatsLimits {
	return &NullableNatsLimits{value: val, isSet: true}
}

func (v NullableNatsLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNatsLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
