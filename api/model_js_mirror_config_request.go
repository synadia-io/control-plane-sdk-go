/*
Synadia Control Plane

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the JSMirrorConfigRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSMirrorConfigRequest{}

// JSMirrorConfigRequest struct for JSMirrorConfigRequest
type JSMirrorConfigRequest struct {
	Mirror               *StreamSource                         `json:"mirror,omitempty"`
	MirrorDirect         *bool                                 `json:"mirror_direct,omitempty"`
	AllowDirect          bool                                  `json:"allow_direct"`
	AllowRollupHdrs      bool                                  `json:"allow_rollup_hdrs"`
	DenyDelete           bool                                  `json:"deny_delete"`
	DenyPurge            bool                                  `json:"deny_purge"`
	Description          *string                               `json:"description,omitempty"`
	Discard              DiscardPolicy                         `json:"discard"`
	DiscardNewPerSubject *bool                                 `json:"discard_new_per_subject,omitempty"`
	DuplicateWindow      *int64                                `json:"duplicate_window,omitempty"`
	MaxAge               int64                                 `json:"max_age"`
	MaxBytes             int64                                 `json:"max_bytes"`
	MaxConsumers         int32                                 `json:"max_consumers"`
	MaxMsgSize           *int32                                `json:"max_msg_size,omitempty"`
	MaxMsgs              int64                                 `json:"max_msgs"`
	MaxMsgsPerSubject    int64                                 `json:"max_msgs_per_subject"`
	Name                 string                                `json:"name"`
	NoAck                *bool                                 `json:"no_ack,omitempty"`
	NumReplicas          int32                                 `json:"num_replicas"`
	Placement            NullableJSCommonStreamConfigPlacement `json:"placement,omitempty"`
	Republish            NullableJSCommonStreamConfigRepublish `json:"republish,omitempty"`
	Retention            RetentionPolicy                       `json:"retention"`
	Sealed               bool                                  `json:"sealed"`
	Sources              []StreamSource                        `json:"sources,omitempty"`
	Storage              StorageType                           `json:"storage"`
	TemplateOwner        *string                               `json:"template_owner,omitempty"`
}

// NewJSMirrorConfigRequest instantiates a new JSMirrorConfigRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSMirrorConfigRequest(allowDirect bool, allowRollupHdrs bool, denyDelete bool, denyPurge bool, discard DiscardPolicy, maxAge int64, maxBytes int64, maxConsumers int32, maxMsgs int64, maxMsgsPerSubject int64, name string, numReplicas int32, retention RetentionPolicy, sealed bool, storage StorageType) *JSMirrorConfigRequest {
	this := JSMirrorConfigRequest{}
	this.AllowDirect = allowDirect
	this.AllowRollupHdrs = allowRollupHdrs
	this.DenyDelete = denyDelete
	this.DenyPurge = denyPurge
	this.Discard = discard
	this.MaxAge = maxAge
	this.MaxBytes = maxBytes
	this.MaxConsumers = maxConsumers
	this.MaxMsgs = maxMsgs
	this.MaxMsgsPerSubject = maxMsgsPerSubject
	this.Name = name
	this.NumReplicas = numReplicas
	this.Retention = retention
	this.Sealed = sealed
	this.Storage = storage
	return &this
}

// NewJSMirrorConfigRequestWithDefaults instantiates a new JSMirrorConfigRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSMirrorConfigRequestWithDefaults() *JSMirrorConfigRequest {
	this := JSMirrorConfigRequest{}
	return &this
}

// GetMirror returns the Mirror field value if set, zero value otherwise.
func (o *JSMirrorConfigRequest) GetMirror() StreamSource {
	if o == nil || IsNil(o.Mirror) {
		var ret StreamSource
		return ret
	}
	return *o.Mirror
}

// GetMirrorOk returns a tuple with the Mirror field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSMirrorConfigRequest) GetMirrorOk() (*StreamSource, bool) {
	if o == nil || IsNil(o.Mirror) {
		return nil, false
	}
	return o.Mirror, true
}

// HasMirror returns a boolean if a field has been set.
func (o *JSMirrorConfigRequest) HasMirror() bool {
	if o != nil && !IsNil(o.Mirror) {
		return true
	}

	return false
}

// SetMirror gets a reference to the given StreamSource and assigns it to the Mirror field.
func (o *JSMirrorConfigRequest) SetMirror(v StreamSource) {
	o.Mirror = &v
}

// GetMirrorDirect returns the MirrorDirect field value if set, zero value otherwise.
func (o *JSMirrorConfigRequest) GetMirrorDirect() bool {
	if o == nil || IsNil(o.MirrorDirect) {
		var ret bool
		return ret
	}
	return *o.MirrorDirect
}

// GetMirrorDirectOk returns a tuple with the MirrorDirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSMirrorConfigRequest) GetMirrorDirectOk() (*bool, bool) {
	if o == nil || IsNil(o.MirrorDirect) {
		return nil, false
	}
	return o.MirrorDirect, true
}

// HasMirrorDirect returns a boolean if a field has been set.
func (o *JSMirrorConfigRequest) HasMirrorDirect() bool {
	if o != nil && !IsNil(o.MirrorDirect) {
		return true
	}

	return false
}

// SetMirrorDirect gets a reference to the given bool and assigns it to the MirrorDirect field.
func (o *JSMirrorConfigRequest) SetMirrorDirect(v bool) {
	o.MirrorDirect = &v
}

// GetAllowDirect returns the AllowDirect field value
func (o *JSMirrorConfigRequest) GetAllowDirect() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowDirect
}

// GetAllowDirectOk returns a tuple with the AllowDirect field value
// and a boolean to check if the value has been set.
func (o *JSMirrorConfigRequest) GetAllowDirectOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowDirect, true
}

// SetAllowDirect sets field value
func (o *JSMirrorConfigRequest) SetAllowDirect(v bool) {
	o.AllowDirect = v
}

// GetAllowRollupHdrs returns the AllowRollupHdrs field value
func (o *JSMirrorConfigRequest) GetAllowRollupHdrs() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.AllowRollupHdrs
}

// GetAllowRollupHdrsOk returns a tuple with the AllowRollupHdrs field value
// and a boolean to check if the value has been set.
func (o *JSMirrorConfigRequest) GetAllowRollupHdrsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllowRollupHdrs, true
}

// SetAllowRollupHdrs sets field value
func (o *JSMirrorConfigRequest) SetAllowRollupHdrs(v bool) {
	o.AllowRollupHdrs = v
}

// GetDenyDelete returns the DenyDelete field value
func (o *JSMirrorConfigRequest) GetDenyDelete() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DenyDelete
}

// GetDenyDeleteOk returns a tuple with the DenyDelete field value
// and a boolean to check if the value has been set.
func (o *JSMirrorConfigRequest) GetDenyDeleteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DenyDelete, true
}

// SetDenyDelete sets field value
func (o *JSMirrorConfigRequest) SetDenyDelete(v bool) {
	o.DenyDelete = v
}

// GetDenyPurge returns the DenyPurge field value
func (o *JSMirrorConfigRequest) GetDenyPurge() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.DenyPurge
}

// GetDenyPurgeOk returns a tuple with the DenyPurge field value
// and a boolean to check if the value has been set.
func (o *JSMirrorConfigRequest) GetDenyPurgeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DenyPurge, true
}

// SetDenyPurge sets field value
func (o *JSMirrorConfigRequest) SetDenyPurge(v bool) {
	o.DenyPurge = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *JSMirrorConfigRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSMirrorConfigRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *JSMirrorConfigRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *JSMirrorConfigRequest) SetDescription(v string) {
	o.Description = &v
}

// GetDiscard returns the Discard field value
func (o *JSMirrorConfigRequest) GetDiscard() DiscardPolicy {
	if o == nil {
		var ret DiscardPolicy
		return ret
	}

	return o.Discard
}

// GetDiscardOk returns a tuple with the Discard field value
// and a boolean to check if the value has been set.
func (o *JSMirrorConfigRequest) GetDiscardOk() (*DiscardPolicy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Discard, true
}

// SetDiscard sets field value
func (o *JSMirrorConfigRequest) SetDiscard(v DiscardPolicy) {
	o.Discard = v
}

// GetDiscardNewPerSubject returns the DiscardNewPerSubject field value if set, zero value otherwise.
func (o *JSMirrorConfigRequest) GetDiscardNewPerSubject() bool {
	if o == nil || IsNil(o.DiscardNewPerSubject) {
		var ret bool
		return ret
	}
	return *o.DiscardNewPerSubject
}

// GetDiscardNewPerSubjectOk returns a tuple with the DiscardNewPerSubject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSMirrorConfigRequest) GetDiscardNewPerSubjectOk() (*bool, bool) {
	if o == nil || IsNil(o.DiscardNewPerSubject) {
		return nil, false
	}
	return o.DiscardNewPerSubject, true
}

// HasDiscardNewPerSubject returns a boolean if a field has been set.
func (o *JSMirrorConfigRequest) HasDiscardNewPerSubject() bool {
	if o != nil && !IsNil(o.DiscardNewPerSubject) {
		return true
	}

	return false
}

// SetDiscardNewPerSubject gets a reference to the given bool and assigns it to the DiscardNewPerSubject field.
func (o *JSMirrorConfigRequest) SetDiscardNewPerSubject(v bool) {
	o.DiscardNewPerSubject = &v
}

// GetDuplicateWindow returns the DuplicateWindow field value if set, zero value otherwise.
func (o *JSMirrorConfigRequest) GetDuplicateWindow() int64 {
	if o == nil || IsNil(o.DuplicateWindow) {
		var ret int64
		return ret
	}
	return *o.DuplicateWindow
}

// GetDuplicateWindowOk returns a tuple with the DuplicateWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSMirrorConfigRequest) GetDuplicateWindowOk() (*int64, bool) {
	if o == nil || IsNil(o.DuplicateWindow) {
		return nil, false
	}
	return o.DuplicateWindow, true
}

// HasDuplicateWindow returns a boolean if a field has been set.
func (o *JSMirrorConfigRequest) HasDuplicateWindow() bool {
	if o != nil && !IsNil(o.DuplicateWindow) {
		return true
	}

	return false
}

// SetDuplicateWindow gets a reference to the given int64 and assigns it to the DuplicateWindow field.
func (o *JSMirrorConfigRequest) SetDuplicateWindow(v int64) {
	o.DuplicateWindow = &v
}

// GetMaxAge returns the MaxAge field value
func (o *JSMirrorConfigRequest) GetMaxAge() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxAge
}

// GetMaxAgeOk returns a tuple with the MaxAge field value
// and a boolean to check if the value has been set.
func (o *JSMirrorConfigRequest) GetMaxAgeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxAge, true
}

// SetMaxAge sets field value
func (o *JSMirrorConfigRequest) SetMaxAge(v int64) {
	o.MaxAge = v
}

// GetMaxBytes returns the MaxBytes field value
func (o *JSMirrorConfigRequest) GetMaxBytes() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxBytes
}

// GetMaxBytesOk returns a tuple with the MaxBytes field value
// and a boolean to check if the value has been set.
func (o *JSMirrorConfigRequest) GetMaxBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxBytes, true
}

// SetMaxBytes sets field value
func (o *JSMirrorConfigRequest) SetMaxBytes(v int64) {
	o.MaxBytes = v
}

// GetMaxConsumers returns the MaxConsumers field value
func (o *JSMirrorConfigRequest) GetMaxConsumers() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxConsumers
}

// GetMaxConsumersOk returns a tuple with the MaxConsumers field value
// and a boolean to check if the value has been set.
func (o *JSMirrorConfigRequest) GetMaxConsumersOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxConsumers, true
}

// SetMaxConsumers sets field value
func (o *JSMirrorConfigRequest) SetMaxConsumers(v int32) {
	o.MaxConsumers = v
}

// GetMaxMsgSize returns the MaxMsgSize field value if set, zero value otherwise.
func (o *JSMirrorConfigRequest) GetMaxMsgSize() int32 {
	if o == nil || IsNil(o.MaxMsgSize) {
		var ret int32
		return ret
	}
	return *o.MaxMsgSize
}

// GetMaxMsgSizeOk returns a tuple with the MaxMsgSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSMirrorConfigRequest) GetMaxMsgSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxMsgSize) {
		return nil, false
	}
	return o.MaxMsgSize, true
}

// HasMaxMsgSize returns a boolean if a field has been set.
func (o *JSMirrorConfigRequest) HasMaxMsgSize() bool {
	if o != nil && !IsNil(o.MaxMsgSize) {
		return true
	}

	return false
}

// SetMaxMsgSize gets a reference to the given int32 and assigns it to the MaxMsgSize field.
func (o *JSMirrorConfigRequest) SetMaxMsgSize(v int32) {
	o.MaxMsgSize = &v
}

// GetMaxMsgs returns the MaxMsgs field value
func (o *JSMirrorConfigRequest) GetMaxMsgs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxMsgs
}

// GetMaxMsgsOk returns a tuple with the MaxMsgs field value
// and a boolean to check if the value has been set.
func (o *JSMirrorConfigRequest) GetMaxMsgsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxMsgs, true
}

// SetMaxMsgs sets field value
func (o *JSMirrorConfigRequest) SetMaxMsgs(v int64) {
	o.MaxMsgs = v
}

// GetMaxMsgsPerSubject returns the MaxMsgsPerSubject field value
func (o *JSMirrorConfigRequest) GetMaxMsgsPerSubject() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxMsgsPerSubject
}

// GetMaxMsgsPerSubjectOk returns a tuple with the MaxMsgsPerSubject field value
// and a boolean to check if the value has been set.
func (o *JSMirrorConfigRequest) GetMaxMsgsPerSubjectOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxMsgsPerSubject, true
}

// SetMaxMsgsPerSubject sets field value
func (o *JSMirrorConfigRequest) SetMaxMsgsPerSubject(v int64) {
	o.MaxMsgsPerSubject = v
}

// GetName returns the Name field value
func (o *JSMirrorConfigRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *JSMirrorConfigRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *JSMirrorConfigRequest) SetName(v string) {
	o.Name = v
}

// GetNoAck returns the NoAck field value if set, zero value otherwise.
func (o *JSMirrorConfigRequest) GetNoAck() bool {
	if o == nil || IsNil(o.NoAck) {
		var ret bool
		return ret
	}
	return *o.NoAck
}

// GetNoAckOk returns a tuple with the NoAck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSMirrorConfigRequest) GetNoAckOk() (*bool, bool) {
	if o == nil || IsNil(o.NoAck) {
		return nil, false
	}
	return o.NoAck, true
}

// HasNoAck returns a boolean if a field has been set.
func (o *JSMirrorConfigRequest) HasNoAck() bool {
	if o != nil && !IsNil(o.NoAck) {
		return true
	}

	return false
}

// SetNoAck gets a reference to the given bool and assigns it to the NoAck field.
func (o *JSMirrorConfigRequest) SetNoAck(v bool) {
	o.NoAck = &v
}

// GetNumReplicas returns the NumReplicas field value
func (o *JSMirrorConfigRequest) GetNumReplicas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumReplicas
}

// GetNumReplicasOk returns a tuple with the NumReplicas field value
// and a boolean to check if the value has been set.
func (o *JSMirrorConfigRequest) GetNumReplicasOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumReplicas, true
}

// SetNumReplicas sets field value
func (o *JSMirrorConfigRequest) SetNumReplicas(v int32) {
	o.NumReplicas = v
}

// GetPlacement returns the Placement field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JSMirrorConfigRequest) GetPlacement() JSCommonStreamConfigPlacement {
	if o == nil || IsNil(o.Placement.Get()) {
		var ret JSCommonStreamConfigPlacement
		return ret
	}
	return *o.Placement.Get()
}

// GetPlacementOk returns a tuple with the Placement field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JSMirrorConfigRequest) GetPlacementOk() (*JSCommonStreamConfigPlacement, bool) {
	if o == nil {
		return nil, false
	}
	return o.Placement.Get(), o.Placement.IsSet()
}

// HasPlacement returns a boolean if a field has been set.
func (o *JSMirrorConfigRequest) HasPlacement() bool {
	if o != nil && o.Placement.IsSet() {
		return true
	}

	return false
}

// SetPlacement gets a reference to the given NullableJSCommonStreamConfigPlacement and assigns it to the Placement field.
func (o *JSMirrorConfigRequest) SetPlacement(v JSCommonStreamConfigPlacement) {
	o.Placement.Set(&v)
}

// SetPlacementNil sets the value for Placement to be an explicit nil
func (o *JSMirrorConfigRequest) SetPlacementNil() {
	o.Placement.Set(nil)
}

// UnsetPlacement ensures that no value is present for Placement, not even an explicit nil
func (o *JSMirrorConfigRequest) UnsetPlacement() {
	o.Placement.Unset()
}

// GetRepublish returns the Republish field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JSMirrorConfigRequest) GetRepublish() JSCommonStreamConfigRepublish {
	if o == nil || IsNil(o.Republish.Get()) {
		var ret JSCommonStreamConfigRepublish
		return ret
	}
	return *o.Republish.Get()
}

// GetRepublishOk returns a tuple with the Republish field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JSMirrorConfigRequest) GetRepublishOk() (*JSCommonStreamConfigRepublish, bool) {
	if o == nil {
		return nil, false
	}
	return o.Republish.Get(), o.Republish.IsSet()
}

// HasRepublish returns a boolean if a field has been set.
func (o *JSMirrorConfigRequest) HasRepublish() bool {
	if o != nil && o.Republish.IsSet() {
		return true
	}

	return false
}

// SetRepublish gets a reference to the given NullableJSCommonStreamConfigRepublish and assigns it to the Republish field.
func (o *JSMirrorConfigRequest) SetRepublish(v JSCommonStreamConfigRepublish) {
	o.Republish.Set(&v)
}

// SetRepublishNil sets the value for Republish to be an explicit nil
func (o *JSMirrorConfigRequest) SetRepublishNil() {
	o.Republish.Set(nil)
}

// UnsetRepublish ensures that no value is present for Republish, not even an explicit nil
func (o *JSMirrorConfigRequest) UnsetRepublish() {
	o.Republish.Unset()
}

// GetRetention returns the Retention field value
func (o *JSMirrorConfigRequest) GetRetention() RetentionPolicy {
	if o == nil {
		var ret RetentionPolicy
		return ret
	}

	return o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value
// and a boolean to check if the value has been set.
func (o *JSMirrorConfigRequest) GetRetentionOk() (*RetentionPolicy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Retention, true
}

// SetRetention sets field value
func (o *JSMirrorConfigRequest) SetRetention(v RetentionPolicy) {
	o.Retention = v
}

// GetSealed returns the Sealed field value
func (o *JSMirrorConfigRequest) GetSealed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Sealed
}

// GetSealedOk returns a tuple with the Sealed field value
// and a boolean to check if the value has been set.
func (o *JSMirrorConfigRequest) GetSealedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sealed, true
}

// SetSealed sets field value
func (o *JSMirrorConfigRequest) SetSealed(v bool) {
	o.Sealed = v
}

// GetSources returns the Sources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JSMirrorConfigRequest) GetSources() []StreamSource {
	if o == nil {
		var ret []StreamSource
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JSMirrorConfigRequest) GetSourcesOk() ([]StreamSource, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *JSMirrorConfigRequest) HasSources() bool {
	if o != nil && IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []StreamSource and assigns it to the Sources field.
func (o *JSMirrorConfigRequest) SetSources(v []StreamSource) {
	o.Sources = v
}

// GetStorage returns the Storage field value
func (o *JSMirrorConfigRequest) GetStorage() StorageType {
	if o == nil {
		var ret StorageType
		return ret
	}

	return o.Storage
}

// GetStorageOk returns a tuple with the Storage field value
// and a boolean to check if the value has been set.
func (o *JSMirrorConfigRequest) GetStorageOk() (*StorageType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Storage, true
}

// SetStorage sets field value
func (o *JSMirrorConfigRequest) SetStorage(v StorageType) {
	o.Storage = v
}

// GetTemplateOwner returns the TemplateOwner field value if set, zero value otherwise.
func (o *JSMirrorConfigRequest) GetTemplateOwner() string {
	if o == nil || IsNil(o.TemplateOwner) {
		var ret string
		return ret
	}
	return *o.TemplateOwner
}

// GetTemplateOwnerOk returns a tuple with the TemplateOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSMirrorConfigRequest) GetTemplateOwnerOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateOwner) {
		return nil, false
	}
	return o.TemplateOwner, true
}

// HasTemplateOwner returns a boolean if a field has been set.
func (o *JSMirrorConfigRequest) HasTemplateOwner() bool {
	if o != nil && !IsNil(o.TemplateOwner) {
		return true
	}

	return false
}

// SetTemplateOwner gets a reference to the given string and assigns it to the TemplateOwner field.
func (o *JSMirrorConfigRequest) SetTemplateOwner(v string) {
	o.TemplateOwner = &v
}

func (o JSMirrorConfigRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSMirrorConfigRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mirror) {
		toSerialize["mirror"] = o.Mirror
	}
	if !IsNil(o.MirrorDirect) {
		toSerialize["mirror_direct"] = o.MirrorDirect
	}
	toSerialize["allow_direct"] = o.AllowDirect
	toSerialize["allow_rollup_hdrs"] = o.AllowRollupHdrs
	toSerialize["deny_delete"] = o.DenyDelete
	toSerialize["deny_purge"] = o.DenyPurge
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["discard"] = o.Discard
	if !IsNil(o.DiscardNewPerSubject) {
		toSerialize["discard_new_per_subject"] = o.DiscardNewPerSubject
	}
	if !IsNil(o.DuplicateWindow) {
		toSerialize["duplicate_window"] = o.DuplicateWindow
	}
	toSerialize["max_age"] = o.MaxAge
	toSerialize["max_bytes"] = o.MaxBytes
	toSerialize["max_consumers"] = o.MaxConsumers
	if !IsNil(o.MaxMsgSize) {
		toSerialize["max_msg_size"] = o.MaxMsgSize
	}
	toSerialize["max_msgs"] = o.MaxMsgs
	toSerialize["max_msgs_per_subject"] = o.MaxMsgsPerSubject
	toSerialize["name"] = o.Name
	if !IsNil(o.NoAck) {
		toSerialize["no_ack"] = o.NoAck
	}
	toSerialize["num_replicas"] = o.NumReplicas
	if o.Placement.IsSet() {
		toSerialize["placement"] = o.Placement.Get()
	}
	if o.Republish.IsSet() {
		toSerialize["republish"] = o.Republish.Get()
	}
	toSerialize["retention"] = o.Retention
	toSerialize["sealed"] = o.Sealed
	if o.Sources != nil {
		toSerialize["sources"] = o.Sources
	}
	toSerialize["storage"] = o.Storage
	if !IsNil(o.TemplateOwner) {
		toSerialize["template_owner"] = o.TemplateOwner
	}
	return toSerialize, nil
}

type NullableJSMirrorConfigRequest struct {
	value *JSMirrorConfigRequest
	isSet bool
}

func (v NullableJSMirrorConfigRequest) Get() *JSMirrorConfigRequest {
	return v.value
}

func (v *NullableJSMirrorConfigRequest) Set(val *JSMirrorConfigRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableJSMirrorConfigRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableJSMirrorConfigRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSMirrorConfigRequest(val *JSMirrorConfigRequest) *NullableJSMirrorConfigRequest {
	return &NullableJSMirrorConfigRequest{value: val, isSet: true}
}

func (v NullableJSMirrorConfigRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSMirrorConfigRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
