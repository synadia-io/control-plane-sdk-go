/*
Synadia Control Plane

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type SigKeyGroupAPI interface {

	/*
		DeleteAccountSkGroup Delete Account Signing Key Group

		Deletes Account Signing Key Group

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param groupId
		@return ApiDeleteAccountSkGroupRequest
	*/
	DeleteAccountSkGroup(ctx context.Context, groupId string) ApiDeleteAccountSkGroupRequest

	// DeleteAccountSkGroupExecute executes the request
	DeleteAccountSkGroupExecute(r ApiDeleteAccountSkGroupRequest) (*http.Response, error)

	/*
		GetAccountSkGroup Get Account Signing Key Group

		Get Account Signing Key Group

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param groupId
		@return ApiGetAccountSkGroupRequest
	*/
	GetAccountSkGroup(ctx context.Context, groupId string) ApiGetAccountSkGroupRequest

	// GetAccountSkGroupExecute executes the request
	//  @return SigningKeyGroupViewResponse
	GetAccountSkGroupExecute(r ApiGetAccountSkGroupRequest) (*SigningKeyGroupViewResponse, *http.Response, error)

	/*
		ListAccountSkGroupKeys List Signing Keys

		List Account Signing Keys In Group

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param groupId
		@return ApiListAccountSkGroupKeysRequest
	*/
	ListAccountSkGroupKeys(ctx context.Context, groupId string) ApiListAccountSkGroupKeysRequest

	// ListAccountSkGroupKeysExecute executes the request
	//  @return SigningKeyListResponse
	ListAccountSkGroupKeysExecute(r ApiListAccountSkGroupKeysRequest) (*SigningKeyListResponse, *http.Response, error)

	/*
		RotateAccountSk Roate Active Signing Key

		Rotates The Active Signing Key For Account Signing Key Group

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param groupId
		@return ApiRotateAccountSkRequest
	*/
	RotateAccountSk(ctx context.Context, groupId string) ApiRotateAccountSkRequest

	// RotateAccountSkExecute executes the request
	//  @return SigningKeyViewResponse
	RotateAccountSkExecute(r ApiRotateAccountSkRequest) (*SigningKeyViewResponse, *http.Response, error)

	/*
		UpdateAccountSkGroup Update Account Signing Key Group

		Update Account Signing Key Group

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param groupId
		@return ApiUpdateAccountSkGroupRequest
	*/
	UpdateAccountSkGroup(ctx context.Context, groupId string) ApiUpdateAccountSkGroupRequest

	// UpdateAccountSkGroupExecute executes the request
	//  @return SigningKeyGroupViewResponse
	UpdateAccountSkGroupExecute(r ApiUpdateAccountSkGroupRequest) (*SigningKeyGroupViewResponse, *http.Response, error)
}

// SigKeyGroupAPIService SigKeyGroupAPI service
type SigKeyGroupAPIService service

type ApiDeleteAccountSkGroupRequest struct {
	ctx        context.Context
	ApiService SigKeyGroupAPI
	groupId    string
}

func (r ApiDeleteAccountSkGroupRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAccountSkGroupExecute(r)
}

/*
DeleteAccountSkGroup Delete Account Signing Key Group

Deletes Account Signing Key Group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param groupId
	@return ApiDeleteAccountSkGroupRequest
*/
func (a *SigKeyGroupAPIService) DeleteAccountSkGroup(ctx context.Context, groupId string) ApiDeleteAccountSkGroupRequest {
	return ApiDeleteAccountSkGroupRequest{
		ApiService: a,
		ctx:        ctx,
		groupId:    groupId,
	}
}

// Execute executes the request
func (a *SigKeyGroupAPIService) DeleteAccountSkGroupExecute(r ApiDeleteAccountSkGroupRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SigKeyGroupAPIService.DeleteAccountSkGroup")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/account-sk-groups/{groupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"groupId"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAccountSkGroupRequest struct {
	ctx        context.Context
	ApiService SigKeyGroupAPI
	groupId    string
}

func (r ApiGetAccountSkGroupRequest) Execute() (*SigningKeyGroupViewResponse, *http.Response, error) {
	return r.ApiService.GetAccountSkGroupExecute(r)
}

/*
GetAccountSkGroup Get Account Signing Key Group

Get Account Signing Key Group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param groupId
	@return ApiGetAccountSkGroupRequest
*/
func (a *SigKeyGroupAPIService) GetAccountSkGroup(ctx context.Context, groupId string) ApiGetAccountSkGroupRequest {
	return ApiGetAccountSkGroupRequest{
		ApiService: a,
		ctx:        ctx,
		groupId:    groupId,
	}
}

// Execute executes the request
//
//	@return SigningKeyGroupViewResponse
func (a *SigKeyGroupAPIService) GetAccountSkGroupExecute(r ApiGetAccountSkGroupRequest) (*SigningKeyGroupViewResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SigningKeyGroupViewResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SigKeyGroupAPIService.GetAccountSkGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/account-sk-groups/{groupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"groupId"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAccountSkGroupKeysRequest struct {
	ctx        context.Context
	ApiService SigKeyGroupAPI
	groupId    string
}

func (r ApiListAccountSkGroupKeysRequest) Execute() (*SigningKeyListResponse, *http.Response, error) {
	return r.ApiService.ListAccountSkGroupKeysExecute(r)
}

/*
ListAccountSkGroupKeys List Signing Keys

List Account Signing Keys In Group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param groupId
	@return ApiListAccountSkGroupKeysRequest
*/
func (a *SigKeyGroupAPIService) ListAccountSkGroupKeys(ctx context.Context, groupId string) ApiListAccountSkGroupKeysRequest {
	return ApiListAccountSkGroupKeysRequest{
		ApiService: a,
		ctx:        ctx,
		groupId:    groupId,
	}
}

// Execute executes the request
//
//	@return SigningKeyListResponse
func (a *SigKeyGroupAPIService) ListAccountSkGroupKeysExecute(r ApiListAccountSkGroupKeysRequest) (*SigningKeyListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SigningKeyListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SigKeyGroupAPIService.ListAccountSkGroupKeys")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/account-sk-groups/{groupId}/account-sks"
	localVarPath = strings.Replace(localVarPath, "{"+"groupId"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRotateAccountSkRequest struct {
	ctx        context.Context
	ApiService SigKeyGroupAPI
	groupId    string
}

func (r ApiRotateAccountSkRequest) Execute() (*SigningKeyViewResponse, *http.Response, error) {
	return r.ApiService.RotateAccountSkExecute(r)
}

/*
RotateAccountSk Roate Active Signing Key

Rotates The Active Signing Key For Account Signing Key Group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param groupId
	@return ApiRotateAccountSkRequest
*/
func (a *SigKeyGroupAPIService) RotateAccountSk(ctx context.Context, groupId string) ApiRotateAccountSkRequest {
	return ApiRotateAccountSkRequest{
		ApiService: a,
		ctx:        ctx,
		groupId:    groupId,
	}
}

// Execute executes the request
//
//	@return SigningKeyViewResponse
func (a *SigKeyGroupAPIService) RotateAccountSkExecute(r ApiRotateAccountSkRequest) (*SigningKeyViewResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SigningKeyViewResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SigKeyGroupAPIService.RotateAccountSk")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/account-sk-groups/{groupId}/rotate-sk"
	localVarPath = strings.Replace(localVarPath, "{"+"groupId"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAccountSkGroupRequest struct {
	ctx                          context.Context
	ApiService                   SigKeyGroupAPI
	groupId                      string
	signingKeyGroupUpdateRequest *SigningKeyGroupUpdateRequest
}

func (r ApiUpdateAccountSkGroupRequest) SigningKeyGroupUpdateRequest(signingKeyGroupUpdateRequest SigningKeyGroupUpdateRequest) ApiUpdateAccountSkGroupRequest {
	r.signingKeyGroupUpdateRequest = &signingKeyGroupUpdateRequest
	return r
}

func (r ApiUpdateAccountSkGroupRequest) Execute() (*SigningKeyGroupViewResponse, *http.Response, error) {
	return r.ApiService.UpdateAccountSkGroupExecute(r)
}

/*
UpdateAccountSkGroup Update Account Signing Key Group

Update Account Signing Key Group

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param groupId
	@return ApiUpdateAccountSkGroupRequest
*/
func (a *SigKeyGroupAPIService) UpdateAccountSkGroup(ctx context.Context, groupId string) ApiUpdateAccountSkGroupRequest {
	return ApiUpdateAccountSkGroupRequest{
		ApiService: a,
		ctx:        ctx,
		groupId:    groupId,
	}
}

// Execute executes the request
//
//	@return SigningKeyGroupViewResponse
func (a *SigKeyGroupAPIService) UpdateAccountSkGroupExecute(r ApiUpdateAccountSkGroupRequest) (*SigningKeyGroupViewResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SigningKeyGroupViewResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SigKeyGroupAPIService.UpdateAccountSkGroup")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/account-sk-groups/{groupId}"
	localVarPath = strings.Replace(localVarPath, "{"+"groupId"+"}", url.PathEscape(parameterValueToString(r.groupId, "groupId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.signingKeyGroupUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
