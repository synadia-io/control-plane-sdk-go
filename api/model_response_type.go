/*
Synadia Control Plane

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// ResponseType ResponseType is used to store an export response type
type ResponseType string

// List of ResponseType
const (
	RESPONSETYPE_SINGLETON ResponseType = "Singleton"
	RESPONSETYPE_STREAM    ResponseType = "Stream"
	RESPONSETYPE_CHUNKED   ResponseType = "Chunked"
)

// All allowed values of ResponseType enum
var AllowedResponseTypeEnumValues = []ResponseType{
	"Singleton",
	"Stream",
	"Chunked",
}

func (v *ResponseType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ResponseType(value)
	for _, existing := range AllowedResponseTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ResponseType", value)
}

// NewResponseTypeFromValue returns a pointer to a valid ResponseType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewResponseTypeFromValue(v string) (*ResponseType, error) {
	ev := ResponseType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ResponseType: valid values are %v", v, AllowedResponseTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ResponseType) IsValid() bool {
	for _, existing := range AllowedResponseTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ResponseType value
func (v ResponseType) Ptr() *ResponseType {
	return &v
}

type NullableResponseType struct {
	value *ResponseType
	isSet bool
}

func (v NullableResponseType) Get() *ResponseType {
	return v.value
}

func (v *NullableResponseType) Set(val *ResponseType) {
	v.value = val
	v.isSet = true
}

func (v NullableResponseType) IsSet() bool {
	return v.isSet
}

func (v *NullableResponseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResponseType(val *ResponseType) *NullableResponseType {
	return &NullableResponseType{value: val, isSet: true}
}

func (v NullableResponseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResponseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
