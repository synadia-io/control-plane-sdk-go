/*
Synadia Control Plane

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// AlertRuleType the model 'AlertRuleType'
type AlertRuleType string

// List of AlertRuleType
const (
	ALERTRULETYPE_SYSTEM_DEFAULT  AlertRuleType = "SystemDefault"
	ALERTRULETYPE_SYSTEM          AlertRuleType = "System"
	ALERTRULETYPE_ACCOUNT_DEFAULT AlertRuleType = "AccountDefault"
	ALERTRULETYPE_ACCOUNT         AlertRuleType = "Account"
	ALERTRULETYPE_STREAM          AlertRuleType = "Stream"
	ALERTRULETYPE_CONSUMER        AlertRuleType = "Consumer"
)

// All allowed values of AlertRuleType enum
var AllowedAlertRuleTypeEnumValues = []AlertRuleType{
	"SystemDefault",
	"System",
	"AccountDefault",
	"Account",
	"Stream",
	"Consumer",
}

func (v *AlertRuleType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertRuleType(value)
	for _, existing := range AllowedAlertRuleTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertRuleType", value)
}

// NewAlertRuleTypeFromValue returns a pointer to a valid AlertRuleType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertRuleTypeFromValue(v string) (*AlertRuleType, error) {
	ev := AlertRuleType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertRuleType: valid values are %v", v, AllowedAlertRuleTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertRuleType) IsValid() bool {
	for _, existing := range AllowedAlertRuleTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlertRuleType value
func (v AlertRuleType) Ptr() *AlertRuleType {
	return &v
}

type NullableAlertRuleType struct {
	value *AlertRuleType
	isSet bool
}

func (v NullableAlertRuleType) Get() *AlertRuleType {
	return v.value
}

func (v *NullableAlertRuleType) Set(val *AlertRuleType) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertRuleType) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertRuleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertRuleType(val *AlertRuleType) *NullableAlertRuleType {
	return &NullableAlertRuleType{value: val, isSet: true}
}

func (v NullableAlertRuleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertRuleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
