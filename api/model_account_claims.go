/*
Synadia Control Plane

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AccountClaims type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountClaims{}

// AccountClaims AccountClaims defines the body of an account JWT
type AccountClaims struct {
	Nats *Account `json:"nats,omitempty"`
	Aud  *string  `json:"aud,omitempty"`
	Exp  *int64   `json:"exp,omitempty"`
	Iat  *int64   `json:"iat,omitempty"`
	Iss  *string  `json:"iss,omitempty"`
	Jti  *string  `json:"jti,omitempty"`
	Name *string  `json:"name,omitempty"`
	Nbf  *int64   `json:"nbf,omitempty"`
	Sub  *string  `json:"sub,omitempty"`
}

// NewAccountClaims instantiates a new AccountClaims object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountClaims() *AccountClaims {
	this := AccountClaims{}
	return &this
}

// NewAccountClaimsWithDefaults instantiates a new AccountClaims object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountClaimsWithDefaults() *AccountClaims {
	this := AccountClaims{}
	return &this
}

// GetNats returns the Nats field value if set, zero value otherwise.
func (o *AccountClaims) GetNats() Account {
	if o == nil || IsNil(o.Nats) {
		var ret Account
		return ret
	}
	return *o.Nats
}

// GetNatsOk returns a tuple with the Nats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountClaims) GetNatsOk() (*Account, bool) {
	if o == nil || IsNil(o.Nats) {
		return nil, false
	}
	return o.Nats, true
}

// HasNats returns a boolean if a field has been set.
func (o *AccountClaims) HasNats() bool {
	if o != nil && !IsNil(o.Nats) {
		return true
	}

	return false
}

// SetNats gets a reference to the given Account and assigns it to the Nats field.
func (o *AccountClaims) SetNats(v Account) {
	o.Nats = &v
}

// GetAud returns the Aud field value if set, zero value otherwise.
func (o *AccountClaims) GetAud() string {
	if o == nil || IsNil(o.Aud) {
		var ret string
		return ret
	}
	return *o.Aud
}

// GetAudOk returns a tuple with the Aud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountClaims) GetAudOk() (*string, bool) {
	if o == nil || IsNil(o.Aud) {
		return nil, false
	}
	return o.Aud, true
}

// HasAud returns a boolean if a field has been set.
func (o *AccountClaims) HasAud() bool {
	if o != nil && !IsNil(o.Aud) {
		return true
	}

	return false
}

// SetAud gets a reference to the given string and assigns it to the Aud field.
func (o *AccountClaims) SetAud(v string) {
	o.Aud = &v
}

// GetExp returns the Exp field value if set, zero value otherwise.
func (o *AccountClaims) GetExp() int64 {
	if o == nil || IsNil(o.Exp) {
		var ret int64
		return ret
	}
	return *o.Exp
}

// GetExpOk returns a tuple with the Exp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountClaims) GetExpOk() (*int64, bool) {
	if o == nil || IsNil(o.Exp) {
		return nil, false
	}
	return o.Exp, true
}

// HasExp returns a boolean if a field has been set.
func (o *AccountClaims) HasExp() bool {
	if o != nil && !IsNil(o.Exp) {
		return true
	}

	return false
}

// SetExp gets a reference to the given int64 and assigns it to the Exp field.
func (o *AccountClaims) SetExp(v int64) {
	o.Exp = &v
}

// GetIat returns the Iat field value if set, zero value otherwise.
func (o *AccountClaims) GetIat() int64 {
	if o == nil || IsNil(o.Iat) {
		var ret int64
		return ret
	}
	return *o.Iat
}

// GetIatOk returns a tuple with the Iat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountClaims) GetIatOk() (*int64, bool) {
	if o == nil || IsNil(o.Iat) {
		return nil, false
	}
	return o.Iat, true
}

// HasIat returns a boolean if a field has been set.
func (o *AccountClaims) HasIat() bool {
	if o != nil && !IsNil(o.Iat) {
		return true
	}

	return false
}

// SetIat gets a reference to the given int64 and assigns it to the Iat field.
func (o *AccountClaims) SetIat(v int64) {
	o.Iat = &v
}

// GetIss returns the Iss field value if set, zero value otherwise.
func (o *AccountClaims) GetIss() string {
	if o == nil || IsNil(o.Iss) {
		var ret string
		return ret
	}
	return *o.Iss
}

// GetIssOk returns a tuple with the Iss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountClaims) GetIssOk() (*string, bool) {
	if o == nil || IsNil(o.Iss) {
		return nil, false
	}
	return o.Iss, true
}

// HasIss returns a boolean if a field has been set.
func (o *AccountClaims) HasIss() bool {
	if o != nil && !IsNil(o.Iss) {
		return true
	}

	return false
}

// SetIss gets a reference to the given string and assigns it to the Iss field.
func (o *AccountClaims) SetIss(v string) {
	o.Iss = &v
}

// GetJti returns the Jti field value if set, zero value otherwise.
func (o *AccountClaims) GetJti() string {
	if o == nil || IsNil(o.Jti) {
		var ret string
		return ret
	}
	return *o.Jti
}

// GetJtiOk returns a tuple with the Jti field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountClaims) GetJtiOk() (*string, bool) {
	if o == nil || IsNil(o.Jti) {
		return nil, false
	}
	return o.Jti, true
}

// HasJti returns a boolean if a field has been set.
func (o *AccountClaims) HasJti() bool {
	if o != nil && !IsNil(o.Jti) {
		return true
	}

	return false
}

// SetJti gets a reference to the given string and assigns it to the Jti field.
func (o *AccountClaims) SetJti(v string) {
	o.Jti = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AccountClaims) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountClaims) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AccountClaims) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AccountClaims) SetName(v string) {
	o.Name = &v
}

// GetNbf returns the Nbf field value if set, zero value otherwise.
func (o *AccountClaims) GetNbf() int64 {
	if o == nil || IsNil(o.Nbf) {
		var ret int64
		return ret
	}
	return *o.Nbf
}

// GetNbfOk returns a tuple with the Nbf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountClaims) GetNbfOk() (*int64, bool) {
	if o == nil || IsNil(o.Nbf) {
		return nil, false
	}
	return o.Nbf, true
}

// HasNbf returns a boolean if a field has been set.
func (o *AccountClaims) HasNbf() bool {
	if o != nil && !IsNil(o.Nbf) {
		return true
	}

	return false
}

// SetNbf gets a reference to the given int64 and assigns it to the Nbf field.
func (o *AccountClaims) SetNbf(v int64) {
	o.Nbf = &v
}

// GetSub returns the Sub field value if set, zero value otherwise.
func (o *AccountClaims) GetSub() string {
	if o == nil || IsNil(o.Sub) {
		var ret string
		return ret
	}
	return *o.Sub
}

// GetSubOk returns a tuple with the Sub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountClaims) GetSubOk() (*string, bool) {
	if o == nil || IsNil(o.Sub) {
		return nil, false
	}
	return o.Sub, true
}

// HasSub returns a boolean if a field has been set.
func (o *AccountClaims) HasSub() bool {
	if o != nil && !IsNil(o.Sub) {
		return true
	}

	return false
}

// SetSub gets a reference to the given string and assigns it to the Sub field.
func (o *AccountClaims) SetSub(v string) {
	o.Sub = &v
}

func (o AccountClaims) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountClaims) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Nats) {
		toSerialize["nats"] = o.Nats
	}
	if !IsNil(o.Aud) {
		toSerialize["aud"] = o.Aud
	}
	if !IsNil(o.Exp) {
		toSerialize["exp"] = o.Exp
	}
	if !IsNil(o.Iat) {
		toSerialize["iat"] = o.Iat
	}
	if !IsNil(o.Iss) {
		toSerialize["iss"] = o.Iss
	}
	if !IsNil(o.Jti) {
		toSerialize["jti"] = o.Jti
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Nbf) {
		toSerialize["nbf"] = o.Nbf
	}
	if !IsNil(o.Sub) {
		toSerialize["sub"] = o.Sub
	}
	return toSerialize, nil
}

type NullableAccountClaims struct {
	value *AccountClaims
	isSet bool
}

func (v NullableAccountClaims) Get() *AccountClaims {
	return v.value
}

func (v *NullableAccountClaims) Set(val *AccountClaims) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountClaims) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountClaims) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountClaims(val *AccountClaims) *NullableAccountClaims {
	return &NullableAccountClaims{value: val, isSet: true}
}

func (v NullableAccountClaims) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountClaims) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
