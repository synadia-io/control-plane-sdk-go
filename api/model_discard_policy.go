/*
Synadia Control Plane

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
	"fmt"
)

// DiscardPolicy enums have been changed to match UnmarshalJSON in https://github.com/nats-io/jsm.go/blob/main/api/streams.go
type DiscardPolicy string

// List of DiscardPolicy
const (
	DISCARDPOLICY_OLD DiscardPolicy = "old"
	DISCARDPOLICY_NEW DiscardPolicy = "new"
)

// All allowed values of DiscardPolicy enum
var AllowedDiscardPolicyEnumValues = []DiscardPolicy{
	"old",
	"new",
}

func (v *DiscardPolicy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DiscardPolicy(value)
	for _, existing := range AllowedDiscardPolicyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DiscardPolicy", value)
}

// NewDiscardPolicyFromValue returns a pointer to a valid DiscardPolicy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDiscardPolicyFromValue(v string) (*DiscardPolicy, error) {
	ev := DiscardPolicy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DiscardPolicy: valid values are %v", v, AllowedDiscardPolicyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DiscardPolicy) IsValid() bool {
	for _, existing := range AllowedDiscardPolicyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DiscardPolicy value
func (v DiscardPolicy) Ptr() *DiscardPolicy {
	return &v
}

type NullableDiscardPolicy struct {
	value *DiscardPolicy
	isSet bool
}

func (v NullableDiscardPolicy) Get() *DiscardPolicy {
	return v.value
}

func (v *NullableDiscardPolicy) Set(val *DiscardPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableDiscardPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableDiscardPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiscardPolicy(val *DiscardPolicy) *NullableDiscardPolicy {
	return &NullableDiscardPolicy{value: val, isSet: true}
}

func (v NullableDiscardPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiscardPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
