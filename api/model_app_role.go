/*
Synadia Control Plane

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the AppRole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppRole{}

// AppRole struct for AppRole
type AppRole struct {
	Description string       `json:"description"`
	Enabled     bool         `json:"enabled"`
	Id          string       `json:"id"`
	Name        string       `json:"name"`
	Policies    []string     `json:"policies"`
	Scope       AppRoleScope `json:"scope"`
	SortOrder   float32      `json:"sort_order"`
}

// NewAppRole instantiates a new AppRole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppRole(description string, enabled bool, id string, name string, policies []string, scope AppRoleScope, sortOrder float32) *AppRole {
	this := AppRole{}
	this.Description = description
	this.Enabled = enabled
	this.Id = id
	this.Name = name
	this.Policies = policies
	this.Scope = scope
	this.SortOrder = sortOrder
	return &this
}

// NewAppRoleWithDefaults instantiates a new AppRole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppRoleWithDefaults() *AppRole {
	this := AppRole{}
	return &this
}

// GetDescription returns the Description field value
func (o *AppRole) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *AppRole) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *AppRole) SetDescription(v string) {
	o.Description = v
}

// GetEnabled returns the Enabled field value
func (o *AppRole) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *AppRole) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *AppRole) SetEnabled(v bool) {
	o.Enabled = v
}

// GetId returns the Id field value
func (o *AppRole) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AppRole) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AppRole) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *AppRole) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AppRole) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AppRole) SetName(v string) {
	o.Name = v
}

// GetPolicies returns the Policies field value
func (o *AppRole) GetPolicies() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value
// and a boolean to check if the value has been set.
func (o *AppRole) GetPoliciesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Policies, true
}

// SetPolicies sets field value
func (o *AppRole) SetPolicies(v []string) {
	o.Policies = v
}

// GetScope returns the Scope field value
func (o *AppRole) GetScope() AppRoleScope {
	if o == nil {
		var ret AppRoleScope
		return ret
	}

	return o.Scope
}

// GetScopeOk returns a tuple with the Scope field value
// and a boolean to check if the value has been set.
func (o *AppRole) GetScopeOk() (*AppRoleScope, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Scope, true
}

// SetScope sets field value
func (o *AppRole) SetScope(v AppRoleScope) {
	o.Scope = v
}

// GetSortOrder returns the SortOrder field value
func (o *AppRole) GetSortOrder() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.SortOrder
}

// GetSortOrderOk returns a tuple with the SortOrder field value
// and a boolean to check if the value has been set.
func (o *AppRole) GetSortOrderOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SortOrder, true
}

// SetSortOrder sets field value
func (o *AppRole) SetSortOrder(v float32) {
	o.SortOrder = v
}

func (o AppRole) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppRole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	toSerialize["enabled"] = o.Enabled
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["policies"] = o.Policies
	toSerialize["scope"] = o.Scope
	toSerialize["sort_order"] = o.SortOrder
	return toSerialize, nil
}

type NullableAppRole struct {
	value *AppRole
	isSet bool
}

func (v NullableAppRole) Get() *AppRole {
	return v.value
}

func (v *NullableAppRole) Set(val *AppRole) {
	v.value = val
	v.isSet = true
}

func (v NullableAppRole) IsSet() bool {
	return v.isSet
}

func (v *NullableAppRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppRole(val *AppRole) *NullableAppRole {
	return &NullableAppRole{value: val, isSet: true}
}

func (v NullableAppRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
