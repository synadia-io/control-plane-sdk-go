/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// SigningKeyScopeType the model 'SigningKeyScopeType'
type SigningKeyScopeType string

// List of SigningKeyScopeType
const (
	SIGNINGKEYSCOPETYPE_USER_SCOPE SigningKeyScopeType = "user_scope"
)

// All allowed values of SigningKeyScopeType enum
var AllowedSigningKeyScopeTypeEnumValues = []SigningKeyScopeType{
	"user_scope",
}

func (v *SigningKeyScopeType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SigningKeyScopeType(value)
	for _, existing := range AllowedSigningKeyScopeTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SigningKeyScopeType", value)
}

// NewSigningKeyScopeTypeFromValue returns a pointer to a valid SigningKeyScopeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSigningKeyScopeTypeFromValue(v string) (*SigningKeyScopeType, error) {
	ev := SigningKeyScopeType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SigningKeyScopeType: valid values are %v", v, AllowedSigningKeyScopeTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SigningKeyScopeType) IsValid() bool {
	for _, existing := range AllowedSigningKeyScopeTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SigningKeyScopeType value
func (v SigningKeyScopeType) Ptr() *SigningKeyScopeType {
	return &v
}
