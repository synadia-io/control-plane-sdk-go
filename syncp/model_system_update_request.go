/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

// checks if the SystemUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SystemUpdateRequest{}

// SystemUpdateRequest struct for SystemUpdateRequest
type SystemUpdateRequest struct {
	ConnectionType       *SystemConnectionType                      `json:"connection_type,omitempty"`
	DirectConnectionOpts *Nullable[SystemDirectConnectionOptsPatch] `json:"direct_connection_opts,omitempty"`
	JetstreamDomain      *Nullable[string]                          `json:"jetstream_domain,omitempty"`
	JetstreamEnabled     *bool                                      `json:"jetstream_enabled,omitempty"`
	LogForwardingOpts    *Nullable[SystemLogForwardingOptsPatch]    `json:"log_forwarding_opts,omitempty"`
	Name                 *string                                    `json:"name,omitempty"`
	NatsAlertingConfig   *Nullable[NatsAlertingConfigPatch]         `json:"nats_alerting_config,omitempty"`
	OperatorJwt          *string                                    `json:"operator_jwt,omitempty"`
	Url                  *string                                    `json:"url,omitempty"`
}

func (o SystemUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ConnectionType != nil {
		toSerialize["connection_type"] = o.ConnectionType
	}
	if o.DirectConnectionOpts != nil && !o.DirectConnectionOpts.IsNull() {
		toSerialize["direct_connection_opts"] = o.DirectConnectionOpts.Val
	}
	if o.JetstreamDomain != nil && !o.JetstreamDomain.IsNull() {
		toSerialize["jetstream_domain"] = o.JetstreamDomain.Val
	}
	if o.JetstreamEnabled != nil {
		toSerialize["jetstream_enabled"] = o.JetstreamEnabled
	}
	if o.LogForwardingOpts != nil && !o.LogForwardingOpts.IsNull() {
		toSerialize["log_forwarding_opts"] = o.LogForwardingOpts.Val
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.NatsAlertingConfig != nil && !o.NatsAlertingConfig.IsNull() {
		toSerialize["nats_alerting_config"] = o.NatsAlertingConfig.Val
	}
	if o.OperatorJwt != nil {
		toSerialize["operator_jwt"] = o.OperatorJwt
	}
	if o.Url != nil {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}
