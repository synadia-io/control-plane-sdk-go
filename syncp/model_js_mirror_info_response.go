/*
Synadia Control Plane

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"time"
)

// checks if the JSMirrorInfoResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSMirrorInfoResponse{}

// JSMirrorInfoResponse struct for JSMirrorInfoResponse
type JSMirrorInfoResponse struct {
	Config     *JSMirrorConfigRequest   `json:"config,omitempty"`
	Id         *string                  `json:"id,omitempty"`
	Mirror     NullableStreamSourceInfo `json:"mirror,omitempty"`
	Shared     *bool                    `json:"shared,omitempty"`
	Alternates []StreamAlternate        `json:"alternates,omitempty"`
	Cluster    *ClusterInfo             `json:"cluster,omitempty"`
	Created    time.Time                `json:"created"`
	Sources    []StreamSourceInfo       `json:"sources,omitempty"`
	State      StreamState              `json:"state"`
}

// NewJSMirrorInfoResponse instantiates a new JSMirrorInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSMirrorInfoResponse(created time.Time, state StreamState) *JSMirrorInfoResponse {
	this := JSMirrorInfoResponse{}
	this.Created = created
	this.State = state
	return &this
}

// NewJSMirrorInfoResponseWithDefaults instantiates a new JSMirrorInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSMirrorInfoResponseWithDefaults() *JSMirrorInfoResponse {
	this := JSMirrorInfoResponse{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *JSMirrorInfoResponse) GetConfig() JSMirrorConfigRequest {
	if o == nil || IsNil(o.Config) {
		var ret JSMirrorConfigRequest
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSMirrorInfoResponse) GetConfigOk() (*JSMirrorConfigRequest, bool) {
	if o == nil || IsNil(o.Config) {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *JSMirrorInfoResponse) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given JSMirrorConfigRequest and assigns it to the Config field.
func (o *JSMirrorInfoResponse) SetConfig(v JSMirrorConfigRequest) {
	o.Config = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *JSMirrorInfoResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSMirrorInfoResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *JSMirrorInfoResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *JSMirrorInfoResponse) SetId(v string) {
	o.Id = &v
}

// GetMirror returns the Mirror field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JSMirrorInfoResponse) GetMirror() StreamSourceInfo {
	if o == nil || IsNil(o.Mirror.Get()) {
		var ret StreamSourceInfo
		return ret
	}
	return *o.Mirror.Get()
}

// GetMirrorOk returns a tuple with the Mirror field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JSMirrorInfoResponse) GetMirrorOk() (*StreamSourceInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mirror.Get(), o.Mirror.IsSet()
}

// HasMirror returns a boolean if a field has been set.
func (o *JSMirrorInfoResponse) HasMirror() bool {
	if o != nil && o.Mirror.IsSet() {
		return true
	}

	return false
}

// SetMirror gets a reference to the given NullableStreamSourceInfo and assigns it to the Mirror field.
func (o *JSMirrorInfoResponse) SetMirror(v StreamSourceInfo) {
	o.Mirror.Set(&v)
}

// SetMirrorNil sets the value for Mirror to be an explicit nil
func (o *JSMirrorInfoResponse) SetMirrorNil() {
	o.Mirror.Set(nil)
}

// UnsetMirror ensures that no value is present for Mirror, not even an explicit nil
func (o *JSMirrorInfoResponse) UnsetMirror() {
	o.Mirror.Unset()
}

// GetShared returns the Shared field value if set, zero value otherwise.
func (o *JSMirrorInfoResponse) GetShared() bool {
	if o == nil || IsNil(o.Shared) {
		var ret bool
		return ret
	}
	return *o.Shared
}

// GetSharedOk returns a tuple with the Shared field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSMirrorInfoResponse) GetSharedOk() (*bool, bool) {
	if o == nil || IsNil(o.Shared) {
		return nil, false
	}
	return o.Shared, true
}

// HasShared returns a boolean if a field has been set.
func (o *JSMirrorInfoResponse) HasShared() bool {
	if o != nil && !IsNil(o.Shared) {
		return true
	}

	return false
}

// SetShared gets a reference to the given bool and assigns it to the Shared field.
func (o *JSMirrorInfoResponse) SetShared(v bool) {
	o.Shared = &v
}

// GetAlternates returns the Alternates field value if set, zero value otherwise.
func (o *JSMirrorInfoResponse) GetAlternates() []StreamAlternate {
	if o == nil || IsNil(o.Alternates) {
		var ret []StreamAlternate
		return ret
	}
	return o.Alternates
}

// GetAlternatesOk returns a tuple with the Alternates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSMirrorInfoResponse) GetAlternatesOk() ([]StreamAlternate, bool) {
	if o == nil || IsNil(o.Alternates) {
		return nil, false
	}
	return o.Alternates, true
}

// HasAlternates returns a boolean if a field has been set.
func (o *JSMirrorInfoResponse) HasAlternates() bool {
	if o != nil && !IsNil(o.Alternates) {
		return true
	}

	return false
}

// SetAlternates gets a reference to the given []StreamAlternate and assigns it to the Alternates field.
func (o *JSMirrorInfoResponse) SetAlternates(v []StreamAlternate) {
	o.Alternates = v
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *JSMirrorInfoResponse) GetCluster() ClusterInfo {
	if o == nil || IsNil(o.Cluster) {
		var ret ClusterInfo
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSMirrorInfoResponse) GetClusterOk() (*ClusterInfo, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *JSMirrorInfoResponse) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given ClusterInfo and assigns it to the Cluster field.
func (o *JSMirrorInfoResponse) SetCluster(v ClusterInfo) {
	o.Cluster = &v
}

// GetCreated returns the Created field value
func (o *JSMirrorInfoResponse) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *JSMirrorInfoResponse) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *JSMirrorInfoResponse) SetCreated(v time.Time) {
	o.Created = v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *JSMirrorInfoResponse) GetSources() []StreamSourceInfo {
	if o == nil || IsNil(o.Sources) {
		var ret []StreamSourceInfo
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSMirrorInfoResponse) GetSourcesOk() ([]StreamSourceInfo, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *JSMirrorInfoResponse) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []StreamSourceInfo and assigns it to the Sources field.
func (o *JSMirrorInfoResponse) SetSources(v []StreamSourceInfo) {
	o.Sources = v
}

// GetState returns the State field value
func (o *JSMirrorInfoResponse) GetState() StreamState {
	if o == nil {
		var ret StreamState
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *JSMirrorInfoResponse) GetStateOk() (*StreamState, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *JSMirrorInfoResponse) SetState(v StreamState) {
	o.State = v
}

func (o JSMirrorInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSMirrorInfoResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if o.Mirror.IsSet() {
		toSerialize["mirror"] = o.Mirror.Get()
	}
	if !IsNil(o.Shared) {
		toSerialize["shared"] = o.Shared
	}
	if !IsNil(o.Alternates) {
		toSerialize["alternates"] = o.Alternates
	}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	toSerialize["created"] = o.Created
	if !IsNil(o.Sources) {
		toSerialize["sources"] = o.Sources
	}
	toSerialize["state"] = o.State
	return toSerialize, nil
}

type NullableJSMirrorInfoResponse struct {
	value *JSMirrorInfoResponse
	isSet bool
}

func (v NullableJSMirrorInfoResponse) Get() *JSMirrorInfoResponse {
	return v.value
}

func (v *NullableJSMirrorInfoResponse) Set(val *JSMirrorInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableJSMirrorInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableJSMirrorInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSMirrorInfoResponse(val *JSMirrorInfoResponse) *NullableJSMirrorInfoResponse {
	return &NullableJSMirrorInfoResponse{value: val, isSet: true}
}

func (v NullableJSMirrorInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSMirrorInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
