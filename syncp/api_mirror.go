/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type MirrorAPI interface {

	/*
		CreateMirrorPullConsumer Create Pull Consumer

		Create Pull Consumer

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param streamId
		@return ApiCreateMirrorPullConsumerRequest
	*/
	CreateMirrorPullConsumer(ctx context.Context, streamId string) ApiCreateMirrorPullConsumerRequest

	// CreateMirrorPullConsumerExecute executes the request
	//  @return JSPullConsumerInfoResponse
	CreateMirrorPullConsumerExecute(r ApiCreateMirrorPullConsumerRequest) (*JSPullConsumerInfoResponse, *http.Response, error)

	/*
		CreateMirrorPushConsumer Create Push consumer

		Create Push consumer

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param streamId
		@return ApiCreateMirrorPushConsumerRequest
	*/
	CreateMirrorPushConsumer(ctx context.Context, streamId string) ApiCreateMirrorPushConsumerRequest

	// CreateMirrorPushConsumerExecute executes the request
	//  @return JSPushConsumerInfoResponse
	CreateMirrorPushConsumerExecute(r ApiCreateMirrorPushConsumerRequest) (*JSPushConsumerInfoResponse, *http.Response, error)

	/*
		DeleteMirror Delete Mirror

		Delete Mirror

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param streamId
		@return ApiDeleteMirrorRequest
	*/
	DeleteMirror(ctx context.Context, streamId string) ApiDeleteMirrorRequest

	// DeleteMirrorExecute executes the request
	DeleteMirrorExecute(r ApiDeleteMirrorRequest) (*http.Response, error)

	/*
		GetMirror Get Mirror

		Get Mirror

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param streamId
		@return ApiGetMirrorRequest
	*/
	GetMirror(ctx context.Context, streamId string) ApiGetMirrorRequest

	// GetMirrorExecute executes the request
	//  @return JSMirrorInfoResponse
	GetMirrorExecute(r ApiGetMirrorRequest) (*JSMirrorInfoResponse, *http.Response, error)

	/*
		ListMirrorConsumers List Consumers

		List Consumers

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param streamId
		@return ApiListMirrorConsumersRequest
	*/
	ListMirrorConsumers(ctx context.Context, streamId string) ApiListMirrorConsumersRequest

	// ListMirrorConsumersExecute executes the request
	//  @return JSConsumerInfoListResponse
	ListMirrorConsumersExecute(r ApiListMirrorConsumersRequest) (*JSConsumerInfoListResponse, *http.Response, error)

	/*
		UpdateMirror Update Mirror

		Update Mirror

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param streamId
		@return ApiUpdateMirrorRequest
	*/
	UpdateMirror(ctx context.Context, streamId string) ApiUpdateMirrorRequest

	// UpdateMirrorExecute executes the request
	//  @return JSMirrorInfoResponse
	UpdateMirrorExecute(r ApiUpdateMirrorRequest) (*JSMirrorInfoResponse, *http.Response, error)
}

// MirrorAPIService MirrorAPI service
type MirrorAPIService service

type ApiCreateMirrorPullConsumerRequest struct {
	ctx                         context.Context
	ApiService                  MirrorAPI
	streamId                    string
	jSPullConsumerConfigRequest *JSPullConsumerConfigRequest
}

func (r ApiCreateMirrorPullConsumerRequest) JSPullConsumerConfigRequest(jSPullConsumerConfigRequest JSPullConsumerConfigRequest) ApiCreateMirrorPullConsumerRequest {
	r.jSPullConsumerConfigRequest = &jSPullConsumerConfigRequest
	return r
}

func (r ApiCreateMirrorPullConsumerRequest) Execute() (*JSPullConsumerInfoResponse, *http.Response, error) {
	return r.ApiService.CreateMirrorPullConsumerExecute(r)
}

/*
CreateMirrorPullConsumer Create Pull Consumer

Create Pull Consumer

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param streamId
	@return ApiCreateMirrorPullConsumerRequest
*/
func (a *MirrorAPIService) CreateMirrorPullConsumer(ctx context.Context, streamId string) ApiCreateMirrorPullConsumerRequest {
	return ApiCreateMirrorPullConsumerRequest{
		ApiService: a,
		ctx:        ctx,
		streamId:   streamId,
	}
}

// Execute executes the request
//
//	@return JSPullConsumerInfoResponse
func (a *MirrorAPIService) CreateMirrorPullConsumerExecute(r ApiCreateMirrorPullConsumerRequest) (*JSPullConsumerInfoResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *JSPullConsumerInfoResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MirrorAPIService.CreateMirrorPullConsumer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/jetstream/mirror/{streamId}/consumers/pull"
	localVarPath = strings.Replace(localVarPath, "{"+"streamId"+"}", url.PathEscape(parameterValueToString(r.streamId, "streamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jSPullConsumerConfigRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateMirrorPushConsumerRequest struct {
	ctx                         context.Context
	ApiService                  MirrorAPI
	streamId                    string
	jSPushConsumerConfigRequest *JSPushConsumerConfigRequest
}

func (r ApiCreateMirrorPushConsumerRequest) JSPushConsumerConfigRequest(jSPushConsumerConfigRequest JSPushConsumerConfigRequest) ApiCreateMirrorPushConsumerRequest {
	r.jSPushConsumerConfigRequest = &jSPushConsumerConfigRequest
	return r
}

func (r ApiCreateMirrorPushConsumerRequest) Execute() (*JSPushConsumerInfoResponse, *http.Response, error) {
	return r.ApiService.CreateMirrorPushConsumerExecute(r)
}

/*
CreateMirrorPushConsumer Create Push consumer

Create Push consumer

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param streamId
	@return ApiCreateMirrorPushConsumerRequest
*/
func (a *MirrorAPIService) CreateMirrorPushConsumer(ctx context.Context, streamId string) ApiCreateMirrorPushConsumerRequest {
	return ApiCreateMirrorPushConsumerRequest{
		ApiService: a,
		ctx:        ctx,
		streamId:   streamId,
	}
}

// Execute executes the request
//
//	@return JSPushConsumerInfoResponse
func (a *MirrorAPIService) CreateMirrorPushConsumerExecute(r ApiCreateMirrorPushConsumerRequest) (*JSPushConsumerInfoResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *JSPushConsumerInfoResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MirrorAPIService.CreateMirrorPushConsumer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/jetstream/mirror/{streamId}/consumers/push"
	localVarPath = strings.Replace(localVarPath, "{"+"streamId"+"}", url.PathEscape(parameterValueToString(r.streamId, "streamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jSPushConsumerConfigRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteMirrorRequest struct {
	ctx        context.Context
	ApiService MirrorAPI
	streamId   string
}

func (r ApiDeleteMirrorRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteMirrorExecute(r)
}

/*
DeleteMirror Delete Mirror

Delete Mirror

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param streamId
	@return ApiDeleteMirrorRequest
*/
func (a *MirrorAPIService) DeleteMirror(ctx context.Context, streamId string) ApiDeleteMirrorRequest {
	return ApiDeleteMirrorRequest{
		ApiService: a,
		ctx:        ctx,
		streamId:   streamId,
	}
}

// Execute executes the request
func (a *MirrorAPIService) DeleteMirrorExecute(r ApiDeleteMirrorRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MirrorAPIService.DeleteMirror")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/jetstream/mirror/{streamId}"
	localVarPath = strings.Replace(localVarPath, "{"+"streamId"+"}", url.PathEscape(parameterValueToString(r.streamId, "streamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetMirrorRequest struct {
	ctx        context.Context
	ApiService MirrorAPI
	streamId   string
}

func (r ApiGetMirrorRequest) Execute() (*JSMirrorInfoResponse, *http.Response, error) {
	return r.ApiService.GetMirrorExecute(r)
}

/*
GetMirror Get Mirror

Get Mirror

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param streamId
	@return ApiGetMirrorRequest
*/
func (a *MirrorAPIService) GetMirror(ctx context.Context, streamId string) ApiGetMirrorRequest {
	return ApiGetMirrorRequest{
		ApiService: a,
		ctx:        ctx,
		streamId:   streamId,
	}
}

// Execute executes the request
//
//	@return JSMirrorInfoResponse
func (a *MirrorAPIService) GetMirrorExecute(r ApiGetMirrorRequest) (*JSMirrorInfoResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *JSMirrorInfoResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MirrorAPIService.GetMirror")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/jetstream/mirror/{streamId}"
	localVarPath = strings.Replace(localVarPath, "{"+"streamId"+"}", url.PathEscape(parameterValueToString(r.streamId, "streamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListMirrorConsumersRequest struct {
	ctx        context.Context
	ApiService MirrorAPI
	streamId   string
}

func (r ApiListMirrorConsumersRequest) Execute() (*JSConsumerInfoListResponse, *http.Response, error) {
	return r.ApiService.ListMirrorConsumersExecute(r)
}

/*
ListMirrorConsumers List Consumers

List Consumers

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param streamId
	@return ApiListMirrorConsumersRequest
*/
func (a *MirrorAPIService) ListMirrorConsumers(ctx context.Context, streamId string) ApiListMirrorConsumersRequest {
	return ApiListMirrorConsumersRequest{
		ApiService: a,
		ctx:        ctx,
		streamId:   streamId,
	}
}

// Execute executes the request
//
//	@return JSConsumerInfoListResponse
func (a *MirrorAPIService) ListMirrorConsumersExecute(r ApiListMirrorConsumersRequest) (*JSConsumerInfoListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *JSConsumerInfoListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MirrorAPIService.ListMirrorConsumers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/jetstream/mirror/{streamId}/consumers"
	localVarPath = strings.Replace(localVarPath, "{"+"streamId"+"}", url.PathEscape(parameterValueToString(r.streamId, "streamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateMirrorRequest struct {
	ctx                   context.Context
	ApiService            MirrorAPI
	streamId              string
	jSMirrorConfigRequest *JSMirrorConfigRequest
}

func (r ApiUpdateMirrorRequest) JSMirrorConfigRequest(jSMirrorConfigRequest JSMirrorConfigRequest) ApiUpdateMirrorRequest {
	r.jSMirrorConfigRequest = &jSMirrorConfigRequest
	return r
}

func (r ApiUpdateMirrorRequest) Execute() (*JSMirrorInfoResponse, *http.Response, error) {
	return r.ApiService.UpdateMirrorExecute(r)
}

/*
UpdateMirror Update Mirror

Update Mirror

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param streamId
	@return ApiUpdateMirrorRequest
*/
func (a *MirrorAPIService) UpdateMirror(ctx context.Context, streamId string) ApiUpdateMirrorRequest {
	return ApiUpdateMirrorRequest{
		ApiService: a,
		ctx:        ctx,
		streamId:   streamId,
	}
}

// Execute executes the request
//
//	@return JSMirrorInfoResponse
func (a *MirrorAPIService) UpdateMirrorExecute(r ApiUpdateMirrorRequest) (*JSMirrorInfoResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *JSMirrorInfoResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MirrorAPIService.UpdateMirror")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/jetstream/mirror/{streamId}"
	localVarPath = strings.Replace(localVarPath, "{"+"streamId"+"}", url.PathEscape(parameterValueToString(r.streamId, "streamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jSMirrorConfigRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
