/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"fmt"
)

// checks if the TeamInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamInfo{}

// TeamInfo struct for TeamInfo
type TeamInfo struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

type _TeamInfo TeamInfo

// NewTeamInfo instantiates a new TeamInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamInfo(id string, name string) *TeamInfo {
	this := TeamInfo{}
	this.Id = id
	this.Name = name
	return &this
}

// NewTeamInfoWithDefaults instantiates a new TeamInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamInfoWithDefaults() *TeamInfo {
	this := TeamInfo{}
	return &this
}

// GetId returns the Id field value
func (o *TeamInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TeamInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TeamInfo) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *TeamInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TeamInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TeamInfo) SetName(v string) {
	o.Name = v
}

func (o TeamInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *TeamInfo) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTeamInfo := _TeamInfo{}

	err = json.Unmarshal(bytes, &varTeamInfo)

	if err != nil {
		return err
	}

	*o = TeamInfo(varTeamInfo)

	return err
}

type NullableTeamInfo struct {
	value *TeamInfo
	isSet bool
}

func (v NullableTeamInfo) Get() *TeamInfo {
	return v.value
}

func (v *NullableTeamInfo) Set(val *TeamInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamInfo(val *TeamInfo) *NullableTeamInfo {
	return &NullableTeamInfo{value: val, isSet: true}
}

func (v NullableTeamInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
