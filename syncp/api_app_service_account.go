/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type AppServiceAccountAPI interface {

	/*
		CreateAppServiceAccountToken Create Acess Token for App Service Account

		Create Acess Token for App Service Account

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param serviceAccountId
		@return ApiCreateAppServiceAccountTokenRequest
	*/
	CreateAppServiceAccountToken(ctx context.Context, serviceAccountId string) ApiCreateAppServiceAccountTokenRequest

	// CreateAppServiceAccountTokenExecute executes the request
	//  @return AppUserAccessTokenCreateResponse
	CreateAppServiceAccountTokenExecute(r ApiCreateAppServiceAccountTokenRequest) (*AppUserAccessTokenCreateResponse, *http.Response, error)

	/*
		DeleteAppServiceAccount Delete App Service Account

		Delete App Service Account

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param serviceAccountId
		@return ApiDeleteAppServiceAccountRequest
	*/
	DeleteAppServiceAccount(ctx context.Context, serviceAccountId string) ApiDeleteAppServiceAccountRequest

	// DeleteAppServiceAccountExecute executes the request
	DeleteAppServiceAccountExecute(r ApiDeleteAppServiceAccountRequest) (*http.Response, error)

	/*
		GetAppServiceAccount Get App Service Account

		Get App Service Account

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param serviceAccountId
		@return ApiGetAppServiceAccountRequest
	*/
	GetAppServiceAccount(ctx context.Context, serviceAccountId string) ApiGetAppServiceAccountRequest

	// GetAppServiceAccountExecute executes the request
	//  @return ServiceAccountViewResponse
	GetAppServiceAccountExecute(r ApiGetAppServiceAccountRequest) (*ServiceAccountViewResponse, *http.Response, error)

	/*
		ListAppServiceAccountTokens List Access Tokens for App Service Account

		List Access Tokens for App Service Account

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param serviceAccountId
		@return ApiListAppServiceAccountTokensRequest
	*/
	ListAppServiceAccountTokens(ctx context.Context, serviceAccountId string) ApiListAppServiceAccountTokensRequest

	// ListAppServiceAccountTokensExecute executes the request
	//  @return AppUserAccessTokenListResponse
	ListAppServiceAccountTokensExecute(r ApiListAppServiceAccountTokensRequest) (*AppUserAccessTokenListResponse, *http.Response, error)

	/*
		UpdateAppServiceAccount Update App Service Account

		Update App Service Account

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param serviceAccountId
		@return ApiUpdateAppServiceAccountRequest
	*/
	UpdateAppServiceAccount(ctx context.Context, serviceAccountId string) ApiUpdateAppServiceAccountRequest

	// UpdateAppServiceAccountExecute executes the request
	//  @return ServiceAccountViewResponse
	UpdateAppServiceAccountExecute(r ApiUpdateAppServiceAccountRequest) (*ServiceAccountViewResponse, *http.Response, error)
}

// AppServiceAccountAPIService AppServiceAccountAPI service
type AppServiceAccountAPIService service

type ApiCreateAppServiceAccountTokenRequest struct {
	ctx                             context.Context
	ApiService                      AppServiceAccountAPI
	serviceAccountId                string
	appUserAccessTokenCreateRequest *AppUserAccessTokenCreateRequest
}

func (r ApiCreateAppServiceAccountTokenRequest) AppUserAccessTokenCreateRequest(appUserAccessTokenCreateRequest AppUserAccessTokenCreateRequest) ApiCreateAppServiceAccountTokenRequest {
	r.appUserAccessTokenCreateRequest = &appUserAccessTokenCreateRequest
	return r
}

func (r ApiCreateAppServiceAccountTokenRequest) Execute() (*AppUserAccessTokenCreateResponse, *http.Response, error) {
	return r.ApiService.CreateAppServiceAccountTokenExecute(r)
}

/*
CreateAppServiceAccountToken Create Acess Token for App Service Account

Create Acess Token for App Service Account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceAccountId
	@return ApiCreateAppServiceAccountTokenRequest
*/
func (a *AppServiceAccountAPIService) CreateAppServiceAccountToken(ctx context.Context, serviceAccountId string) ApiCreateAppServiceAccountTokenRequest {
	return ApiCreateAppServiceAccountTokenRequest{
		ApiService:       a,
		ctx:              ctx,
		serviceAccountId: serviceAccountId,
	}
}

// Execute executes the request
//
//	@return AppUserAccessTokenCreateResponse
func (a *AppServiceAccountAPIService) CreateAppServiceAccountTokenExecute(r ApiCreateAppServiceAccountTokenRequest) (*AppUserAccessTokenCreateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AppUserAccessTokenCreateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppServiceAccountAPIService.CreateAppServiceAccountToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service-accounts/app/{serviceAccountId}/tokens"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAccountId"+"}", url.PathEscape(parameterValueToString(r.serviceAccountId, "serviceAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appUserAccessTokenCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteAppServiceAccountRequest struct {
	ctx              context.Context
	ApiService       AppServiceAccountAPI
	serviceAccountId string
}

func (r ApiDeleteAppServiceAccountRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteAppServiceAccountExecute(r)
}

/*
DeleteAppServiceAccount Delete App Service Account

Delete App Service Account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceAccountId
	@return ApiDeleteAppServiceAccountRequest
*/
func (a *AppServiceAccountAPIService) DeleteAppServiceAccount(ctx context.Context, serviceAccountId string) ApiDeleteAppServiceAccountRequest {
	return ApiDeleteAppServiceAccountRequest{
		ApiService:       a,
		ctx:              ctx,
		serviceAccountId: serviceAccountId,
	}
}

// Execute executes the request
func (a *AppServiceAccountAPIService) DeleteAppServiceAccountExecute(r ApiDeleteAppServiceAccountRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppServiceAccountAPIService.DeleteAppServiceAccount")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service-accounts/app/{serviceAccountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAccountId"+"}", url.PathEscape(parameterValueToString(r.serviceAccountId, "serviceAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetAppServiceAccountRequest struct {
	ctx              context.Context
	ApiService       AppServiceAccountAPI
	serviceAccountId string
}

func (r ApiGetAppServiceAccountRequest) Execute() (*ServiceAccountViewResponse, *http.Response, error) {
	return r.ApiService.GetAppServiceAccountExecute(r)
}

/*
GetAppServiceAccount Get App Service Account

Get App Service Account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceAccountId
	@return ApiGetAppServiceAccountRequest
*/
func (a *AppServiceAccountAPIService) GetAppServiceAccount(ctx context.Context, serviceAccountId string) ApiGetAppServiceAccountRequest {
	return ApiGetAppServiceAccountRequest{
		ApiService:       a,
		ctx:              ctx,
		serviceAccountId: serviceAccountId,
	}
}

// Execute executes the request
//
//	@return ServiceAccountViewResponse
func (a *AppServiceAccountAPIService) GetAppServiceAccountExecute(r ApiGetAppServiceAccountRequest) (*ServiceAccountViewResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceAccountViewResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppServiceAccountAPIService.GetAppServiceAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service-accounts/app/{serviceAccountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAccountId"+"}", url.PathEscape(parameterValueToString(r.serviceAccountId, "serviceAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListAppServiceAccountTokensRequest struct {
	ctx              context.Context
	ApiService       AppServiceAccountAPI
	serviceAccountId string
}

func (r ApiListAppServiceAccountTokensRequest) Execute() (*AppUserAccessTokenListResponse, *http.Response, error) {
	return r.ApiService.ListAppServiceAccountTokensExecute(r)
}

/*
ListAppServiceAccountTokens List Access Tokens for App Service Account

List Access Tokens for App Service Account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceAccountId
	@return ApiListAppServiceAccountTokensRequest
*/
func (a *AppServiceAccountAPIService) ListAppServiceAccountTokens(ctx context.Context, serviceAccountId string) ApiListAppServiceAccountTokensRequest {
	return ApiListAppServiceAccountTokensRequest{
		ApiService:       a,
		ctx:              ctx,
		serviceAccountId: serviceAccountId,
	}
}

// Execute executes the request
//
//	@return AppUserAccessTokenListResponse
func (a *AppServiceAccountAPIService) ListAppServiceAccountTokensExecute(r ApiListAppServiceAccountTokensRequest) (*AppUserAccessTokenListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AppUserAccessTokenListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppServiceAccountAPIService.ListAppServiceAccountTokens")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service-accounts/app/{serviceAccountId}/tokens"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAccountId"+"}", url.PathEscape(parameterValueToString(r.serviceAccountId, "serviceAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateAppServiceAccountRequest struct {
	ctx                         context.Context
	ApiService                  AppServiceAccountAPI
	serviceAccountId            string
	serviceAccountUpdateRequest *ServiceAccountUpdateRequest
}

func (r ApiUpdateAppServiceAccountRequest) ServiceAccountUpdateRequest(serviceAccountUpdateRequest ServiceAccountUpdateRequest) ApiUpdateAppServiceAccountRequest {
	r.serviceAccountUpdateRequest = &serviceAccountUpdateRequest
	return r
}

func (r ApiUpdateAppServiceAccountRequest) Execute() (*ServiceAccountViewResponse, *http.Response, error) {
	return r.ApiService.UpdateAppServiceAccountExecute(r)
}

/*
UpdateAppServiceAccount Update App Service Account

Update App Service Account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceAccountId
	@return ApiUpdateAppServiceAccountRequest
*/
func (a *AppServiceAccountAPIService) UpdateAppServiceAccount(ctx context.Context, serviceAccountId string) ApiUpdateAppServiceAccountRequest {
	return ApiUpdateAppServiceAccountRequest{
		ApiService:       a,
		ctx:              ctx,
		serviceAccountId: serviceAccountId,
	}
}

// Execute executes the request
//
//	@return ServiceAccountViewResponse
func (a *AppServiceAccountAPIService) UpdateAppServiceAccountExecute(r ApiUpdateAppServiceAccountRequest) (*ServiceAccountViewResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceAccountViewResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AppServiceAccountAPIService.UpdateAppServiceAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service-accounts/app/{serviceAccountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAccountId"+"}", url.PathEscape(parameterValueToString(r.serviceAccountId, "serviceAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.serviceAccountUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
