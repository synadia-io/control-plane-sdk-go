/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"time"
)

// checks if the JSCommonConsumerConfigRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSCommonConsumerConfigRequest{}

// JSCommonConsumerConfigRequest struct for JSCommonConsumerConfigRequest
type JSCommonConsumerConfigRequest struct {
	AckPolicy         AckPolicy     `json:"ack_policy"`
	AckWait           *int64        `json:"ack_wait,omitempty"`
	Backoff           []int64       `json:"backoff,omitempty"`
	DeliverPolicy     DeliverPolicy `json:"deliver_policy"`
	Description       *string       `json:"description,omitempty"`
	Direct            *bool         `json:"direct,omitempty"`
	DurableName       *string       `json:"durable_name,omitempty"`
	FilterSubject     *string       `json:"filter_subject,omitempty"`
	InactiveThreshold *int64        `json:"inactive_threshold,omitempty"`
	MaxAckPending     *int32        `json:"max_ack_pending,omitempty"`
	MaxDeliver        *int32        `json:"max_deliver,omitempty"`
	MemStorage        *bool         `json:"mem_storage,omitempty"`
	Name              *string       `json:"name,omitempty"`
	NumReplicas       int32         `json:"num_replicas"`
	OptStartSeq       *int32        `json:"opt_start_seq,omitempty"`
	OptStartTime      *time.Time    `json:"opt_start_time,omitempty"`
	ReplayPolicy      ReplayPolicy  `json:"replay_policy"`
	SampleFreq        *string       `json:"sample_freq,omitempty"`
}

func (o JSCommonConsumerConfigRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ack_policy"] = o.AckPolicy
	if o.AckWait != nil {
		toSerialize["ack_wait"] = o.AckWait
	}
	if len(o.Backoff) != 0 {
		toSerialize["backoff"] = o.Backoff
	}
	toSerialize["deliver_policy"] = o.DeliverPolicy
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Direct != nil {
		toSerialize["direct"] = o.Direct
	}
	if o.DurableName != nil {
		toSerialize["durable_name"] = o.DurableName
	}
	if o.FilterSubject != nil {
		toSerialize["filter_subject"] = o.FilterSubject
	}
	if o.InactiveThreshold != nil {
		toSerialize["inactive_threshold"] = o.InactiveThreshold
	}
	if o.MaxAckPending != nil {
		toSerialize["max_ack_pending"] = o.MaxAckPending
	}
	if o.MaxDeliver != nil {
		toSerialize["max_deliver"] = o.MaxDeliver
	}
	if o.MemStorage != nil {
		toSerialize["mem_storage"] = o.MemStorage
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	toSerialize["num_replicas"] = o.NumReplicas
	if o.OptStartSeq != nil {
		toSerialize["opt_start_seq"] = o.OptStartSeq
	}
	if o.OptStartTime != nil {
		toSerialize["opt_start_time"] = o.OptStartTime
	}
	toSerialize["replay_policy"] = o.ReplayPolicy
	if o.SampleFreq != nil {
		toSerialize["sample_freq"] = o.SampleFreq
	}
	return toSerialize, nil
}
