/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

// checks if the ExportPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportPatch{}

// ExportPatch struct for ExportPatch
type ExportPatch struct {
	AccountTokenPosition *Nullable[int32]               `json:"account_token_position,omitempty"`
	Advertise            *bool                          `json:"advertise,omitempty"`
	Description          *Nullable[string]              `json:"description,omitempty"`
	InfoUrl              *Nullable[string]              `json:"info_url,omitempty"`
	Name                 *string                        `json:"name,omitempty"`
	ResponseThreshold    *Nullable[int32]               `json:"response_threshold,omitempty"`
	ResponseType         *ResponseType                  `json:"response_type,omitempty"`
	Revocations          map[string]int32               `json:"revocations,omitempty"`
	ServiceLatency       *Nullable[ServiceLatencyPatch] `json:"service_latency,omitempty"`
	Subject              *string                        `json:"subject,omitempty"`
	TokenReq             *bool                          `json:"token_req,omitempty"`
	Type                 *ExportType                    `json:"type,omitempty"`
}

func (o ExportPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountTokenPosition != nil && !o.AccountTokenPosition.IsNull() {
		toSerialize["account_token_position"] = o.AccountTokenPosition.Val
	}
	if o.Advertise != nil {
		toSerialize["advertise"] = o.Advertise
	}
	if o.Description != nil && !o.Description.IsNull() {
		toSerialize["description"] = o.Description.Val
	}
	if o.InfoUrl != nil && !o.InfoUrl.IsNull() {
		toSerialize["info_url"] = o.InfoUrl.Val
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.ResponseThreshold != nil && !o.ResponseThreshold.IsNull() {
		toSerialize["response_threshold"] = o.ResponseThreshold.Val
	}
	if o.ResponseType != nil {
		toSerialize["response_type"] = o.ResponseType
	}
	if o.Revocations != nil {
		toSerialize["revocations"] = o.Revocations
	}
	if o.ServiceLatency != nil && !o.ServiceLatency.IsNull() {
		toSerialize["service_latency"] = o.ServiceLatency.Val
	}
	if o.Subject != nil {
		toSerialize["subject"] = o.Subject
	}
	if o.TokenReq != nil {
		toSerialize["token_req"] = o.TokenReq
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}
