/*
Synadia Control Plane

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
)

// checks if the NatsUserClaimsRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NatsUserClaimsRequest{}

// NatsUserClaimsRequest filter jwt.User to editable fields only
type NatsUserClaimsRequest struct {
	// TagList is a unique array of lower case strings All tag list methods lower case the strings in the arguments
	Tags          []string                `json:"tags,omitempty"`
	Pub           *Permission             `json:"pub,omitempty"`
	Resp          NullablePermissionsResp `json:"resp,omitempty"`
	Sub           *Permission             `json:"sub,omitempty"`
	Src           []string                `json:"src,omitempty"`
	Times         []TimeRange             `json:"times,omitempty"`
	TimesLocation *string                 `json:"times_location,omitempty"`
	Data          *int64                  `json:"data,omitempty"`
	Payload       *int64                  `json:"payload,omitempty"`
	Subs          *int64                  `json:"subs,omitempty"`
}

// NewNatsUserClaimsRequest instantiates a new NatsUserClaimsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNatsUserClaimsRequest() *NatsUserClaimsRequest {
	this := NatsUserClaimsRequest{}
	return &this
}

// NewNatsUserClaimsRequestWithDefaults instantiates a new NatsUserClaimsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNatsUserClaimsRequestWithDefaults() *NatsUserClaimsRequest {
	this := NatsUserClaimsRequest{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NatsUserClaimsRequest) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NatsUserClaimsRequest) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *NatsUserClaimsRequest) HasTags() bool {
	if o != nil && IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *NatsUserClaimsRequest) SetTags(v []string) {
	o.Tags = v
}

// GetPub returns the Pub field value if set, zero value otherwise.
func (o *NatsUserClaimsRequest) GetPub() Permission {
	if o == nil || IsNil(o.Pub) {
		var ret Permission
		return ret
	}
	return *o.Pub
}

// GetPubOk returns a tuple with the Pub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatsUserClaimsRequest) GetPubOk() (*Permission, bool) {
	if o == nil || IsNil(o.Pub) {
		return nil, false
	}
	return o.Pub, true
}

// HasPub returns a boolean if a field has been set.
func (o *NatsUserClaimsRequest) HasPub() bool {
	if o != nil && !IsNil(o.Pub) {
		return true
	}

	return false
}

// SetPub gets a reference to the given Permission and assigns it to the Pub field.
func (o *NatsUserClaimsRequest) SetPub(v Permission) {
	o.Pub = &v
}

// GetResp returns the Resp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NatsUserClaimsRequest) GetResp() PermissionsResp {
	if o == nil || IsNil(o.Resp.Get()) {
		var ret PermissionsResp
		return ret
	}
	return *o.Resp.Get()
}

// GetRespOk returns a tuple with the Resp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NatsUserClaimsRequest) GetRespOk() (*PermissionsResp, bool) {
	if o == nil {
		return nil, false
	}
	return o.Resp.Get(), o.Resp.IsSet()
}

// HasResp returns a boolean if a field has been set.
func (o *NatsUserClaimsRequest) HasResp() bool {
	if o != nil && o.Resp.IsSet() {
		return true
	}

	return false
}

// SetResp gets a reference to the given NullablePermissionsResp and assigns it to the Resp field.
func (o *NatsUserClaimsRequest) SetResp(v PermissionsResp) {
	o.Resp.Set(&v)
}

// SetRespNil sets the value for Resp to be an explicit nil
func (o *NatsUserClaimsRequest) SetRespNil() {
	o.Resp.Set(nil)
}

// UnsetResp ensures that no value is present for Resp, not even an explicit nil
func (o *NatsUserClaimsRequest) UnsetResp() {
	o.Resp.Unset()
}

// GetSub returns the Sub field value if set, zero value otherwise.
func (o *NatsUserClaimsRequest) GetSub() Permission {
	if o == nil || IsNil(o.Sub) {
		var ret Permission
		return ret
	}
	return *o.Sub
}

// GetSubOk returns a tuple with the Sub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatsUserClaimsRequest) GetSubOk() (*Permission, bool) {
	if o == nil || IsNil(o.Sub) {
		return nil, false
	}
	return o.Sub, true
}

// HasSub returns a boolean if a field has been set.
func (o *NatsUserClaimsRequest) HasSub() bool {
	if o != nil && !IsNil(o.Sub) {
		return true
	}

	return false
}

// SetSub gets a reference to the given Permission and assigns it to the Sub field.
func (o *NatsUserClaimsRequest) SetSub(v Permission) {
	o.Sub = &v
}

// GetSrc returns the Src field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NatsUserClaimsRequest) GetSrc() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Src
}

// GetSrcOk returns a tuple with the Src field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NatsUserClaimsRequest) GetSrcOk() ([]string, bool) {
	if o == nil || IsNil(o.Src) {
		return nil, false
	}
	return o.Src, true
}

// HasSrc returns a boolean if a field has been set.
func (o *NatsUserClaimsRequest) HasSrc() bool {
	if o != nil && IsNil(o.Src) {
		return true
	}

	return false
}

// SetSrc gets a reference to the given []string and assigns it to the Src field.
func (o *NatsUserClaimsRequest) SetSrc(v []string) {
	o.Src = v
}

// GetTimes returns the Times field value if set, zero value otherwise.
func (o *NatsUserClaimsRequest) GetTimes() []TimeRange {
	if o == nil || IsNil(o.Times) {
		var ret []TimeRange
		return ret
	}
	return o.Times
}

// GetTimesOk returns a tuple with the Times field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatsUserClaimsRequest) GetTimesOk() ([]TimeRange, bool) {
	if o == nil || IsNil(o.Times) {
		return nil, false
	}
	return o.Times, true
}

// HasTimes returns a boolean if a field has been set.
func (o *NatsUserClaimsRequest) HasTimes() bool {
	if o != nil && !IsNil(o.Times) {
		return true
	}

	return false
}

// SetTimes gets a reference to the given []TimeRange and assigns it to the Times field.
func (o *NatsUserClaimsRequest) SetTimes(v []TimeRange) {
	o.Times = v
}

// GetTimesLocation returns the TimesLocation field value if set, zero value otherwise.
func (o *NatsUserClaimsRequest) GetTimesLocation() string {
	if o == nil || IsNil(o.TimesLocation) {
		var ret string
		return ret
	}
	return *o.TimesLocation
}

// GetTimesLocationOk returns a tuple with the TimesLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatsUserClaimsRequest) GetTimesLocationOk() (*string, bool) {
	if o == nil || IsNil(o.TimesLocation) {
		return nil, false
	}
	return o.TimesLocation, true
}

// HasTimesLocation returns a boolean if a field has been set.
func (o *NatsUserClaimsRequest) HasTimesLocation() bool {
	if o != nil && !IsNil(o.TimesLocation) {
		return true
	}

	return false
}

// SetTimesLocation gets a reference to the given string and assigns it to the TimesLocation field.
func (o *NatsUserClaimsRequest) SetTimesLocation(v string) {
	o.TimesLocation = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *NatsUserClaimsRequest) GetData() int64 {
	if o == nil || IsNil(o.Data) {
		var ret int64
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatsUserClaimsRequest) GetDataOk() (*int64, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *NatsUserClaimsRequest) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given int64 and assigns it to the Data field.
func (o *NatsUserClaimsRequest) SetData(v int64) {
	o.Data = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *NatsUserClaimsRequest) GetPayload() int64 {
	if o == nil || IsNil(o.Payload) {
		var ret int64
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatsUserClaimsRequest) GetPayloadOk() (*int64, bool) {
	if o == nil || IsNil(o.Payload) {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *NatsUserClaimsRequest) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given int64 and assigns it to the Payload field.
func (o *NatsUserClaimsRequest) SetPayload(v int64) {
	o.Payload = &v
}

// GetSubs returns the Subs field value if set, zero value otherwise.
func (o *NatsUserClaimsRequest) GetSubs() int64 {
	if o == nil || IsNil(o.Subs) {
		var ret int64
		return ret
	}
	return *o.Subs
}

// GetSubsOk returns a tuple with the Subs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatsUserClaimsRequest) GetSubsOk() (*int64, bool) {
	if o == nil || IsNil(o.Subs) {
		return nil, false
	}
	return o.Subs, true
}

// HasSubs returns a boolean if a field has been set.
func (o *NatsUserClaimsRequest) HasSubs() bool {
	if o != nil && !IsNil(o.Subs) {
		return true
	}

	return false
}

// SetSubs gets a reference to the given int64 and assigns it to the Subs field.
func (o *NatsUserClaimsRequest) SetSubs(v int64) {
	o.Subs = &v
}

func (o NatsUserClaimsRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NatsUserClaimsRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Pub) {
		toSerialize["pub"] = o.Pub
	}
	if o.Resp.IsSet() {
		toSerialize["resp"] = o.Resp.Get()
	}
	if !IsNil(o.Sub) {
		toSerialize["sub"] = o.Sub
	}
	if o.Src != nil {
		toSerialize["src"] = o.Src
	}
	if !IsNil(o.Times) {
		toSerialize["times"] = o.Times
	}
	if !IsNil(o.TimesLocation) {
		toSerialize["times_location"] = o.TimesLocation
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	if !IsNil(o.Subs) {
		toSerialize["subs"] = o.Subs
	}
	return toSerialize, nil
}

type NullableNatsUserClaimsRequest struct {
	value *NatsUserClaimsRequest
	isSet bool
}

func (v NullableNatsUserClaimsRequest) Get() *NatsUserClaimsRequest {
	return v.value
}

func (v *NullableNatsUserClaimsRequest) Set(val *NatsUserClaimsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNatsUserClaimsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNatsUserClaimsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNatsUserClaimsRequest(val *NatsUserClaimsRequest) *NullableNatsUserClaimsRequest {
	return &NullableNatsUserClaimsRequest{value: val, isSet: true}
}

func (v NullableNatsUserClaimsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNatsUserClaimsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
