/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User struct for User
type User struct {
	// TagList is a unique array of lower case strings All tag list methods lower case the strings in the arguments
	Tags []string `json:"tags,omitempty"`
	// ClaimType is used to indicate the type of JWT being stored in a Claim
	Type          *string                 `json:"type,omitempty"`
	Version       *int32                  `json:"version,omitempty"`
	Pub           *Permission             `json:"pub,omitempty"`
	Resp          NullablePermissionsResp `json:"resp,omitempty"`
	Sub           *Permission             `json:"sub,omitempty"`
	Src           []string                `json:"src,omitempty"`
	Times         []TimeRange             `json:"times,omitempty"`
	TimesLocation *string                 `json:"times_location,omitempty"`
	Data          *int64                  `json:"data,omitempty"`
	Payload       *int64                  `json:"payload,omitempty"`
	Subs          *int64                  `json:"subs,omitempty"`
	// StringList is a wrapper for an array of strings
	AllowedConnectionTypes []string `json:"allowed_connection_types,omitempty"`
	BearerToken            *bool    `json:"bearer_token,omitempty"`
	// IssuerAccount stores the public key for the account the issuer represents. When set, the claim was issued by a signing key.
	IssuerAccount *string `json:"issuer_account,omitempty"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser() *User {
	this := User{}
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *User) HasTags() bool {
	if o != nil && IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *User) SetTags(v []string) {
	o.Tags = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *User) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *User) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *User) SetType(v string) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *User) GetVersion() int32 {
	if o == nil || IsNil(o.Version) {
		var ret int32
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *User) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int32 and assigns it to the Version field.
func (o *User) SetVersion(v int32) {
	o.Version = &v
}

// GetPub returns the Pub field value if set, zero value otherwise.
func (o *User) GetPub() Permission {
	if o == nil || IsNil(o.Pub) {
		var ret Permission
		return ret
	}
	return *o.Pub
}

// GetPubOk returns a tuple with the Pub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPubOk() (*Permission, bool) {
	if o == nil || IsNil(o.Pub) {
		return nil, false
	}
	return o.Pub, true
}

// HasPub returns a boolean if a field has been set.
func (o *User) HasPub() bool {
	if o != nil && !IsNil(o.Pub) {
		return true
	}

	return false
}

// SetPub gets a reference to the given Permission and assigns it to the Pub field.
func (o *User) SetPub(v Permission) {
	o.Pub = &v
}

// GetResp returns the Resp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetResp() PermissionsResp {
	if o == nil || IsNil(o.Resp.Get()) {
		var ret PermissionsResp
		return ret
	}
	return *o.Resp.Get()
}

// GetRespOk returns a tuple with the Resp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetRespOk() (*PermissionsResp, bool) {
	if o == nil {
		return nil, false
	}
	return o.Resp.Get(), o.Resp.IsSet()
}

// HasResp returns a boolean if a field has been set.
func (o *User) HasResp() bool {
	if o != nil && o.Resp.IsSet() {
		return true
	}

	return false
}

// SetResp gets a reference to the given NullablePermissionsResp and assigns it to the Resp field.
func (o *User) SetResp(v PermissionsResp) {
	o.Resp.Set(&v)
}

// SetRespNil sets the value for Resp to be an explicit nil
func (o *User) SetRespNil() {
	o.Resp.Set(nil)
}

// UnsetResp ensures that no value is present for Resp, not even an explicit nil
func (o *User) UnsetResp() {
	o.Resp.Unset()
}

// GetSub returns the Sub field value if set, zero value otherwise.
func (o *User) GetSub() Permission {
	if o == nil || IsNil(o.Sub) {
		var ret Permission
		return ret
	}
	return *o.Sub
}

// GetSubOk returns a tuple with the Sub field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetSubOk() (*Permission, bool) {
	if o == nil || IsNil(o.Sub) {
		return nil, false
	}
	return o.Sub, true
}

// HasSub returns a boolean if a field has been set.
func (o *User) HasSub() bool {
	if o != nil && !IsNil(o.Sub) {
		return true
	}

	return false
}

// SetSub gets a reference to the given Permission and assigns it to the Sub field.
func (o *User) SetSub(v Permission) {
	o.Sub = &v
}

// GetSrc returns the Src field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetSrc() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Src
}

// GetSrcOk returns a tuple with the Src field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetSrcOk() ([]string, bool) {
	if o == nil || IsNil(o.Src) {
		return nil, false
	}
	return o.Src, true
}

// HasSrc returns a boolean if a field has been set.
func (o *User) HasSrc() bool {
	if o != nil && IsNil(o.Src) {
		return true
	}

	return false
}

// SetSrc gets a reference to the given []string and assigns it to the Src field.
func (o *User) SetSrc(v []string) {
	o.Src = v
}

// GetTimes returns the Times field value if set, zero value otherwise.
func (o *User) GetTimes() []TimeRange {
	if o == nil || IsNil(o.Times) {
		var ret []TimeRange
		return ret
	}
	return o.Times
}

// GetTimesOk returns a tuple with the Times field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetTimesOk() ([]TimeRange, bool) {
	if o == nil || IsNil(o.Times) {
		return nil, false
	}
	return o.Times, true
}

// HasTimes returns a boolean if a field has been set.
func (o *User) HasTimes() bool {
	if o != nil && !IsNil(o.Times) {
		return true
	}

	return false
}

// SetTimes gets a reference to the given []TimeRange and assigns it to the Times field.
func (o *User) SetTimes(v []TimeRange) {
	o.Times = v
}

// GetTimesLocation returns the TimesLocation field value if set, zero value otherwise.
func (o *User) GetTimesLocation() string {
	if o == nil || IsNil(o.TimesLocation) {
		var ret string
		return ret
	}
	return *o.TimesLocation
}

// GetTimesLocationOk returns a tuple with the TimesLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetTimesLocationOk() (*string, bool) {
	if o == nil || IsNil(o.TimesLocation) {
		return nil, false
	}
	return o.TimesLocation, true
}

// HasTimesLocation returns a boolean if a field has been set.
func (o *User) HasTimesLocation() bool {
	if o != nil && !IsNil(o.TimesLocation) {
		return true
	}

	return false
}

// SetTimesLocation gets a reference to the given string and assigns it to the TimesLocation field.
func (o *User) SetTimesLocation(v string) {
	o.TimesLocation = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *User) GetData() int64 {
	if o == nil || IsNil(o.Data) {
		var ret int64
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetDataOk() (*int64, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *User) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given int64 and assigns it to the Data field.
func (o *User) SetData(v int64) {
	o.Data = &v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *User) GetPayload() int64 {
	if o == nil || IsNil(o.Payload) {
		var ret int64
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPayloadOk() (*int64, bool) {
	if o == nil || IsNil(o.Payload) {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *User) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given int64 and assigns it to the Payload field.
func (o *User) SetPayload(v int64) {
	o.Payload = &v
}

// GetSubs returns the Subs field value if set, zero value otherwise.
func (o *User) GetSubs() int64 {
	if o == nil || IsNil(o.Subs) {
		var ret int64
		return ret
	}
	return *o.Subs
}

// GetSubsOk returns a tuple with the Subs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetSubsOk() (*int64, bool) {
	if o == nil || IsNil(o.Subs) {
		return nil, false
	}
	return o.Subs, true
}

// HasSubs returns a boolean if a field has been set.
func (o *User) HasSubs() bool {
	if o != nil && !IsNil(o.Subs) {
		return true
	}

	return false
}

// SetSubs gets a reference to the given int64 and assigns it to the Subs field.
func (o *User) SetSubs(v int64) {
	o.Subs = &v
}

// GetAllowedConnectionTypes returns the AllowedConnectionTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *User) GetAllowedConnectionTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AllowedConnectionTypes
}

// GetAllowedConnectionTypesOk returns a tuple with the AllowedConnectionTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *User) GetAllowedConnectionTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedConnectionTypes) {
		return nil, false
	}
	return o.AllowedConnectionTypes, true
}

// HasAllowedConnectionTypes returns a boolean if a field has been set.
func (o *User) HasAllowedConnectionTypes() bool {
	if o != nil && IsNil(o.AllowedConnectionTypes) {
		return true
	}

	return false
}

// SetAllowedConnectionTypes gets a reference to the given []string and assigns it to the AllowedConnectionTypes field.
func (o *User) SetAllowedConnectionTypes(v []string) {
	o.AllowedConnectionTypes = v
}

// GetBearerToken returns the BearerToken field value if set, zero value otherwise.
func (o *User) GetBearerToken() bool {
	if o == nil || IsNil(o.BearerToken) {
		var ret bool
		return ret
	}
	return *o.BearerToken
}

// GetBearerTokenOk returns a tuple with the BearerToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetBearerTokenOk() (*bool, bool) {
	if o == nil || IsNil(o.BearerToken) {
		return nil, false
	}
	return o.BearerToken, true
}

// HasBearerToken returns a boolean if a field has been set.
func (o *User) HasBearerToken() bool {
	if o != nil && !IsNil(o.BearerToken) {
		return true
	}

	return false
}

// SetBearerToken gets a reference to the given bool and assigns it to the BearerToken field.
func (o *User) SetBearerToken(v bool) {
	o.BearerToken = &v
}

// GetIssuerAccount returns the IssuerAccount field value if set, zero value otherwise.
func (o *User) GetIssuerAccount() string {
	if o == nil || IsNil(o.IssuerAccount) {
		var ret string
		return ret
	}
	return *o.IssuerAccount
}

// GetIssuerAccountOk returns a tuple with the IssuerAccount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetIssuerAccountOk() (*string, bool) {
	if o == nil || IsNil(o.IssuerAccount) {
		return nil, false
	}
	return o.IssuerAccount, true
}

// HasIssuerAccount returns a boolean if a field has been set.
func (o *User) HasIssuerAccount() bool {
	if o != nil && !IsNil(o.IssuerAccount) {
		return true
	}

	return false
}

// SetIssuerAccount gets a reference to the given string and assigns it to the IssuerAccount field.
func (o *User) SetIssuerAccount(v string) {
	o.IssuerAccount = &v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.Pub) {
		toSerialize["pub"] = o.Pub
	}
	if o.Resp.IsSet() {
		toSerialize["resp"] = o.Resp.Get()
	}
	if !IsNil(o.Sub) {
		toSerialize["sub"] = o.Sub
	}
	if o.Src != nil {
		toSerialize["src"] = o.Src
	}
	if !IsNil(o.Times) {
		toSerialize["times"] = o.Times
	}
	if !IsNil(o.TimesLocation) {
		toSerialize["times_location"] = o.TimesLocation
	}
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	if !IsNil(o.Subs) {
		toSerialize["subs"] = o.Subs
	}
	if o.AllowedConnectionTypes != nil {
		toSerialize["allowed_connection_types"] = o.AllowedConnectionTypes
	}
	if !IsNil(o.BearerToken) {
		toSerialize["bearer_token"] = o.BearerToken
	}
	if !IsNil(o.IssuerAccount) {
		toSerialize["issuer_account"] = o.IssuerAccount
	}
	return toSerialize, nil
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
