/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// ReplayPolicy the model 'ReplayPolicy'
type ReplayPolicy string

// List of ReplayPolicy
const (
	REPLAYPOLICY_INSTANT  ReplayPolicy = "instant"
	REPLAYPOLICY_ORIGINAL ReplayPolicy = "original"
)

// All allowed values of ReplayPolicy enum
var AllowedReplayPolicyEnumValues = []ReplayPolicy{
	"instant",
	"original",
}

func (v *ReplayPolicy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReplayPolicy(value)
	for _, existing := range AllowedReplayPolicyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReplayPolicy", value)
}

// NewReplayPolicyFromValue returns a pointer to a valid ReplayPolicy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReplayPolicyFromValue(v string) (*ReplayPolicy, error) {
	ev := ReplayPolicy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReplayPolicy: valid values are %v", v, AllowedReplayPolicyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReplayPolicy) IsValid() bool {
	for _, existing := range AllowedReplayPolicyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReplayPolicy value
func (v ReplayPolicy) Ptr() *ReplayPolicy {
	return &v
}
