/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"fmt"
)

// checks if the JSPlacementOptionsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSPlacementOptionsResponse{}

// JSPlacementOptionsResponse struct for JSPlacementOptionsResponse
type JSPlacementOptionsResponse struct {
	Clusters []string `json:"clusters"`
	Replicas []int32  `json:"replicas"`
	Tags     []string `json:"tags"`
}

type _JSPlacementOptionsResponse JSPlacementOptionsResponse

// NewJSPlacementOptionsResponse instantiates a new JSPlacementOptionsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSPlacementOptionsResponse(clusters []string, replicas []int32, tags []string) *JSPlacementOptionsResponse {
	this := JSPlacementOptionsResponse{}
	this.Clusters = clusters
	this.Replicas = replicas
	this.Tags = tags
	return &this
}

// NewJSPlacementOptionsResponseWithDefaults instantiates a new JSPlacementOptionsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSPlacementOptionsResponseWithDefaults() *JSPlacementOptionsResponse {
	this := JSPlacementOptionsResponse{}
	return &this
}

// GetClusters returns the Clusters field value
func (o *JSPlacementOptionsResponse) GetClusters() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Clusters
}

// GetClustersOk returns a tuple with the Clusters field value
// and a boolean to check if the value has been set.
func (o *JSPlacementOptionsResponse) GetClustersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Clusters, true
}

// SetClusters sets field value
func (o *JSPlacementOptionsResponse) SetClusters(v []string) {
	o.Clusters = v
}

// GetReplicas returns the Replicas field value
func (o *JSPlacementOptionsResponse) GetReplicas() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value
// and a boolean to check if the value has been set.
func (o *JSPlacementOptionsResponse) GetReplicasOk() ([]int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Replicas, true
}

// SetReplicas sets field value
func (o *JSPlacementOptionsResponse) SetReplicas(v []int32) {
	o.Replicas = v
}

// GetTags returns the Tags field value
func (o *JSPlacementOptionsResponse) GetTags() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value
// and a boolean to check if the value has been set.
func (o *JSPlacementOptionsResponse) GetTagsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tags, true
}

// SetTags sets field value
func (o *JSPlacementOptionsResponse) SetTags(v []string) {
	o.Tags = v
}

func (o JSPlacementOptionsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSPlacementOptionsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["clusters"] = o.Clusters
	toSerialize["replicas"] = o.Replicas
	toSerialize["tags"] = o.Tags
	return toSerialize, nil
}

func (o *JSPlacementOptionsResponse) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"clusters",
		"replicas",
		"tags",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJSPlacementOptionsResponse := _JSPlacementOptionsResponse{}

	err = json.Unmarshal(bytes, &varJSPlacementOptionsResponse)

	if err != nil {
		return err
	}

	*o = JSPlacementOptionsResponse(varJSPlacementOptionsResponse)

	return err
}

type NullableJSPlacementOptionsResponse struct {
	value *JSPlacementOptionsResponse
	isSet bool
}

func (v NullableJSPlacementOptionsResponse) Get() *JSPlacementOptionsResponse {
	return v.value
}

func (v *NullableJSPlacementOptionsResponse) Set(val *JSPlacementOptionsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableJSPlacementOptionsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableJSPlacementOptionsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSPlacementOptionsResponse(val *JSPlacementOptionsResponse) *NullableJSPlacementOptionsResponse {
	return &NullableJSPlacementOptionsResponse{value: val, isSet: true}
}

func (v NullableJSPlacementOptionsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSPlacementOptionsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
