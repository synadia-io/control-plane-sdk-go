/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

// checks if the Account type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Account{}

// Account Account holds account specific claims data
type Account struct {
	Info
	GenericFields
	Authorization      *ExternalAuthorization `json:"authorization,omitempty"`
	DefaultPermissions *Permissions           `json:"default_permissions,omitempty"`
	// Exports is a slice of exports
	Exports []Export `json:"exports,omitempty"`
	// Imports is a list of import structs
	Imports  []Import                     `json:"imports,omitempty"`
	Limits   *OperatorLimits              `json:"limits,omitempty"`
	Mappings map[string][]WeightedMapping `json:"mappings,omitempty"`
	// RevocationList is used to store a mapping of public keys to unix timestamps
	Revocations map[string]int64 `json:"revocations,omitempty"`
	SigningKeys *SigningKeys     `json:"signing_keys,omitempty"`
}

func (o Account) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Authorization != nil {
		toSerialize["authorization"] = o.Authorization
	}
	if o.DefaultPermissions != nil {
		toSerialize["default_permissions"] = o.DefaultPermissions
	}
	if len(o.Exports) != 0 {
		toSerialize["exports"] = o.Exports
	}
	if len(o.Imports) != 0 {
		toSerialize["imports"] = o.Imports
	}
	if o.Limits != nil {
		toSerialize["limits"] = o.Limits
	}
	if len(o.Mappings) != 0 {
		toSerialize["mappings"] = o.Mappings
	}
	if len(o.Revocations) != 0 {
		toSerialize["revocations"] = o.Revocations
	}
	if o.SigningKeys != nil {
		toSerialize["signing_keys"] = o.SigningKeys
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.InfoUrl != nil {
		toSerialize["info_url"] = o.InfoUrl
	}
	if len(o.Tags) != 0 {
		toSerialize["tags"] = o.Tags
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}
