/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"fmt"
)

// checks if the InviteListResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InviteListResponse{}

// InviteListResponse struct for InviteListResponse
type InviteListResponse struct {
	Items []TeamInfo `json:"items"`
}

type _InviteListResponse InviteListResponse

// NewInviteListResponse instantiates a new InviteListResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInviteListResponse(items []TeamInfo) *InviteListResponse {
	this := InviteListResponse{}
	this.Items = items
	return &this
}

// NewInviteListResponseWithDefaults instantiates a new InviteListResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInviteListResponseWithDefaults() *InviteListResponse {
	this := InviteListResponse{}
	return &this
}

// GetItems returns the Items field value
func (o *InviteListResponse) GetItems() []TeamInfo {
	if o == nil {
		var ret []TeamInfo
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *InviteListResponse) GetItemsOk() ([]TeamInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *InviteListResponse) SetItems(v []TeamInfo) {
	o.Items = v
}

func (o InviteListResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InviteListResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["items"] = o.Items
	return toSerialize, nil
}

func (o *InviteListResponse) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"items",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInviteListResponse := _InviteListResponse{}

	err = json.Unmarshal(bytes, &varInviteListResponse)

	if err != nil {
		return err
	}

	*o = InviteListResponse(varInviteListResponse)

	return err
}

type NullableInviteListResponse struct {
	value *InviteListResponse
	isSet bool
}

func (v NullableInviteListResponse) Get() *InviteListResponse {
	return v.value
}

func (v *NullableInviteListResponse) Set(val *InviteListResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInviteListResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInviteListResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInviteListResponse(val *InviteListResponse) *NullableInviteListResponse {
	return &NullableInviteListResponse{value: val, isSet: true}
}

func (v NullableInviteListResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInviteListResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
