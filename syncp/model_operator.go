/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

// checks if the Operator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Operator{}

// Operator Operator specific claims
type Operator struct {
	GenericFields
	// AccountServerURL is a partial URL like \"https://host.domain.org:<port>/jwt/v1\" tools will use the prefix and build queries by appending /accounts/<account_id> or /operator to the path provided. Note this assumes that the account server can handle requests in a account-server compatible way. See https://github.com/nats-io/account-server.
	AccountServerUrl *string `json:"account_server_url,omitempty"`
	// Min Server version
	AssertServerVersion *string `json:"assert_server_version,omitempty"`
	// A list of NATS urls (tls://host:port) where tools can connect to the server using proper credentials.
	OperatorServiceUrls []string `json:"operator_service_urls,omitempty"`
	// Slice of other operator NKeys that can be used to sign on behalf of the main operator identity.
	SigningKeys []string `json:"signing_keys,omitempty"`
	// Signing of subordinate objects will require signing keys
	StrictSigningKeyUsage *bool `json:"strict_signing_key_usage,omitempty"`
	// Identity of the system account
	SystemAccount *string `json:"system_account,omitempty"`
}

func (o Operator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountServerUrl != nil {
		toSerialize["account_server_url"] = o.AccountServerUrl
	}
	if o.AssertServerVersion != nil {
		toSerialize["assert_server_version"] = o.AssertServerVersion
	}
	if len(o.OperatorServiceUrls) != 0 {
		toSerialize["operator_service_urls"] = o.OperatorServiceUrls
	}
	if len(o.SigningKeys) != 0 {
		toSerialize["signing_keys"] = o.SigningKeys
	}
	if o.StrictSigningKeyUsage != nil {
		toSerialize["strict_signing_key_usage"] = o.StrictSigningKeyUsage
	}
	if o.SystemAccount != nil {
		toSerialize["system_account"] = o.SystemAccount
	}
	if len(o.Tags) != 0 {
		toSerialize["tags"] = o.Tags
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}
