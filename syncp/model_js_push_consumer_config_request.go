/*
Synadia Control Plane

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
)

// checks if the JSPushConsumerConfigRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSPushConsumerConfigRequest{}

// JSPushConsumerConfigRequest struct for JSPushConsumerConfigRequest
type JSPushConsumerConfigRequest struct {
	DeliverGroup *string `json:"deliver_group,omitempty"`
	// Push based options.
	DeliverSubject    *string        `json:"deliver_subject,omitempty"`
	FlowControl       *bool          `json:"flow_control,omitempty"`
	HeadersOnly       *bool          `json:"headers_only,omitempty"`
	IdleHeartbeat     *int64         `json:"idle_heartbeat,omitempty"`
	RateLimitBps      *int32         `json:"rate_limit_bps,omitempty"`
	AckPolicy         AckPolicy      `json:"ack_policy"`
	AckWait           *int64         `json:"ack_wait,omitempty"`
	Backoff           []int64        `json:"backoff,omitempty"`
	DeliverPolicy     DeliverPolicy  `json:"deliver_policy"`
	Description       *string        `json:"description,omitempty"`
	Direct            *bool          `json:"direct,omitempty"`
	DurableName       *string        `json:"durable_name,omitempty"`
	FilterSubject     *string        `json:"filter_subject,omitempty"`
	InactiveThreshold *int64         `json:"inactive_threshold,omitempty"`
	MaxAckPending     *int32         `json:"max_ack_pending,omitempty"`
	MaxDeliver        *int32         `json:"max_deliver,omitempty"`
	MemStorage        *bool          `json:"mem_storage,omitempty"`
	Name              *string        `json:"name,omitempty"`
	NumReplicas       int32          `json:"num_replicas"`
	OptStartSeq       *int32         `json:"opt_start_seq,omitempty"`
	OptStartTime      NullableString `json:"opt_start_time,omitempty"`
	ReplayPolicy      ReplayPolicy   `json:"replay_policy"`
	SampleFreq        *string        `json:"sample_freq,omitempty"`
}

// NewJSPushConsumerConfigRequest instantiates a new JSPushConsumerConfigRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSPushConsumerConfigRequest(ackPolicy AckPolicy, deliverPolicy DeliverPolicy, numReplicas int32, replayPolicy ReplayPolicy) *JSPushConsumerConfigRequest {
	this := JSPushConsumerConfigRequest{}
	this.AckPolicy = ackPolicy
	this.DeliverPolicy = deliverPolicy
	this.NumReplicas = numReplicas
	this.ReplayPolicy = replayPolicy
	return &this
}

// NewJSPushConsumerConfigRequestWithDefaults instantiates a new JSPushConsumerConfigRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSPushConsumerConfigRequestWithDefaults() *JSPushConsumerConfigRequest {
	this := JSPushConsumerConfigRequest{}
	return &this
}

// GetDeliverGroup returns the DeliverGroup field value if set, zero value otherwise.
func (o *JSPushConsumerConfigRequest) GetDeliverGroup() string {
	if o == nil || IsNil(o.DeliverGroup) {
		var ret string
		return ret
	}
	return *o.DeliverGroup
}

// GetDeliverGroupOk returns a tuple with the DeliverGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSPushConsumerConfigRequest) GetDeliverGroupOk() (*string, bool) {
	if o == nil || IsNil(o.DeliverGroup) {
		return nil, false
	}
	return o.DeliverGroup, true
}

// HasDeliverGroup returns a boolean if a field has been set.
func (o *JSPushConsumerConfigRequest) HasDeliverGroup() bool {
	if o != nil && !IsNil(o.DeliverGroup) {
		return true
	}

	return false
}

// SetDeliverGroup gets a reference to the given string and assigns it to the DeliverGroup field.
func (o *JSPushConsumerConfigRequest) SetDeliverGroup(v string) {
	o.DeliverGroup = &v
}

// GetDeliverSubject returns the DeliverSubject field value if set, zero value otherwise.
func (o *JSPushConsumerConfigRequest) GetDeliverSubject() string {
	if o == nil || IsNil(o.DeliverSubject) {
		var ret string
		return ret
	}
	return *o.DeliverSubject
}

// GetDeliverSubjectOk returns a tuple with the DeliverSubject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSPushConsumerConfigRequest) GetDeliverSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.DeliverSubject) {
		return nil, false
	}
	return o.DeliverSubject, true
}

// HasDeliverSubject returns a boolean if a field has been set.
func (o *JSPushConsumerConfigRequest) HasDeliverSubject() bool {
	if o != nil && !IsNil(o.DeliverSubject) {
		return true
	}

	return false
}

// SetDeliverSubject gets a reference to the given string and assigns it to the DeliverSubject field.
func (o *JSPushConsumerConfigRequest) SetDeliverSubject(v string) {
	o.DeliverSubject = &v
}

// GetFlowControl returns the FlowControl field value if set, zero value otherwise.
func (o *JSPushConsumerConfigRequest) GetFlowControl() bool {
	if o == nil || IsNil(o.FlowControl) {
		var ret bool
		return ret
	}
	return *o.FlowControl
}

// GetFlowControlOk returns a tuple with the FlowControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSPushConsumerConfigRequest) GetFlowControlOk() (*bool, bool) {
	if o == nil || IsNil(o.FlowControl) {
		return nil, false
	}
	return o.FlowControl, true
}

// HasFlowControl returns a boolean if a field has been set.
func (o *JSPushConsumerConfigRequest) HasFlowControl() bool {
	if o != nil && !IsNil(o.FlowControl) {
		return true
	}

	return false
}

// SetFlowControl gets a reference to the given bool and assigns it to the FlowControl field.
func (o *JSPushConsumerConfigRequest) SetFlowControl(v bool) {
	o.FlowControl = &v
}

// GetHeadersOnly returns the HeadersOnly field value if set, zero value otherwise.
func (o *JSPushConsumerConfigRequest) GetHeadersOnly() bool {
	if o == nil || IsNil(o.HeadersOnly) {
		var ret bool
		return ret
	}
	return *o.HeadersOnly
}

// GetHeadersOnlyOk returns a tuple with the HeadersOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSPushConsumerConfigRequest) GetHeadersOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.HeadersOnly) {
		return nil, false
	}
	return o.HeadersOnly, true
}

// HasHeadersOnly returns a boolean if a field has been set.
func (o *JSPushConsumerConfigRequest) HasHeadersOnly() bool {
	if o != nil && !IsNil(o.HeadersOnly) {
		return true
	}

	return false
}

// SetHeadersOnly gets a reference to the given bool and assigns it to the HeadersOnly field.
func (o *JSPushConsumerConfigRequest) SetHeadersOnly(v bool) {
	o.HeadersOnly = &v
}

// GetIdleHeartbeat returns the IdleHeartbeat field value if set, zero value otherwise.
func (o *JSPushConsumerConfigRequest) GetIdleHeartbeat() int64 {
	if o == nil || IsNil(o.IdleHeartbeat) {
		var ret int64
		return ret
	}
	return *o.IdleHeartbeat
}

// GetIdleHeartbeatOk returns a tuple with the IdleHeartbeat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSPushConsumerConfigRequest) GetIdleHeartbeatOk() (*int64, bool) {
	if o == nil || IsNil(o.IdleHeartbeat) {
		return nil, false
	}
	return o.IdleHeartbeat, true
}

// HasIdleHeartbeat returns a boolean if a field has been set.
func (o *JSPushConsumerConfigRequest) HasIdleHeartbeat() bool {
	if o != nil && !IsNil(o.IdleHeartbeat) {
		return true
	}

	return false
}

// SetIdleHeartbeat gets a reference to the given int64 and assigns it to the IdleHeartbeat field.
func (o *JSPushConsumerConfigRequest) SetIdleHeartbeat(v int64) {
	o.IdleHeartbeat = &v
}

// GetRateLimitBps returns the RateLimitBps field value if set, zero value otherwise.
func (o *JSPushConsumerConfigRequest) GetRateLimitBps() int32 {
	if o == nil || IsNil(o.RateLimitBps) {
		var ret int32
		return ret
	}
	return *o.RateLimitBps
}

// GetRateLimitBpsOk returns a tuple with the RateLimitBps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSPushConsumerConfigRequest) GetRateLimitBpsOk() (*int32, bool) {
	if o == nil || IsNil(o.RateLimitBps) {
		return nil, false
	}
	return o.RateLimitBps, true
}

// HasRateLimitBps returns a boolean if a field has been set.
func (o *JSPushConsumerConfigRequest) HasRateLimitBps() bool {
	if o != nil && !IsNil(o.RateLimitBps) {
		return true
	}

	return false
}

// SetRateLimitBps gets a reference to the given int32 and assigns it to the RateLimitBps field.
func (o *JSPushConsumerConfigRequest) SetRateLimitBps(v int32) {
	o.RateLimitBps = &v
}

// GetAckPolicy returns the AckPolicy field value
func (o *JSPushConsumerConfigRequest) GetAckPolicy() AckPolicy {
	if o == nil {
		var ret AckPolicy
		return ret
	}

	return o.AckPolicy
}

// GetAckPolicyOk returns a tuple with the AckPolicy field value
// and a boolean to check if the value has been set.
func (o *JSPushConsumerConfigRequest) GetAckPolicyOk() (*AckPolicy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AckPolicy, true
}

// SetAckPolicy sets field value
func (o *JSPushConsumerConfigRequest) SetAckPolicy(v AckPolicy) {
	o.AckPolicy = v
}

// GetAckWait returns the AckWait field value if set, zero value otherwise.
func (o *JSPushConsumerConfigRequest) GetAckWait() int64 {
	if o == nil || IsNil(o.AckWait) {
		var ret int64
		return ret
	}
	return *o.AckWait
}

// GetAckWaitOk returns a tuple with the AckWait field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSPushConsumerConfigRequest) GetAckWaitOk() (*int64, bool) {
	if o == nil || IsNil(o.AckWait) {
		return nil, false
	}
	return o.AckWait, true
}

// HasAckWait returns a boolean if a field has been set.
func (o *JSPushConsumerConfigRequest) HasAckWait() bool {
	if o != nil && !IsNil(o.AckWait) {
		return true
	}

	return false
}

// SetAckWait gets a reference to the given int64 and assigns it to the AckWait field.
func (o *JSPushConsumerConfigRequest) SetAckWait(v int64) {
	o.AckWait = &v
}

// GetBackoff returns the Backoff field value if set, zero value otherwise.
func (o *JSPushConsumerConfigRequest) GetBackoff() []int64 {
	if o == nil || IsNil(o.Backoff) {
		var ret []int64
		return ret
	}
	return o.Backoff
}

// GetBackoffOk returns a tuple with the Backoff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSPushConsumerConfigRequest) GetBackoffOk() ([]int64, bool) {
	if o == nil || IsNil(o.Backoff) {
		return nil, false
	}
	return o.Backoff, true
}

// HasBackoff returns a boolean if a field has been set.
func (o *JSPushConsumerConfigRequest) HasBackoff() bool {
	if o != nil && !IsNil(o.Backoff) {
		return true
	}

	return false
}

// SetBackoff gets a reference to the given []int64 and assigns it to the Backoff field.
func (o *JSPushConsumerConfigRequest) SetBackoff(v []int64) {
	o.Backoff = v
}

// GetDeliverPolicy returns the DeliverPolicy field value
func (o *JSPushConsumerConfigRequest) GetDeliverPolicy() DeliverPolicy {
	if o == nil {
		var ret DeliverPolicy
		return ret
	}

	return o.DeliverPolicy
}

// GetDeliverPolicyOk returns a tuple with the DeliverPolicy field value
// and a boolean to check if the value has been set.
func (o *JSPushConsumerConfigRequest) GetDeliverPolicyOk() (*DeliverPolicy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeliverPolicy, true
}

// SetDeliverPolicy sets field value
func (o *JSPushConsumerConfigRequest) SetDeliverPolicy(v DeliverPolicy) {
	o.DeliverPolicy = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *JSPushConsumerConfigRequest) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSPushConsumerConfigRequest) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *JSPushConsumerConfigRequest) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *JSPushConsumerConfigRequest) SetDescription(v string) {
	o.Description = &v
}

// GetDirect returns the Direct field value if set, zero value otherwise.
func (o *JSPushConsumerConfigRequest) GetDirect() bool {
	if o == nil || IsNil(o.Direct) {
		var ret bool
		return ret
	}
	return *o.Direct
}

// GetDirectOk returns a tuple with the Direct field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSPushConsumerConfigRequest) GetDirectOk() (*bool, bool) {
	if o == nil || IsNil(o.Direct) {
		return nil, false
	}
	return o.Direct, true
}

// HasDirect returns a boolean if a field has been set.
func (o *JSPushConsumerConfigRequest) HasDirect() bool {
	if o != nil && !IsNil(o.Direct) {
		return true
	}

	return false
}

// SetDirect gets a reference to the given bool and assigns it to the Direct field.
func (o *JSPushConsumerConfigRequest) SetDirect(v bool) {
	o.Direct = &v
}

// GetDurableName returns the DurableName field value if set, zero value otherwise.
func (o *JSPushConsumerConfigRequest) GetDurableName() string {
	if o == nil || IsNil(o.DurableName) {
		var ret string
		return ret
	}
	return *o.DurableName
}

// GetDurableNameOk returns a tuple with the DurableName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSPushConsumerConfigRequest) GetDurableNameOk() (*string, bool) {
	if o == nil || IsNil(o.DurableName) {
		return nil, false
	}
	return o.DurableName, true
}

// HasDurableName returns a boolean if a field has been set.
func (o *JSPushConsumerConfigRequest) HasDurableName() bool {
	if o != nil && !IsNil(o.DurableName) {
		return true
	}

	return false
}

// SetDurableName gets a reference to the given string and assigns it to the DurableName field.
func (o *JSPushConsumerConfigRequest) SetDurableName(v string) {
	o.DurableName = &v
}

// GetFilterSubject returns the FilterSubject field value if set, zero value otherwise.
func (o *JSPushConsumerConfigRequest) GetFilterSubject() string {
	if o == nil || IsNil(o.FilterSubject) {
		var ret string
		return ret
	}
	return *o.FilterSubject
}

// GetFilterSubjectOk returns a tuple with the FilterSubject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSPushConsumerConfigRequest) GetFilterSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.FilterSubject) {
		return nil, false
	}
	return o.FilterSubject, true
}

// HasFilterSubject returns a boolean if a field has been set.
func (o *JSPushConsumerConfigRequest) HasFilterSubject() bool {
	if o != nil && !IsNil(o.FilterSubject) {
		return true
	}

	return false
}

// SetFilterSubject gets a reference to the given string and assigns it to the FilterSubject field.
func (o *JSPushConsumerConfigRequest) SetFilterSubject(v string) {
	o.FilterSubject = &v
}

// GetInactiveThreshold returns the InactiveThreshold field value if set, zero value otherwise.
func (o *JSPushConsumerConfigRequest) GetInactiveThreshold() int64 {
	if o == nil || IsNil(o.InactiveThreshold) {
		var ret int64
		return ret
	}
	return *o.InactiveThreshold
}

// GetInactiveThresholdOk returns a tuple with the InactiveThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSPushConsumerConfigRequest) GetInactiveThresholdOk() (*int64, bool) {
	if o == nil || IsNil(o.InactiveThreshold) {
		return nil, false
	}
	return o.InactiveThreshold, true
}

// HasInactiveThreshold returns a boolean if a field has been set.
func (o *JSPushConsumerConfigRequest) HasInactiveThreshold() bool {
	if o != nil && !IsNil(o.InactiveThreshold) {
		return true
	}

	return false
}

// SetInactiveThreshold gets a reference to the given int64 and assigns it to the InactiveThreshold field.
func (o *JSPushConsumerConfigRequest) SetInactiveThreshold(v int64) {
	o.InactiveThreshold = &v
}

// GetMaxAckPending returns the MaxAckPending field value if set, zero value otherwise.
func (o *JSPushConsumerConfigRequest) GetMaxAckPending() int32 {
	if o == nil || IsNil(o.MaxAckPending) {
		var ret int32
		return ret
	}
	return *o.MaxAckPending
}

// GetMaxAckPendingOk returns a tuple with the MaxAckPending field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSPushConsumerConfigRequest) GetMaxAckPendingOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxAckPending) {
		return nil, false
	}
	return o.MaxAckPending, true
}

// HasMaxAckPending returns a boolean if a field has been set.
func (o *JSPushConsumerConfigRequest) HasMaxAckPending() bool {
	if o != nil && !IsNil(o.MaxAckPending) {
		return true
	}

	return false
}

// SetMaxAckPending gets a reference to the given int32 and assigns it to the MaxAckPending field.
func (o *JSPushConsumerConfigRequest) SetMaxAckPending(v int32) {
	o.MaxAckPending = &v
}

// GetMaxDeliver returns the MaxDeliver field value if set, zero value otherwise.
func (o *JSPushConsumerConfigRequest) GetMaxDeliver() int32 {
	if o == nil || IsNil(o.MaxDeliver) {
		var ret int32
		return ret
	}
	return *o.MaxDeliver
}

// GetMaxDeliverOk returns a tuple with the MaxDeliver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSPushConsumerConfigRequest) GetMaxDeliverOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxDeliver) {
		return nil, false
	}
	return o.MaxDeliver, true
}

// HasMaxDeliver returns a boolean if a field has been set.
func (o *JSPushConsumerConfigRequest) HasMaxDeliver() bool {
	if o != nil && !IsNil(o.MaxDeliver) {
		return true
	}

	return false
}

// SetMaxDeliver gets a reference to the given int32 and assigns it to the MaxDeliver field.
func (o *JSPushConsumerConfigRequest) SetMaxDeliver(v int32) {
	o.MaxDeliver = &v
}

// GetMemStorage returns the MemStorage field value if set, zero value otherwise.
func (o *JSPushConsumerConfigRequest) GetMemStorage() bool {
	if o == nil || IsNil(o.MemStorage) {
		var ret bool
		return ret
	}
	return *o.MemStorage
}

// GetMemStorageOk returns a tuple with the MemStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSPushConsumerConfigRequest) GetMemStorageOk() (*bool, bool) {
	if o == nil || IsNil(o.MemStorage) {
		return nil, false
	}
	return o.MemStorage, true
}

// HasMemStorage returns a boolean if a field has been set.
func (o *JSPushConsumerConfigRequest) HasMemStorage() bool {
	if o != nil && !IsNil(o.MemStorage) {
		return true
	}

	return false
}

// SetMemStorage gets a reference to the given bool and assigns it to the MemStorage field.
func (o *JSPushConsumerConfigRequest) SetMemStorage(v bool) {
	o.MemStorage = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *JSPushConsumerConfigRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSPushConsumerConfigRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *JSPushConsumerConfigRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *JSPushConsumerConfigRequest) SetName(v string) {
	o.Name = &v
}

// GetNumReplicas returns the NumReplicas field value
func (o *JSPushConsumerConfigRequest) GetNumReplicas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumReplicas
}

// GetNumReplicasOk returns a tuple with the NumReplicas field value
// and a boolean to check if the value has been set.
func (o *JSPushConsumerConfigRequest) GetNumReplicasOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumReplicas, true
}

// SetNumReplicas sets field value
func (o *JSPushConsumerConfigRequest) SetNumReplicas(v int32) {
	o.NumReplicas = v
}

// GetOptStartSeq returns the OptStartSeq field value if set, zero value otherwise.
func (o *JSPushConsumerConfigRequest) GetOptStartSeq() int32 {
	if o == nil || IsNil(o.OptStartSeq) {
		var ret int32
		return ret
	}
	return *o.OptStartSeq
}

// GetOptStartSeqOk returns a tuple with the OptStartSeq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSPushConsumerConfigRequest) GetOptStartSeqOk() (*int32, bool) {
	if o == nil || IsNil(o.OptStartSeq) {
		return nil, false
	}
	return o.OptStartSeq, true
}

// HasOptStartSeq returns a boolean if a field has been set.
func (o *JSPushConsumerConfigRequest) HasOptStartSeq() bool {
	if o != nil && !IsNil(o.OptStartSeq) {
		return true
	}

	return false
}

// SetOptStartSeq gets a reference to the given int32 and assigns it to the OptStartSeq field.
func (o *JSPushConsumerConfigRequest) SetOptStartSeq(v int32) {
	o.OptStartSeq = &v
}

// GetOptStartTime returns the OptStartTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JSPushConsumerConfigRequest) GetOptStartTime() string {
	if o == nil || IsNil(o.OptStartTime.Get()) {
		var ret string
		return ret
	}
	return *o.OptStartTime.Get()
}

// GetOptStartTimeOk returns a tuple with the OptStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JSPushConsumerConfigRequest) GetOptStartTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OptStartTime.Get(), o.OptStartTime.IsSet()
}

// HasOptStartTime returns a boolean if a field has been set.
func (o *JSPushConsumerConfigRequest) HasOptStartTime() bool {
	if o != nil && o.OptStartTime.IsSet() {
		return true
	}

	return false
}

// SetOptStartTime gets a reference to the given NullableString and assigns it to the OptStartTime field.
func (o *JSPushConsumerConfigRequest) SetOptStartTime(v string) {
	o.OptStartTime.Set(&v)
}

// SetOptStartTimeNil sets the value for OptStartTime to be an explicit nil
func (o *JSPushConsumerConfigRequest) SetOptStartTimeNil() {
	o.OptStartTime.Set(nil)
}

// UnsetOptStartTime ensures that no value is present for OptStartTime, not even an explicit nil
func (o *JSPushConsumerConfigRequest) UnsetOptStartTime() {
	o.OptStartTime.Unset()
}

// GetReplayPolicy returns the ReplayPolicy field value
func (o *JSPushConsumerConfigRequest) GetReplayPolicy() ReplayPolicy {
	if o == nil {
		var ret ReplayPolicy
		return ret
	}

	return o.ReplayPolicy
}

// GetReplayPolicyOk returns a tuple with the ReplayPolicy field value
// and a boolean to check if the value has been set.
func (o *JSPushConsumerConfigRequest) GetReplayPolicyOk() (*ReplayPolicy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReplayPolicy, true
}

// SetReplayPolicy sets field value
func (o *JSPushConsumerConfigRequest) SetReplayPolicy(v ReplayPolicy) {
	o.ReplayPolicy = v
}

// GetSampleFreq returns the SampleFreq field value if set, zero value otherwise.
func (o *JSPushConsumerConfigRequest) GetSampleFreq() string {
	if o == nil || IsNil(o.SampleFreq) {
		var ret string
		return ret
	}
	return *o.SampleFreq
}

// GetSampleFreqOk returns a tuple with the SampleFreq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSPushConsumerConfigRequest) GetSampleFreqOk() (*string, bool) {
	if o == nil || IsNil(o.SampleFreq) {
		return nil, false
	}
	return o.SampleFreq, true
}

// HasSampleFreq returns a boolean if a field has been set.
func (o *JSPushConsumerConfigRequest) HasSampleFreq() bool {
	if o != nil && !IsNil(o.SampleFreq) {
		return true
	}

	return false
}

// SetSampleFreq gets a reference to the given string and assigns it to the SampleFreq field.
func (o *JSPushConsumerConfigRequest) SetSampleFreq(v string) {
	o.SampleFreq = &v
}

func (o JSPushConsumerConfigRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSPushConsumerConfigRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DeliverGroup) {
		toSerialize["deliver_group"] = o.DeliverGroup
	}
	if !IsNil(o.DeliverSubject) {
		toSerialize["deliver_subject"] = o.DeliverSubject
	}
	if !IsNil(o.FlowControl) {
		toSerialize["flow_control"] = o.FlowControl
	}
	if !IsNil(o.HeadersOnly) {
		toSerialize["headers_only"] = o.HeadersOnly
	}
	if !IsNil(o.IdleHeartbeat) {
		toSerialize["idle_heartbeat"] = o.IdleHeartbeat
	}
	if !IsNil(o.RateLimitBps) {
		toSerialize["rate_limit_bps"] = o.RateLimitBps
	}
	toSerialize["ack_policy"] = o.AckPolicy
	if !IsNil(o.AckWait) {
		toSerialize["ack_wait"] = o.AckWait
	}
	if !IsNil(o.Backoff) {
		toSerialize["backoff"] = o.Backoff
	}
	toSerialize["deliver_policy"] = o.DeliverPolicy
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Direct) {
		toSerialize["direct"] = o.Direct
	}
	if !IsNil(o.DurableName) {
		toSerialize["durable_name"] = o.DurableName
	}
	if !IsNil(o.FilterSubject) {
		toSerialize["filter_subject"] = o.FilterSubject
	}
	if !IsNil(o.InactiveThreshold) {
		toSerialize["inactive_threshold"] = o.InactiveThreshold
	}
	if !IsNil(o.MaxAckPending) {
		toSerialize["max_ack_pending"] = o.MaxAckPending
	}
	if !IsNil(o.MaxDeliver) {
		toSerialize["max_deliver"] = o.MaxDeliver
	}
	if !IsNil(o.MemStorage) {
		toSerialize["mem_storage"] = o.MemStorage
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["num_replicas"] = o.NumReplicas
	if !IsNil(o.OptStartSeq) {
		toSerialize["opt_start_seq"] = o.OptStartSeq
	}
	if o.OptStartTime.IsSet() {
		toSerialize["opt_start_time"] = o.OptStartTime.Get()
	}
	toSerialize["replay_policy"] = o.ReplayPolicy
	if !IsNil(o.SampleFreq) {
		toSerialize["sample_freq"] = o.SampleFreq
	}
	return toSerialize, nil
}

type NullableJSPushConsumerConfigRequest struct {
	value *JSPushConsumerConfigRequest
	isSet bool
}

func (v NullableJSPushConsumerConfigRequest) Get() *JSPushConsumerConfigRequest {
	return v.value
}

func (v *NullableJSPushConsumerConfigRequest) Set(val *JSPushConsumerConfigRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableJSPushConsumerConfigRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableJSPushConsumerConfigRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSPushConsumerConfigRequest(val *JSPushConsumerConfigRequest) *NullableJSPushConsumerConfigRequest {
	return &NullableJSPushConsumerConfigRequest{value: val, isSet: true}
}

func (v NullableJSPushConsumerConfigRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSPushConsumerConfigRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
