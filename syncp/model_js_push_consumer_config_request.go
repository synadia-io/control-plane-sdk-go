/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

// checks if the JSPushConsumerConfigRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSPushConsumerConfigRequest{}

// JSPushConsumerConfigRequest struct for JSPushConsumerConfigRequest
type JSPushConsumerConfigRequest struct {
	JSCommonConsumerConfigRequest
	DeliverGroup *string `json:"deliver_group,omitempty"`
	// Push based options.
	DeliverSubject *string `json:"deliver_subject,omitempty"`
	FlowControl    *bool   `json:"flow_control,omitempty"`
	HeadersOnly    *bool   `json:"headers_only,omitempty"`
	IdleHeartbeat  *int64  `json:"idle_heartbeat,omitempty"`
	RateLimitBps   *int32  `json:"rate_limit_bps,omitempty"`
}

func (o JSPushConsumerConfigRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DeliverGroup != nil {
		toSerialize["deliver_group"] = o.DeliverGroup
	}
	if o.DeliverSubject != nil {
		toSerialize["deliver_subject"] = o.DeliverSubject
	}
	if o.FlowControl != nil {
		toSerialize["flow_control"] = o.FlowControl
	}
	if o.HeadersOnly != nil {
		toSerialize["headers_only"] = o.HeadersOnly
	}
	if o.IdleHeartbeat != nil {
		toSerialize["idle_heartbeat"] = o.IdleHeartbeat
	}
	if o.RateLimitBps != nil {
		toSerialize["rate_limit_bps"] = o.RateLimitBps
	}
	toSerialize["ack_policy"] = o.AckPolicy
	if o.AckWait != nil {
		toSerialize["ack_wait"] = o.AckWait
	}
	if o.Backoff != nil {
		toSerialize["backoff"] = o.Backoff
	}
	toSerialize["deliver_policy"] = o.DeliverPolicy
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Direct != nil {
		toSerialize["direct"] = o.Direct
	}
	if o.DurableName != nil {
		toSerialize["durable_name"] = o.DurableName
	}
	if o.FilterSubject != nil {
		toSerialize["filter_subject"] = o.FilterSubject
	}
	if o.InactiveThreshold != nil {
		toSerialize["inactive_threshold"] = o.InactiveThreshold
	}
	if o.MaxAckPending != nil {
		toSerialize["max_ack_pending"] = o.MaxAckPending
	}
	if o.MaxDeliver != nil {
		toSerialize["max_deliver"] = o.MaxDeliver
	}
	if o.MemStorage != nil {
		toSerialize["mem_storage"] = o.MemStorage
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	toSerialize["num_replicas"] = o.NumReplicas
	if o.OptStartSeq != nil {
		toSerialize["opt_start_seq"] = o.OptStartSeq
	}
	if o.OptStartTime != nil && !o.OptStartTime.IsNull() {
		toSerialize["opt_start_time"] = o.OptStartTime.Val
	}
	toSerialize["replay_policy"] = o.ReplayPolicy
	if o.SampleFreq != nil {
		toSerialize["sample_freq"] = o.SampleFreq
	}
	return toSerialize, nil
}
