/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type AdminAPI interface {

	/*
		CheckAppAdmin Check for Admin User

		Check whether there is an App Admin user

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiCheckAppAdminRequest
	*/
	CheckAppAdmin(ctx context.Context) ApiCheckAppAdminRequest

	// CheckAppAdminExecute executes the request
	CheckAppAdminExecute(r ApiCheckAppAdminRequest) (*http.Response, error)

	/*
		CreateAppAdmin Create an App Admin User

		On clean installs, allows the programatic creation of the App Admin user

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiCreateAppAdminRequest
	*/
	CreateAppAdmin(ctx context.Context) ApiCreateAppAdminRequest

	// CreateAppAdminExecute executes the request
	//  @return AdminAppUserCreateResponse
	CreateAppAdminExecute(r ApiCreateAppAdminRequest) (*AdminAppUserCreateResponse, *http.Response, error)
}

// AdminAPIService AdminAPI service
type AdminAPIService service

type ApiCheckAppAdminRequest struct {
	ctx        context.Context
	ApiService AdminAPI
}

func (r ApiCheckAppAdminRequest) Execute() (*http.Response, error) {
	return r.ApiService.CheckAppAdminExecute(r)
}

/*
CheckAppAdmin Check for Admin User

Check whether there is an App Admin user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCheckAppAdminRequest
*/
func (a *AdminAPIService) CheckAppAdmin(ctx context.Context) ApiCheckAppAdminRequest {
	return ApiCheckAppAdminRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
func (a *AdminAPIService) CheckAppAdminExecute(r ApiCheckAppAdminRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodGet
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminAPIService.CheckAppAdmin")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/beta/admin/app-user"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCreateAppAdminRequest struct {
	ctx                       context.Context
	ApiService                AdminAPI
	adminAppUserCreateRequest *AdminAppUserCreateRequest
}

func (r ApiCreateAppAdminRequest) AdminAppUserCreateRequest(adminAppUserCreateRequest AdminAppUserCreateRequest) ApiCreateAppAdminRequest {
	r.adminAppUserCreateRequest = &adminAppUserCreateRequest
	return r
}

func (r ApiCreateAppAdminRequest) Execute() (*AdminAppUserCreateResponse, *http.Response, error) {
	return r.ApiService.CreateAppAdminExecute(r)
}

/*
CreateAppAdmin Create an App Admin User

On clean installs, allows the programatic creation of the App Admin user

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateAppAdminRequest
*/
func (a *AdminAPIService) CreateAppAdmin(ctx context.Context) ApiCreateAppAdminRequest {
	return ApiCreateAppAdminRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return AdminAppUserCreateResponse
func (a *AdminAPIService) CreateAppAdminExecute(r ApiCreateAppAdminRequest) (*AdminAppUserCreateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AdminAppUserCreateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AdminAPIService.CreateAppAdmin")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/beta/admin/app-user"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.adminAppUserCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
