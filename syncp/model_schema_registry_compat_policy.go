/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// SchemaRegistryCompatPolicy the model 'SchemaRegistryCompatPolicy'
type SchemaRegistryCompatPolicy string

// List of SchemaRegistryCompatPolicy
const (
	SCHEMAREGISTRYCOMPATPOLICY_BACKWARDS SchemaRegistryCompatPolicy = "backwards"
	SCHEMAREGISTRYCOMPATPOLICY_NONE      SchemaRegistryCompatPolicy = "none"
	SCHEMAREGISTRYCOMPATPOLICY_FORWARD   SchemaRegistryCompatPolicy = "forward"
	SCHEMAREGISTRYCOMPATPOLICY_FULL      SchemaRegistryCompatPolicy = "full"
)

// All allowed values of SchemaRegistryCompatPolicy enum
var AllowedSchemaRegistryCompatPolicyEnumValues = []SchemaRegistryCompatPolicy{
	"backwards",
	"none",
	"forward",
	"full",
}

func (v *SchemaRegistryCompatPolicy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SchemaRegistryCompatPolicy(value)
	for _, existing := range AllowedSchemaRegistryCompatPolicyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SchemaRegistryCompatPolicy", value)
}

// NewSchemaRegistryCompatPolicyFromValue returns a pointer to a valid SchemaRegistryCompatPolicy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSchemaRegistryCompatPolicyFromValue(v string) (*SchemaRegistryCompatPolicy, error) {
	ev := SchemaRegistryCompatPolicy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SchemaRegistryCompatPolicy: valid values are %v", v, AllowedSchemaRegistryCompatPolicyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SchemaRegistryCompatPolicy) IsValid() bool {
	for _, existing := range AllowedSchemaRegistryCompatPolicyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SchemaRegistryCompatPolicy value
func (v SchemaRegistryCompatPolicy) Ptr() *SchemaRegistryCompatPolicy {
	return &v
}
