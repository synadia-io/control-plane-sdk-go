/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// StorageType the model 'StorageType'
type StorageType string

// List of StorageType
const (
	STORAGETYPE_FILE   StorageType = "file"
	STORAGETYPE_MEMORY StorageType = "memory"
)

// All allowed values of StorageType enum
var AllowedStorageTypeEnumValues = []StorageType{
	"file",
	"memory",
}

func (v *StorageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StorageType(value)
	for _, existing := range AllowedStorageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StorageType", value)
}

// NewStorageTypeFromValue returns a pointer to a valid StorageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStorageTypeFromValue(v string) (*StorageType, error) {
	ev := StorageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StorageType: valid values are %v", v, AllowedStorageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StorageType) IsValid() bool {
	for _, existing := range AllowedStorageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StorageType value
func (v StorageType) Ptr() *StorageType {
	return &v
}
