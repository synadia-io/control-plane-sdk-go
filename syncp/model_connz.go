/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the Connz type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Connz{}

// Connz Connz represents detailed information on current client connections.
type Connz struct {
	Connections    []ConnzConnectionsInner `json:"connections"`
	Limit          int32                   `json:"limit"`
	Now            time.Time               `json:"now"`
	NumConnections int32                   `json:"num_connections"`
	Offset         int32                   `json:"offset"`
	ServerId       string                  `json:"server_id"`
	Total          int32                   `json:"total"`
}

type _Connz Connz

// NewConnz instantiates a new Connz object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnz(connections []ConnzConnectionsInner, limit int32, now time.Time, numConnections int32, offset int32, serverId string, total int32) *Connz {
	this := Connz{}
	this.Connections = connections
	this.Limit = limit
	this.Now = now
	this.NumConnections = numConnections
	this.Offset = offset
	this.ServerId = serverId
	this.Total = total
	return &this
}

// NewConnzWithDefaults instantiates a new Connz object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnzWithDefaults() *Connz {
	this := Connz{}
	return &this
}

// GetConnections returns the Connections field value
func (o *Connz) GetConnections() []ConnzConnectionsInner {
	if o == nil {
		var ret []ConnzConnectionsInner
		return ret
	}

	return o.Connections
}

// GetConnectionsOk returns a tuple with the Connections field value
// and a boolean to check if the value has been set.
func (o *Connz) GetConnectionsOk() ([]ConnzConnectionsInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Connections, true
}

// SetConnections sets field value
func (o *Connz) SetConnections(v []ConnzConnectionsInner) {
	o.Connections = v
}

// GetLimit returns the Limit field value
func (o *Connz) GetLimit() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Limit
}

// GetLimitOk returns a tuple with the Limit field value
// and a boolean to check if the value has been set.
func (o *Connz) GetLimitOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Limit, true
}

// SetLimit sets field value
func (o *Connz) SetLimit(v int32) {
	o.Limit = v
}

// GetNow returns the Now field value
func (o *Connz) GetNow() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Now
}

// GetNowOk returns a tuple with the Now field value
// and a boolean to check if the value has been set.
func (o *Connz) GetNowOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Now, true
}

// SetNow sets field value
func (o *Connz) SetNow(v time.Time) {
	o.Now = v
}

// GetNumConnections returns the NumConnections field value
func (o *Connz) GetNumConnections() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumConnections
}

// GetNumConnectionsOk returns a tuple with the NumConnections field value
// and a boolean to check if the value has been set.
func (o *Connz) GetNumConnectionsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumConnections, true
}

// SetNumConnections sets field value
func (o *Connz) SetNumConnections(v int32) {
	o.NumConnections = v
}

// GetOffset returns the Offset field value
func (o *Connz) GetOffset() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value
// and a boolean to check if the value has been set.
func (o *Connz) GetOffsetOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Offset, true
}

// SetOffset sets field value
func (o *Connz) SetOffset(v int32) {
	o.Offset = v
}

// GetServerId returns the ServerId field value
func (o *Connz) GetServerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ServerId
}

// GetServerIdOk returns a tuple with the ServerId field value
// and a boolean to check if the value has been set.
func (o *Connz) GetServerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServerId, true
}

// SetServerId sets field value
func (o *Connz) SetServerId(v string) {
	o.ServerId = v
}

// GetTotal returns the Total field value
func (o *Connz) GetTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *Connz) GetTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *Connz) SetTotal(v int32) {
	o.Total = v
}

func (o Connz) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Connz) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["connections"] = o.Connections
	toSerialize["limit"] = o.Limit
	toSerialize["now"] = o.Now
	toSerialize["num_connections"] = o.NumConnections
	toSerialize["offset"] = o.Offset
	toSerialize["server_id"] = o.ServerId
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *Connz) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connections",
		"limit",
		"now",
		"num_connections",
		"offset",
		"server_id",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnz := _Connz{}

	err = json.Unmarshal(bytes, &varConnz)

	if err != nil {
		return err
	}

	*o = Connz(varConnz)

	return err
}

type NullableConnz struct {
	value *Connz
	isSet bool
}

func (v NullableConnz) Get() *Connz {
	return v.value
}

func (v *NullableConnz) Set(val *Connz) {
	v.value = val
	v.isSet = true
}

func (v NullableConnz) IsSet() bool {
	return v.isSet
}

func (v *NullableConnz) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnz(val *Connz) *NullableConnz {
	return &NullableConnz{value: val, isSet: true}
}

func (v NullableConnz) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnz) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
