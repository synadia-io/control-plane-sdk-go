/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// ConnectorMetricChartTypes the model 'ConnectorMetricChartTypes'
type ConnectorMetricChartTypes string

// List of ConnectorMetricChartTypes
const (
	CONNECTORMETRICCHARTTYPES_CONNECTORS_INPUT_CONNECTION_FAILED  ConnectorMetricChartTypes = "ConnectorsInputConnectionFailed"
	CONNECTORMETRICCHARTTYPES_CONNECTORS_INPUT_CONNECTION_LOST    ConnectorMetricChartTypes = "ConnectorsInputConnectionLost"
	CONNECTORMETRICCHARTTYPES_CONNECTORS_INPUT_CONNECTION_UP      ConnectorMetricChartTypes = "ConnectorsInputConnectionUp"
	CONNECTORMETRICCHARTTYPES_CONNECTORS_INPUT_LATENCY_NS         ConnectorMetricChartTypes = "ConnectorsInputLatencyNs"
	CONNECTORMETRICCHARTTYPES_CONNECTORS_INPUT_LATENCY_NS_SUM     ConnectorMetricChartTypes = "ConnectorsInputLatencyNsSum"
	CONNECTORMETRICCHARTTYPES_CONNECTORS_INPUT_LATENCY_NS_COUNT   ConnectorMetricChartTypes = "ConnectorsInputLatencyNsCount"
	CONNECTORMETRICCHARTTYPES_CONNECTORS_INPUT_RECEIVED           ConnectorMetricChartTypes = "ConnectorsInputReceived"
	CONNECTORMETRICCHARTTYPES_CONNECTORS_OUTPUT_BATCH_SENT        ConnectorMetricChartTypes = "ConnectorsOutputBatchSent"
	CONNECTORMETRICCHARTTYPES_CONNECTORS_OUTPUT_CONNECTION_FAILED ConnectorMetricChartTypes = "ConnectorsOutputConnectionFailed"
	CONNECTORMETRICCHARTTYPES_CONNECTORS_OUTPUT_CONNECTION_LOST   ConnectorMetricChartTypes = "ConnectorsOutputConnectionLost"
	CONNECTORMETRICCHARTTYPES_CONNECTORS_OUTPUT_CONNECTION_UP     ConnectorMetricChartTypes = "ConnectorsOutputConnectionUp"
	CONNECTORMETRICCHARTTYPES_CONNECTORS_OUTPUT_ERROR             ConnectorMetricChartTypes = "ConnectorsOutputError"
	CONNECTORMETRICCHARTTYPES_CONNECTORS_OUTPUT_LATENCY_NS        ConnectorMetricChartTypes = "ConnectorsOutputLatencyNs"
	CONNECTORMETRICCHARTTYPES_CONNECTORS_OUTPUT_LATENCY_NS_SUM    ConnectorMetricChartTypes = "ConnectorsOutputLatencyNsSum"
	CONNECTORMETRICCHARTTYPES_CONNECTORS_OUTPUT_LATENCY_NS_COUNT  ConnectorMetricChartTypes = "ConnectorsOutputLatencyNsCount"
	CONNECTORMETRICCHARTTYPES_CONNECTORS_OUTPUT_SENT              ConnectorMetricChartTypes = "ConnectorsOutputSent"
)

// All allowed values of ConnectorMetricChartTypes enum
var AllowedConnectorMetricChartTypesEnumValues = []ConnectorMetricChartTypes{
	"ConnectorsInputConnectionFailed",
	"ConnectorsInputConnectionLost",
	"ConnectorsInputConnectionUp",
	"ConnectorsInputLatencyNs",
	"ConnectorsInputLatencyNsSum",
	"ConnectorsInputLatencyNsCount",
	"ConnectorsInputReceived",
	"ConnectorsOutputBatchSent",
	"ConnectorsOutputConnectionFailed",
	"ConnectorsOutputConnectionLost",
	"ConnectorsOutputConnectionUp",
	"ConnectorsOutputError",
	"ConnectorsOutputLatencyNs",
	"ConnectorsOutputLatencyNsSum",
	"ConnectorsOutputLatencyNsCount",
	"ConnectorsOutputSent",
}

func (v *ConnectorMetricChartTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectorMetricChartTypes(value)
	for _, existing := range AllowedConnectorMetricChartTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectorMetricChartTypes", value)
}

// NewConnectorMetricChartTypesFromValue returns a pointer to a valid ConnectorMetricChartTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectorMetricChartTypesFromValue(v string) (*ConnectorMetricChartTypes, error) {
	ev := ConnectorMetricChartTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectorMetricChartTypes: valid values are %v", v, AllowedConnectorMetricChartTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectorMetricChartTypes) IsValid() bool {
	for _, existing := range AllowedConnectorMetricChartTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectorMetricChartTypes value
func (v ConnectorMetricChartTypes) Ptr() *ConnectorMetricChartTypes {
	return &v
}
