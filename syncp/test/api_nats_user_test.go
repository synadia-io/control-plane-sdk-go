/*
Synadia Control Plane

Testing NatsUserAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package syncp

import (
	"context"
	openapiclient "github.com/synadia-io/control-plane-sdk-go/syncp"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_syncp_NatsUserAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test NatsUserAPIService AssignNatsUserAppUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string
		var appUserId string

		resp, httpRes, err := apiClient.NatsUserAPI.AssignNatsUserAppUser(context.Background(), userId, appUserId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NatsUserAPIService DeleteNatsUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string

		httpRes, err := apiClient.NatsUserAPI.DeleteNatsUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NatsUserAPIService DownloadNatsUserCreds", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.NatsUserAPI.DownloadNatsUserCreds(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NatsUserAPIService GetNatsUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.NatsUserAPI.GetNatsUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NatsUserAPIService ListNatsUserAppUsers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.NatsUserAPI.ListNatsUserAppUsers(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NatsUserAPIService ListNatsUserConnections", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.NatsUserAPI.ListNatsUserConnections(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NatsUserAPIService UnAssignNatsUserAppUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string
		var appUserId string

		httpRes, err := apiClient.NatsUserAPI.UnAssignNatsUserAppUser(context.Background(), userId, appUserId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test NatsUserAPIService UpdateNatsUser", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.NatsUserAPI.UpdateNatsUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
