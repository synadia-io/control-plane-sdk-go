/*
Synadia Control Plane / Synadia Cloud

Testing NatsUserAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package syncp

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	openapiclient "github.com/synadia-io/control-plane-sdk-go/syncp"
)

func Test_syncp_NatsUserAPIService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test NatsUserAPIService AssignNatsUserTeamAppUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var teamAppUserId string

		resp, httpRes, err := apiClient.NatsUserAPI.AssignNatsUserTeamAppUser(context.Background(), userId, teamAppUserId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NatsUserAPIService CopyNatsUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.NatsUserAPI.CopyNatsUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NatsUserAPIService DeleteNatsUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		httpRes, err := apiClient.NatsUserAPI.DeleteNatsUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NatsUserAPIService DownloadNatsUserBearerJwt", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.NatsUserAPI.DownloadNatsUserBearerJwt(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NatsUserAPIService DownloadNatsUserCreds", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.NatsUserAPI.DownloadNatsUserCreds(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NatsUserAPIService DownloadNatsUserHttpGwToken", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.NatsUserAPI.DownloadNatsUserHttpGwToken(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NatsUserAPIService GetNatsUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.NatsUserAPI.GetNatsUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NatsUserAPIService ListNatsUserConnections", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.NatsUserAPI.ListNatsUserConnections(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NatsUserAPIService ListNatsUserIssuances", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.NatsUserAPI.ListNatsUserIssuances(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NatsUserAPIService ListNatsUserTeamAppUsers", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.NatsUserAPI.ListNatsUserTeamAppUsers(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NatsUserAPIService RotateNatsUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.NatsUserAPI.RotateNatsUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NatsUserAPIService UnAssignNatsUserTeamAppUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string
		var teamAppUserId string

		httpRes, err := apiClient.NatsUserAPI.UnAssignNatsUserTeamAppUser(context.Background(), userId, teamAppUserId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test NatsUserAPIService UpdateNatsUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var userId string

		resp, httpRes, err := apiClient.NatsUserAPI.UpdateNatsUser(context.Background(), userId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
