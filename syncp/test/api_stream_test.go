/*
Synadia Control Plane

Testing StreamAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package syncp

import (
	"context"
	openapiclient "github.com/synadia-io/control-plane-sdk-go/syncp"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_api_StreamAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test StreamAPIService CreatePullConsumer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var streamId string

		resp, httpRes, err := apiClient.StreamAPI.CreatePullConsumer(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StreamAPIService CreatePushConsumer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var streamId string

		resp, httpRes, err := apiClient.StreamAPI.CreatePushConsumer(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StreamAPIService DeleteStream", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var streamId string

		httpRes, err := apiClient.StreamAPI.DeleteStream(context.Background(), streamId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StreamAPIService GetStreamInfo", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var streamId string

		resp, httpRes, err := apiClient.StreamAPI.GetStreamInfo(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StreamAPIService ListConsumers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var streamId string

		resp, httpRes, err := apiClient.StreamAPI.ListConsumers(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StreamAPIService UpdateStream", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var streamId string

		resp, httpRes, err := apiClient.StreamAPI.UpdateStream(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
