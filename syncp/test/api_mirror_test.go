/*
Synadia Control Plane / Synadia Cloud

Testing MirrorAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package syncp

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	openapiclient "github.com/synadia-io/control-plane-sdk-go/syncp"
)

func Test_syncp_MirrorAPIService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MirrorAPIService CreateMirrorPullConsumer", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var streamId string

		resp, httpRes, err := apiClient.MirrorAPI.CreateMirrorPullConsumer(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test MirrorAPIService CreateMirrorPushConsumer", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var streamId string

		resp, httpRes, err := apiClient.MirrorAPI.CreateMirrorPushConsumer(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test MirrorAPIService DeleteMirror", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var streamId string

		httpRes, err := apiClient.MirrorAPI.DeleteMirror(context.Background(), streamId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test MirrorAPIService GetMirror", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var streamId string

		resp, httpRes, err := apiClient.MirrorAPI.GetMirror(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test MirrorAPIService ListMirrorConsumers", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var streamId string

		resp, httpRes, err := apiClient.MirrorAPI.ListMirrorConsumers(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test MirrorAPIService UpdateMirror", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var streamId string

		resp, httpRes, err := apiClient.MirrorAPI.UpdateMirror(context.Background(), streamId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
