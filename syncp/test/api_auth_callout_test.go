/*
Synadia Control Plane / Synadia Cloud

Testing AuthCalloutAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package syncp

import (
	"context"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	openapiclient "github.com/synadia-io/control-plane-sdk-go/syncp"
)

func Test_syncp_AuthCalloutAPIService(t *testing.T) {
	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AuthCalloutAPIService AddAuthCalloutTargetAccount", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authCalloutId string

		httpRes, err := apiClient.AuthCalloutAPI.AddAuthCalloutTargetAccount(context.Background(), authCalloutId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthCalloutAPIService AddAuthCalloutUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authCalloutId string

		httpRes, err := apiClient.AuthCalloutAPI.AddAuthCalloutUser(context.Background(), authCalloutId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthCalloutAPIService DeleteAuthCallout", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authCalloutId string

		httpRes, err := apiClient.AuthCalloutAPI.DeleteAuthCallout(context.Background(), authCalloutId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthCalloutAPIService DeleteAuthCalloutTargetAccount", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authCalloutId string
		var targetAccountId string

		httpRes, err := apiClient.AuthCalloutAPI.DeleteAuthCalloutTargetAccount(context.Background(), authCalloutId, targetAccountId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthCalloutAPIService DeleteAuthCalloutUser", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authCalloutId string
		var acUserId string

		httpRes, err := apiClient.AuthCalloutAPI.DeleteAuthCalloutUser(context.Background(), authCalloutId, acUserId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthCalloutAPIService GetAuthCallout", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authCalloutId string

		resp, httpRes, err := apiClient.AuthCalloutAPI.GetAuthCallout(context.Background(), authCalloutId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthCalloutAPIService ListAuthCalloutTargetAccounts", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authCalloutId string

		resp, httpRes, err := apiClient.AuthCalloutAPI.ListAuthCalloutTargetAccounts(context.Background(), authCalloutId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})

	t.Run("Test AuthCalloutAPIService ListAuthCalloutUsers", func(t *testing.T) {
		t.Skip("skip test") // remove to run test

		var authCalloutId string

		resp, httpRes, err := apiClient.AuthCalloutAPI.ListAuthCalloutUsers(context.Background(), authCalloutId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)
	})
}
