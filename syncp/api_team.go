/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type TeamAPI interface {

	/*
		CreateSystem Create System

		Create a System

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param teamId
		@return ApiCreateSystemRequest
	*/
	CreateSystem(ctx context.Context, teamId string) ApiCreateSystemRequest

	// CreateSystemExecute executes the request
	//  @return SystemViewResponse
	CreateSystemExecute(r ApiCreateSystemRequest) (*SystemViewResponse, *http.Response, error)

	/*
		DeleteTeam Delete Team

		Deletes Team

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param teamId
		@return ApiDeleteTeamRequest
	*/
	DeleteTeam(ctx context.Context, teamId string) ApiDeleteTeamRequest

	// DeleteTeamExecute executes the request
	DeleteTeamExecute(r ApiDeleteTeamRequest) (*http.Response, error)

	/*
		GetTeam Get Team

		Returns a Team by ID

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param teamId
		@return ApiGetTeamRequest
	*/
	GetTeam(ctx context.Context, teamId string) ApiGetTeamRequest

	// GetTeamExecute executes the request
	//  @return TeamViewResponse
	GetTeamExecute(r ApiGetTeamRequest) (*TeamViewResponse, *http.Response, error)

	/*
		GetTeamLimits Get Team Limits

		Get team limits total and allocated

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param teamId
		@return ApiGetTeamLimitsRequest
	*/
	GetTeamLimits(ctx context.Context, teamId string) ApiGetTeamLimitsRequest

	// GetTeamLimitsExecute executes the request
	//  @return TeamLimitsResponse
	GetTeamLimitsExecute(r ApiGetTeamLimitsRequest) (*TeamLimitsResponse, *http.Response, error)

	/*
		ImportSystem Import a System

		Import a System

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param teamId
		@return ApiImportSystemRequest
	*/
	ImportSystem(ctx context.Context, teamId string) ApiImportSystemRequest

	// ImportSystemExecute executes the request
	//  @return SystemViewResponse
	ImportSystemExecute(r ApiImportSystemRequest) (*SystemViewResponse, *http.Response, error)

	/*
		InviteAppUser Invite App Users

		Invites the specified User to join the Team. This operation is idempotent, with the caveat that Roles will not be downgraded; if the User is already assigned to the Team or Associated Resources and the requested Role is more permissive than the existing Role, the Role will be updated.

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param teamId
		@return ApiInviteAppUserRequest
	*/
	InviteAppUser(ctx context.Context, teamId string) ApiInviteAppUserRequest

	// InviteAppUserExecute executes the request
	//  @return AppUserInvitationResponse
	InviteAppUserExecute(r ApiInviteAppUserRequest) (*AppUserInvitationResponse, *http.Response, error)

	/*
		LeaveTeam Leave Team

		Leave the specified team

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param teamId
		@return ApiLeaveTeamRequest
	*/
	LeaveTeam(ctx context.Context, teamId string) ApiLeaveTeamRequest

	// LeaveTeamExecute executes the request
	LeaveTeamExecute(r ApiLeaveTeamRequest) (*http.Response, error)

	/*
		ListTeamAccounts List Accounts

		Returns a list of Accounts directly associated with the current team

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param teamId
		@return ApiListTeamAccountsRequest
	*/
	ListTeamAccounts(ctx context.Context, teamId string) ApiListTeamAccountsRequest

	// ListTeamAccountsExecute executes the request
	//  @return AccountListResponse
	ListTeamAccountsExecute(r ApiListTeamAccountsRequest) (*AccountListResponse, *http.Response, error)

	/*
		ListTeamAppUsers List App Users

		Returns a list of App Users associated with the Team

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param teamId
		@return ApiListTeamAppUsersRequest
	*/
	ListTeamAppUsers(ctx context.Context, teamId string) ApiListTeamAppUsersRequest

	// ListTeamAppUsersExecute executes the request
	//  @return AppUserAssignListResponse
	ListTeamAppUsersExecute(r ApiListTeamAppUsersRequest) (*AppUserAssignListResponse, *http.Response, error)

	/*
		ListTeamNatsUsers List NATS Users

		Returns a list of NATS Users directly associated with the current team

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param teamId
		@return ApiListTeamNatsUsersRequest
	*/
	ListTeamNatsUsers(ctx context.Context, teamId string) ApiListTeamNatsUsersRequest

	// ListTeamNatsUsersExecute executes the request
	//  @return NatsUserListResponse
	ListTeamNatsUsersExecute(r ApiListTeamNatsUsersRequest) (*NatsUserListResponse, *http.Response, error)

	/*
		ListTeamSystems List Systems

		Returns a list of Systems

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param teamId
		@return ApiListTeamSystemsRequest
	*/
	ListTeamSystems(ctx context.Context, teamId string) ApiListTeamSystemsRequest

	// ListTeamSystemsExecute executes the request
	//  @return SystemListResponse
	ListTeamSystemsExecute(r ApiListTeamSystemsRequest) (*SystemListResponse, *http.Response, error)

	/*
		UnAssignTeamAppUser Unassign App User from Team

		Unassign an App User from a Team

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param teamId
		@param appUserId
		@return ApiUnAssignTeamAppUserRequest
	*/
	UnAssignTeamAppUser(ctx context.Context, teamId string, appUserId string) ApiUnAssignTeamAppUserRequest

	// UnAssignTeamAppUserExecute executes the request
	UnAssignTeamAppUserExecute(r ApiUnAssignTeamAppUserRequest) (*http.Response, error)

	/*
		UpdateTeam Update Team

		Updates a Team

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param teamId
		@return ApiUpdateTeamRequest
	*/
	UpdateTeam(ctx context.Context, teamId string) ApiUpdateTeamRequest

	// UpdateTeamExecute executes the request
	//  @return TeamViewResponse
	UpdateTeamExecute(r ApiUpdateTeamRequest) (*TeamViewResponse, *http.Response, error)

	/*
		UpdateTeamAppUser Update App User Team Assignment

		Update an App User's assignment on a Team

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param teamId
		@param appUserId
		@return ApiUpdateTeamAppUserRequest
	*/
	UpdateTeamAppUser(ctx context.Context, teamId string, appUserId string) ApiUpdateTeamAppUserRequest

	// UpdateTeamAppUserExecute executes the request
	//  @return AppUserAssignResponse
	UpdateTeamAppUserExecute(r ApiUpdateTeamAppUserRequest) (*AppUserAssignResponse, *http.Response, error)
}

// TeamAPIService TeamAPI service
type TeamAPIService service

type ApiCreateSystemRequest struct {
	ctx                 context.Context
	ApiService          TeamAPI
	teamId              string
	systemCreateRequest *SystemCreateRequest
}

func (r ApiCreateSystemRequest) SystemCreateRequest(systemCreateRequest SystemCreateRequest) ApiCreateSystemRequest {
	r.systemCreateRequest = &systemCreateRequest
	return r
}

func (r ApiCreateSystemRequest) Execute() (*SystemViewResponse, *http.Response, error) {
	return r.ApiService.CreateSystemExecute(r)
}

/*
CreateSystem Create System

Create a System

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param teamId
	@return ApiCreateSystemRequest
*/
func (a *TeamAPIService) CreateSystem(ctx context.Context, teamId string) ApiCreateSystemRequest {
	return ApiCreateSystemRequest{
		ApiService: a,
		ctx:        ctx,
		teamId:     teamId,
	}
}

// Execute executes the request
//
//	@return SystemViewResponse
func (a *TeamAPIService) CreateSystemExecute(r ApiCreateSystemRequest) (*SystemViewResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SystemViewResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamAPIService.CreateSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{teamId}/systems"
	localVarPath = strings.Replace(localVarPath, "{"+"teamId"+"}", url.PathEscape(parameterValueToString(r.teamId, "teamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.systemCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTeamRequest struct {
	ctx        context.Context
	ApiService TeamAPI
	teamId     string
}

func (r ApiDeleteTeamRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTeamExecute(r)
}

/*
DeleteTeam Delete Team

Deletes Team

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param teamId
	@return ApiDeleteTeamRequest
*/
func (a *TeamAPIService) DeleteTeam(ctx context.Context, teamId string) ApiDeleteTeamRequest {
	return ApiDeleteTeamRequest{
		ApiService: a,
		ctx:        ctx,
		teamId:     teamId,
	}
}

// Execute executes the request
func (a *TeamAPIService) DeleteTeamExecute(r ApiDeleteTeamRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamAPIService.DeleteTeam")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{teamId}"
	localVarPath = strings.Replace(localVarPath, "{"+"teamId"+"}", url.PathEscape(parameterValueToString(r.teamId, "teamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTeamRequest struct {
	ctx        context.Context
	ApiService TeamAPI
	teamId     string
}

func (r ApiGetTeamRequest) Execute() (*TeamViewResponse, *http.Response, error) {
	return r.ApiService.GetTeamExecute(r)
}

/*
GetTeam Get Team

Returns a Team by ID

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param teamId
	@return ApiGetTeamRequest
*/
func (a *TeamAPIService) GetTeam(ctx context.Context, teamId string) ApiGetTeamRequest {
	return ApiGetTeamRequest{
		ApiService: a,
		ctx:        ctx,
		teamId:     teamId,
	}
}

// Execute executes the request
//
//	@return TeamViewResponse
func (a *TeamAPIService) GetTeamExecute(r ApiGetTeamRequest) (*TeamViewResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TeamViewResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamAPIService.GetTeam")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{teamId}"
	localVarPath = strings.Replace(localVarPath, "{"+"teamId"+"}", url.PathEscape(parameterValueToString(r.teamId, "teamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetTeamLimitsRequest struct {
	ctx        context.Context
	ApiService TeamAPI
	teamId     string
}

func (r ApiGetTeamLimitsRequest) Execute() (*TeamLimitsResponse, *http.Response, error) {
	return r.ApiService.GetTeamLimitsExecute(r)
}

/*
GetTeamLimits Get Team Limits

Get team limits total and allocated

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param teamId
	@return ApiGetTeamLimitsRequest
*/
func (a *TeamAPIService) GetTeamLimits(ctx context.Context, teamId string) ApiGetTeamLimitsRequest {
	return ApiGetTeamLimitsRequest{
		ApiService: a,
		ctx:        ctx,
		teamId:     teamId,
	}
}

// Execute executes the request
//
//	@return TeamLimitsResponse
func (a *TeamAPIService) GetTeamLimitsExecute(r ApiGetTeamLimitsRequest) (*TeamLimitsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TeamLimitsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamAPIService.GetTeamLimits")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{teamId}/team-limits"
	localVarPath = strings.Replace(localVarPath, "{"+"teamId"+"}", url.PathEscape(parameterValueToString(r.teamId, "teamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiImportSystemRequest struct {
	ctx                 context.Context
	ApiService          TeamAPI
	teamId              string
	systemImportRequest *SystemImportRequest
}

func (r ApiImportSystemRequest) SystemImportRequest(systemImportRequest SystemImportRequest) ApiImportSystemRequest {
	r.systemImportRequest = &systemImportRequest
	return r
}

func (r ApiImportSystemRequest) Execute() (*SystemViewResponse, *http.Response, error) {
	return r.ApiService.ImportSystemExecute(r)
}

/*
ImportSystem Import a System

Import a System

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param teamId
	@return ApiImportSystemRequest
*/
func (a *TeamAPIService) ImportSystem(ctx context.Context, teamId string) ApiImportSystemRequest {
	return ApiImportSystemRequest{
		ApiService: a,
		ctx:        ctx,
		teamId:     teamId,
	}
}

// Execute executes the request
//
//	@return SystemViewResponse
func (a *TeamAPIService) ImportSystemExecute(r ApiImportSystemRequest) (*SystemViewResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SystemViewResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamAPIService.ImportSystem")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{teamId}/import-system"
	localVarPath = strings.Replace(localVarPath, "{"+"teamId"+"}", url.PathEscape(parameterValueToString(r.teamId, "teamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.systemImportRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiInviteAppUserRequest struct {
	ctx                      context.Context
	ApiService               TeamAPI
	teamId                   string
	appUserInvitationRequest *AppUserInvitationRequest
}

func (r ApiInviteAppUserRequest) AppUserInvitationRequest(appUserInvitationRequest AppUserInvitationRequest) ApiInviteAppUserRequest {
	r.appUserInvitationRequest = &appUserInvitationRequest
	return r
}

func (r ApiInviteAppUserRequest) Execute() (*AppUserInvitationResponse, *http.Response, error) {
	return r.ApiService.InviteAppUserExecute(r)
}

/*
InviteAppUser Invite App Users

Invites the specified User to join the Team. This operation is idempotent, with the caveat that Roles will not be downgraded; if the User is already assigned to the Team or Associated Resources and the requested Role is more permissive than the existing Role, the Role will be updated.

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param teamId
	@return ApiInviteAppUserRequest
*/
func (a *TeamAPIService) InviteAppUser(ctx context.Context, teamId string) ApiInviteAppUserRequest {
	return ApiInviteAppUserRequest{
		ApiService: a,
		ctx:        ctx,
		teamId:     teamId,
	}
}

// Execute executes the request
//
//	@return AppUserInvitationResponse
func (a *TeamAPIService) InviteAppUserExecute(r ApiInviteAppUserRequest) (*AppUserInvitationResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AppUserInvitationResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamAPIService.InviteAppUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{teamId}/app-users/invitations"
	localVarPath = strings.Replace(localVarPath, "{"+"teamId"+"}", url.PathEscape(parameterValueToString(r.teamId, "teamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appUserInvitationRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiLeaveTeamRequest struct {
	ctx        context.Context
	ApiService TeamAPI
	teamId     string
}

func (r ApiLeaveTeamRequest) Execute() (*http.Response, error) {
	return r.ApiService.LeaveTeamExecute(r)
}

/*
LeaveTeam Leave Team

Leave the specified team

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param teamId
	@return ApiLeaveTeamRequest
*/
func (a *TeamAPIService) LeaveTeam(ctx context.Context, teamId string) ApiLeaveTeamRequest {
	return ApiLeaveTeamRequest{
		ApiService: a,
		ctx:        ctx,
		teamId:     teamId,
	}
}

// Execute executes the request
func (a *TeamAPIService) LeaveTeamExecute(r ApiLeaveTeamRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodPost
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamAPIService.LeaveTeam")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{teamId}/app-users/leave"
	localVarPath = strings.Replace(localVarPath, "{"+"teamId"+"}", url.PathEscape(parameterValueToString(r.teamId, "teamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiListTeamAccountsRequest struct {
	ctx        context.Context
	ApiService TeamAPI
	teamId     string
}

func (r ApiListTeamAccountsRequest) Execute() (*AccountListResponse, *http.Response, error) {
	return r.ApiService.ListTeamAccountsExecute(r)
}

/*
ListTeamAccounts List Accounts

Returns a list of Accounts directly associated with the current team

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param teamId
	@return ApiListTeamAccountsRequest
*/
func (a *TeamAPIService) ListTeamAccounts(ctx context.Context, teamId string) ApiListTeamAccountsRequest {
	return ApiListTeamAccountsRequest{
		ApiService: a,
		ctx:        ctx,
		teamId:     teamId,
	}
}

// Execute executes the request
//
//	@return AccountListResponse
func (a *TeamAPIService) ListTeamAccountsExecute(r ApiListTeamAccountsRequest) (*AccountListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AccountListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamAPIService.ListTeamAccounts")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{teamId}/accounts"
	localVarPath = strings.Replace(localVarPath, "{"+"teamId"+"}", url.PathEscape(parameterValueToString(r.teamId, "teamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTeamAppUsersRequest struct {
	ctx        context.Context
	ApiService TeamAPI
	teamId     string
}

func (r ApiListTeamAppUsersRequest) Execute() (*AppUserAssignListResponse, *http.Response, error) {
	return r.ApiService.ListTeamAppUsersExecute(r)
}

/*
ListTeamAppUsers List App Users

Returns a list of App Users associated with the Team

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param teamId
	@return ApiListTeamAppUsersRequest
*/
func (a *TeamAPIService) ListTeamAppUsers(ctx context.Context, teamId string) ApiListTeamAppUsersRequest {
	return ApiListTeamAppUsersRequest{
		ApiService: a,
		ctx:        ctx,
		teamId:     teamId,
	}
}

// Execute executes the request
//
//	@return AppUserAssignListResponse
func (a *TeamAPIService) ListTeamAppUsersExecute(r ApiListTeamAppUsersRequest) (*AppUserAssignListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AppUserAssignListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamAPIService.ListTeamAppUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{teamId}/app-users"
	localVarPath = strings.Replace(localVarPath, "{"+"teamId"+"}", url.PathEscape(parameterValueToString(r.teamId, "teamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTeamNatsUsersRequest struct {
	ctx        context.Context
	ApiService TeamAPI
	teamId     string
}

func (r ApiListTeamNatsUsersRequest) Execute() (*NatsUserListResponse, *http.Response, error) {
	return r.ApiService.ListTeamNatsUsersExecute(r)
}

/*
ListTeamNatsUsers List NATS Users

Returns a list of NATS Users directly associated with the current team

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param teamId
	@return ApiListTeamNatsUsersRequest
*/
func (a *TeamAPIService) ListTeamNatsUsers(ctx context.Context, teamId string) ApiListTeamNatsUsersRequest {
	return ApiListTeamNatsUsersRequest{
		ApiService: a,
		ctx:        ctx,
		teamId:     teamId,
	}
}

// Execute executes the request
//
//	@return NatsUserListResponse
func (a *TeamAPIService) ListTeamNatsUsersExecute(r ApiListTeamNatsUsersRequest) (*NatsUserListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *NatsUserListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamAPIService.ListTeamNatsUsers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{teamId}/nats-users"
	localVarPath = strings.Replace(localVarPath, "{"+"teamId"+"}", url.PathEscape(parameterValueToString(r.teamId, "teamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTeamSystemsRequest struct {
	ctx        context.Context
	ApiService TeamAPI
	teamId     string
}

func (r ApiListTeamSystemsRequest) Execute() (*SystemListResponse, *http.Response, error) {
	return r.ApiService.ListTeamSystemsExecute(r)
}

/*
ListTeamSystems List Systems

Returns a list of Systems

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param teamId
	@return ApiListTeamSystemsRequest
*/
func (a *TeamAPIService) ListTeamSystems(ctx context.Context, teamId string) ApiListTeamSystemsRequest {
	return ApiListTeamSystemsRequest{
		ApiService: a,
		ctx:        ctx,
		teamId:     teamId,
	}
}

// Execute executes the request
//
//	@return SystemListResponse
func (a *TeamAPIService) ListTeamSystemsExecute(r ApiListTeamSystemsRequest) (*SystemListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *SystemListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamAPIService.ListTeamSystems")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{teamId}/systems"
	localVarPath = strings.Replace(localVarPath, "{"+"teamId"+"}", url.PathEscape(parameterValueToString(r.teamId, "teamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUnAssignTeamAppUserRequest struct {
	ctx        context.Context
	ApiService TeamAPI
	teamId     string
	appUserId  string
}

func (r ApiUnAssignTeamAppUserRequest) Execute() (*http.Response, error) {
	return r.ApiService.UnAssignTeamAppUserExecute(r)
}

/*
UnAssignTeamAppUser Unassign App User from Team

Unassign an App User from a Team

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param teamId
	@param appUserId
	@return ApiUnAssignTeamAppUserRequest
*/
func (a *TeamAPIService) UnAssignTeamAppUser(ctx context.Context, teamId string, appUserId string) ApiUnAssignTeamAppUserRequest {
	return ApiUnAssignTeamAppUserRequest{
		ApiService: a,
		ctx:        ctx,
		teamId:     teamId,
		appUserId:  appUserId,
	}
}

// Execute executes the request
func (a *TeamAPIService) UnAssignTeamAppUserExecute(r ApiUnAssignTeamAppUserRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamAPIService.UnAssignTeamAppUser")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{teamId}/app-users/{appUserId}"
	localVarPath = strings.Replace(localVarPath, "{"+"teamId"+"}", url.PathEscape(parameterValueToString(r.teamId, "teamId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appUserId"+"}", url.PathEscape(parameterValueToString(r.appUserId, "appUserId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiUpdateTeamRequest struct {
	ctx               context.Context
	ApiService        TeamAPI
	teamId            string
	teamUpdateRequest *TeamUpdateRequest
}

func (r ApiUpdateTeamRequest) TeamUpdateRequest(teamUpdateRequest TeamUpdateRequest) ApiUpdateTeamRequest {
	r.teamUpdateRequest = &teamUpdateRequest
	return r
}

func (r ApiUpdateTeamRequest) Execute() (*TeamViewResponse, *http.Response, error) {
	return r.ApiService.UpdateTeamExecute(r)
}

/*
UpdateTeam Update Team

Updates a Team

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param teamId
	@return ApiUpdateTeamRequest
*/
func (a *TeamAPIService) UpdateTeam(ctx context.Context, teamId string) ApiUpdateTeamRequest {
	return ApiUpdateTeamRequest{
		ApiService: a,
		ctx:        ctx,
		teamId:     teamId,
	}
}

// Execute executes the request
//
//	@return TeamViewResponse
func (a *TeamAPIService) UpdateTeamExecute(r ApiUpdateTeamRequest) (*TeamViewResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *TeamViewResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamAPIService.UpdateTeam")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{teamId}"
	localVarPath = strings.Replace(localVarPath, "{"+"teamId"+"}", url.PathEscape(parameterValueToString(r.teamId, "teamId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.teamUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTeamAppUserRequest struct {
	ctx                  context.Context
	ApiService           TeamAPI
	teamId               string
	appUserId            string
	appUserAssignRequest *AppUserAssignRequest
}

func (r ApiUpdateTeamAppUserRequest) AppUserAssignRequest(appUserAssignRequest AppUserAssignRequest) ApiUpdateTeamAppUserRequest {
	r.appUserAssignRequest = &appUserAssignRequest
	return r
}

func (r ApiUpdateTeamAppUserRequest) Execute() (*AppUserAssignResponse, *http.Response, error) {
	return r.ApiService.UpdateTeamAppUserExecute(r)
}

/*
UpdateTeamAppUser Update App User Team Assignment

Update an App User's assignment on a Team

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param teamId
	@param appUserId
	@return ApiUpdateTeamAppUserRequest
*/
func (a *TeamAPIService) UpdateTeamAppUser(ctx context.Context, teamId string, appUserId string) ApiUpdateTeamAppUserRequest {
	return ApiUpdateTeamAppUserRequest{
		ApiService: a,
		ctx:        ctx,
		teamId:     teamId,
		appUserId:  appUserId,
	}
}

// Execute executes the request
//
//	@return AppUserAssignResponse
func (a *TeamAPIService) UpdateTeamAppUserExecute(r ApiUpdateTeamAppUserRequest) (*AppUserAssignResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AppUserAssignResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamAPIService.UpdateTeamAppUser")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/teams/{teamId}/app-users/{appUserId}"
	localVarPath = strings.Replace(localVarPath, "{"+"teamId"+"}", url.PathEscape(parameterValueToString(r.teamId, "teamId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"appUserId"+"}", url.PathEscape(parameterValueToString(r.appUserId, "appUserId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appUserAssignRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
