/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// AppPolicyGroup the model 'AppPolicyGroup'
type AppPolicyGroup string

// List of AppPolicyGroup
const (
	APPPOLICYGROUP_CORE         AppPolicyGroup = "Core"
	APPPOLICYGROUP_CLOUD        AppPolicyGroup = "Cloud"
	APPPOLICYGROUP_APPLICATIONS AppPolicyGroup = "Applications"
)

// All allowed values of AppPolicyGroup enum
var AllowedAppPolicyGroupEnumValues = []AppPolicyGroup{
	"Core",
	"Cloud",
	"Applications",
}

func (v *AppPolicyGroup) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AppPolicyGroup(value)
	for _, existing := range AllowedAppPolicyGroupEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AppPolicyGroup", value)
}

// NewAppPolicyGroupFromValue returns a pointer to a valid AppPolicyGroup
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppPolicyGroupFromValue(v string) (*AppPolicyGroup, error) {
	ev := AppPolicyGroup(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppPolicyGroup: valid values are %v", v, AllowedAppPolicyGroupEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppPolicyGroup) IsValid() bool {
	for _, existing := range AllowedAppPolicyGroupEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppPolicyGroup value
func (v AppPolicyGroup) Ptr() *AppPolicyGroup {
	return &v
}
