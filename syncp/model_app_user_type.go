/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// AppUserType the model 'AppUserType'
type AppUserType string

// List of AppUserType
const (
	APPUSERTYPE_PERSON               AppUserType = "Person"
	APPUSERTYPE_APP_SERVICE_ACCOUNT  AppUserType = "AppServiceAccount"
	APPUSERTYPE_TEAM_SERVICE_ACCOUNT AppUserType = "TeamServiceAccount"
)

// All allowed values of AppUserType enum
var AllowedAppUserTypeEnumValues = []AppUserType{
	"Person",
	"AppServiceAccount",
	"TeamServiceAccount",
}

func (v *AppUserType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AppUserType(value)
	for _, existing := range AllowedAppUserTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AppUserType", value)
}

// NewAppUserTypeFromValue returns a pointer to a valid AppUserType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppUserTypeFromValue(v string) (*AppUserType, error) {
	ev := AppUserType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AppUserType: valid values are %v", v, AllowedAppUserTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppUserType) IsValid() bool {
	for _, existing := range AllowedAppUserTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AppUserType value
func (v AppUserType) Ptr() *AppUserType {
	return &v
}
