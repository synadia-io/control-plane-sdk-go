/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// ExportType ExportType defines the type of import/export.
type ExportType string

// List of ExportType
const (
	EXPORTTYPE_STREAM  ExportType = "stream"
	EXPORTTYPE_SERVICE ExportType = "service"
)

// All allowed values of ExportType enum
var AllowedExportTypeEnumValues = []ExportType{
	"stream",
	"service",
}

func (v *ExportType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExportType(value)
	for _, existing := range AllowedExportTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExportType", value)
}

// NewExportTypeFromValue returns a pointer to a valid ExportType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExportTypeFromValue(v string) (*ExportType, error) {
	ev := ExportType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExportType: valid values are %v", v, AllowedExportTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExportType) IsValid() bool {
	for _, existing := range AllowedExportTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExportType value
func (v ExportType) Ptr() *ExportType {
	return &v
}
