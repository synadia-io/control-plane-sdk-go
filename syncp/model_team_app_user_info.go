/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"fmt"
)

// checks if the TeamAppUserInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamAppUserInfo{}

// TeamAppUserInfo struct for TeamAppUserInfo
type TeamAppUserInfo struct {
	Id     string `json:"id"`
	RoleId string `json:"role_id"`
}

type _TeamAppUserInfo TeamAppUserInfo

// NewTeamAppUserInfo instantiates a new TeamAppUserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamAppUserInfo(id string, roleId string) *TeamAppUserInfo {
	this := TeamAppUserInfo{}
	this.Id = id
	this.RoleId = roleId
	return &this
}

// NewTeamAppUserInfoWithDefaults instantiates a new TeamAppUserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamAppUserInfoWithDefaults() *TeamAppUserInfo {
	this := TeamAppUserInfo{}
	return &this
}

// GetId returns the Id field value
func (o *TeamAppUserInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TeamAppUserInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TeamAppUserInfo) SetId(v string) {
	o.Id = v
}

// GetRoleId returns the RoleId field value
func (o *TeamAppUserInfo) GetRoleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value
// and a boolean to check if the value has been set.
func (o *TeamAppUserInfo) GetRoleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RoleId, true
}

// SetRoleId sets field value
func (o *TeamAppUserInfo) SetRoleId(v string) {
	o.RoleId = v
}

func (o TeamAppUserInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamAppUserInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["role_id"] = o.RoleId
	return toSerialize, nil
}

func (o *TeamAppUserInfo) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"role_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTeamAppUserInfo := _TeamAppUserInfo{}

	err = json.Unmarshal(bytes, &varTeamAppUserInfo)

	if err != nil {
		return err
	}

	*o = TeamAppUserInfo(varTeamAppUserInfo)

	return err
}

type NullableTeamAppUserInfo struct {
	value *TeamAppUserInfo
	isSet bool
}

func (v NullableTeamAppUserInfo) Get() *TeamAppUserInfo {
	return v.value
}

func (v *NullableTeamAppUserInfo) Set(val *TeamAppUserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamAppUserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamAppUserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamAppUserInfo(val *TeamAppUserInfo) *NullableTeamAppUserInfo {
	return &NullableTeamAppUserInfo{value: val, isSet: true}
}

func (v NullableTeamAppUserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamAppUserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
