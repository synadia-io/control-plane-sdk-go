/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"fmt"
)

// checks if the JSCommonStreamConfigRepublish type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSCommonStreamConfigRepublish{}

// JSCommonStreamConfigRepublish struct for JSCommonStreamConfigRepublish
type JSCommonStreamConfigRepublish struct {
	Dest        string  `json:"dest"`
	HeadersOnly *bool   `json:"headers_only,omitempty"`
	Src         *string `json:"src,omitempty"`
}

type _JSCommonStreamConfigRepublish JSCommonStreamConfigRepublish

// NewJSCommonStreamConfigRepublish instantiates a new JSCommonStreamConfigRepublish object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSCommonStreamConfigRepublish(dest string) *JSCommonStreamConfigRepublish {
	this := JSCommonStreamConfigRepublish{}
	this.Dest = dest
	return &this
}

// NewJSCommonStreamConfigRepublishWithDefaults instantiates a new JSCommonStreamConfigRepublish object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSCommonStreamConfigRepublishWithDefaults() *JSCommonStreamConfigRepublish {
	this := JSCommonStreamConfigRepublish{}
	return &this
}

// GetDest returns the Dest field value
func (o *JSCommonStreamConfigRepublish) GetDest() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Dest
}

// GetDestOk returns a tuple with the Dest field value
// and a boolean to check if the value has been set.
func (o *JSCommonStreamConfigRepublish) GetDestOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dest, true
}

// SetDest sets field value
func (o *JSCommonStreamConfigRepublish) SetDest(v string) {
	o.Dest = v
}

// GetHeadersOnly returns the HeadersOnly field value if set, zero value otherwise.
func (o *JSCommonStreamConfigRepublish) GetHeadersOnly() bool {
	if o == nil || IsNil(o.HeadersOnly) {
		var ret bool
		return ret
	}
	return *o.HeadersOnly
}

// GetHeadersOnlyOk returns a tuple with the HeadersOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSCommonStreamConfigRepublish) GetHeadersOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.HeadersOnly) {
		return nil, false
	}
	return o.HeadersOnly, true
}

// HasHeadersOnly returns a boolean if a field has been set.
func (o *JSCommonStreamConfigRepublish) HasHeadersOnly() bool {
	if o != nil && !IsNil(o.HeadersOnly) {
		return true
	}

	return false
}

// SetHeadersOnly gets a reference to the given bool and assigns it to the HeadersOnly field.
func (o *JSCommonStreamConfigRepublish) SetHeadersOnly(v bool) {
	o.HeadersOnly = &v
}

// GetSrc returns the Src field value if set, zero value otherwise.
func (o *JSCommonStreamConfigRepublish) GetSrc() string {
	if o == nil || IsNil(o.Src) {
		var ret string
		return ret
	}
	return *o.Src
}

// GetSrcOk returns a tuple with the Src field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSCommonStreamConfigRepublish) GetSrcOk() (*string, bool) {
	if o == nil || IsNil(o.Src) {
		return nil, false
	}
	return o.Src, true
}

// HasSrc returns a boolean if a field has been set.
func (o *JSCommonStreamConfigRepublish) HasSrc() bool {
	if o != nil && !IsNil(o.Src) {
		return true
	}

	return false
}

// SetSrc gets a reference to the given string and assigns it to the Src field.
func (o *JSCommonStreamConfigRepublish) SetSrc(v string) {
	o.Src = &v
}

func (o JSCommonStreamConfigRepublish) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSCommonStreamConfigRepublish) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dest"] = o.Dest
	if !IsNil(o.HeadersOnly) {
		toSerialize["headers_only"] = o.HeadersOnly
	}
	if !IsNil(o.Src) {
		toSerialize["src"] = o.Src
	}
	return toSerialize, nil
}

func (o *JSCommonStreamConfigRepublish) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dest",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJSCommonStreamConfigRepublish := _JSCommonStreamConfigRepublish{}

	err = json.Unmarshal(bytes, &varJSCommonStreamConfigRepublish)

	if err != nil {
		return err
	}

	*o = JSCommonStreamConfigRepublish(varJSCommonStreamConfigRepublish)

	return err
}

type NullableJSCommonStreamConfigRepublish struct {
	value *JSCommonStreamConfigRepublish
	isSet bool
}

func (v NullableJSCommonStreamConfigRepublish) Get() *JSCommonStreamConfigRepublish {
	return v.value
}

func (v *NullableJSCommonStreamConfigRepublish) Set(val *JSCommonStreamConfigRepublish) {
	v.value = val
	v.isSet = true
}

func (v NullableJSCommonStreamConfigRepublish) IsSet() bool {
	return v.isSet
}

func (v *NullableJSCommonStreamConfigRepublish) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSCommonStreamConfigRepublish(val *JSCommonStreamConfigRepublish) *NullableJSCommonStreamConfigRepublish {
	return &NullableJSCommonStreamConfigRepublish{value: val, isSet: true}
}

func (v NullableJSCommonStreamConfigRepublish) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSCommonStreamConfigRepublish) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
