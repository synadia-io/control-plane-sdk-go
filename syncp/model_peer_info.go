/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"fmt"
)

// checks if the PeerInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PeerInfo{}

// PeerInfo PeerInfo shows information about all the peers in the cluster that are supporting the stream or consumer.
type PeerInfo struct {
	Active  int64  `json:"active"`
	Current bool   `json:"current"`
	Lag     *int32 `json:"lag,omitempty"`
	Name    string `json:"name"`
	Offline *bool  `json:"offline,omitempty"`
}

type _PeerInfo PeerInfo

// NewPeerInfo instantiates a new PeerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPeerInfo(active int64, current bool, name string) *PeerInfo {
	this := PeerInfo{}
	this.Active = active
	this.Current = current
	this.Name = name
	return &this
}

// NewPeerInfoWithDefaults instantiates a new PeerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPeerInfoWithDefaults() *PeerInfo {
	this := PeerInfo{}
	return &this
}

// GetActive returns the Active field value
func (o *PeerInfo) GetActive() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Active
}

// GetActiveOk returns a tuple with the Active field value
// and a boolean to check if the value has been set.
func (o *PeerInfo) GetActiveOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Active, true
}

// SetActive sets field value
func (o *PeerInfo) SetActive(v int64) {
	o.Active = v
}

// GetCurrent returns the Current field value
func (o *PeerInfo) GetCurrent() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Current
}

// GetCurrentOk returns a tuple with the Current field value
// and a boolean to check if the value has been set.
func (o *PeerInfo) GetCurrentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Current, true
}

// SetCurrent sets field value
func (o *PeerInfo) SetCurrent(v bool) {
	o.Current = v
}

// GetLag returns the Lag field value if set, zero value otherwise.
func (o *PeerInfo) GetLag() int32 {
	if o == nil || IsNil(o.Lag) {
		var ret int32
		return ret
	}
	return *o.Lag
}

// GetLagOk returns a tuple with the Lag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeerInfo) GetLagOk() (*int32, bool) {
	if o == nil || IsNil(o.Lag) {
		return nil, false
	}
	return o.Lag, true
}

// HasLag returns a boolean if a field has been set.
func (o *PeerInfo) HasLag() bool {
	if o != nil && !IsNil(o.Lag) {
		return true
	}

	return false
}

// SetLag gets a reference to the given int32 and assigns it to the Lag field.
func (o *PeerInfo) SetLag(v int32) {
	o.Lag = &v
}

// GetName returns the Name field value
func (o *PeerInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *PeerInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *PeerInfo) SetName(v string) {
	o.Name = v
}

// GetOffline returns the Offline field value if set, zero value otherwise.
func (o *PeerInfo) GetOffline() bool {
	if o == nil || IsNil(o.Offline) {
		var ret bool
		return ret
	}
	return *o.Offline
}

// GetOfflineOk returns a tuple with the Offline field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PeerInfo) GetOfflineOk() (*bool, bool) {
	if o == nil || IsNil(o.Offline) {
		return nil, false
	}
	return o.Offline, true
}

// HasOffline returns a boolean if a field has been set.
func (o *PeerInfo) HasOffline() bool {
	if o != nil && !IsNil(o.Offline) {
		return true
	}

	return false
}

// SetOffline gets a reference to the given bool and assigns it to the Offline field.
func (o *PeerInfo) SetOffline(v bool) {
	o.Offline = &v
}

func (o PeerInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PeerInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["active"] = o.Active
	toSerialize["current"] = o.Current
	if !IsNil(o.Lag) {
		toSerialize["lag"] = o.Lag
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Offline) {
		toSerialize["offline"] = o.Offline
	}
	return toSerialize, nil
}

func (o *PeerInfo) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"active",
		"current",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPeerInfo := _PeerInfo{}

	err = json.Unmarshal(bytes, &varPeerInfo)

	if err != nil {
		return err
	}

	*o = PeerInfo(varPeerInfo)

	return err
}

type NullablePeerInfo struct {
	value *PeerInfo
	isSet bool
}

func (v NullablePeerInfo) Get() *PeerInfo {
	return v.value
}

func (v *NullablePeerInfo) Set(val *PeerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePeerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePeerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePeerInfo(val *PeerInfo) *NullablePeerInfo {
	return &NullablePeerInfo{value: val, isSet: true}
}

func (v NullablePeerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePeerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
