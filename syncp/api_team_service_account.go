/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type TeamServiceAccountAPI interface {

	/*
		CreateTeamServiceAccountToken Create Acess Token for Team Service Account

		Create Acess Token for Team Service Account

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param serviceAccountId
		@return ApiCreateTeamServiceAccountTokenRequest
	*/
	CreateTeamServiceAccountToken(ctx context.Context, serviceAccountId string) ApiCreateTeamServiceAccountTokenRequest

	// CreateTeamServiceAccountTokenExecute executes the request
	//  @return AppUserAccessTokenCreateResponse
	CreateTeamServiceAccountTokenExecute(r ApiCreateTeamServiceAccountTokenRequest) (*AppUserAccessTokenCreateResponse, *http.Response, error)

	/*
		DeleteTeamServiceAccount Delete Team Service Account

		Delete Team Service Account

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param serviceAccountId
		@return ApiDeleteTeamServiceAccountRequest
	*/
	DeleteTeamServiceAccount(ctx context.Context, serviceAccountId string) ApiDeleteTeamServiceAccountRequest

	// DeleteTeamServiceAccountExecute executes the request
	DeleteTeamServiceAccountExecute(r ApiDeleteTeamServiceAccountRequest) (*http.Response, error)

	/*
		GetTeamServiceAccount Get Team Service Account

		Get Team Service Account

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param serviceAccountId
		@return ApiGetTeamServiceAccountRequest
	*/
	GetTeamServiceAccount(ctx context.Context, serviceAccountId string) ApiGetTeamServiceAccountRequest

	// GetTeamServiceAccountExecute executes the request
	//  @return ServiceAccountViewResponse
	GetTeamServiceAccountExecute(r ApiGetTeamServiceAccountRequest) (*ServiceAccountViewResponse, *http.Response, error)

	/*
		ListTeamServiceAccountTokens List Access Tokens for Team Service Account

		List Access Tokens for Team Service Account

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param serviceAccountId
		@return ApiListTeamServiceAccountTokensRequest
	*/
	ListTeamServiceAccountTokens(ctx context.Context, serviceAccountId string) ApiListTeamServiceAccountTokensRequest

	// ListTeamServiceAccountTokensExecute executes the request
	//  @return AppUserAccessTokenListResponse
	ListTeamServiceAccountTokensExecute(r ApiListTeamServiceAccountTokensRequest) (*AppUserAccessTokenListResponse, *http.Response, error)

	/*
		UpdateTeamServiceAccount Update Team Service Account

		Update Team Service Account

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param serviceAccountId
		@return ApiUpdateTeamServiceAccountRequest
	*/
	UpdateTeamServiceAccount(ctx context.Context, serviceAccountId string) ApiUpdateTeamServiceAccountRequest

	// UpdateTeamServiceAccountExecute executes the request
	//  @return ServiceAccountViewResponse
	UpdateTeamServiceAccountExecute(r ApiUpdateTeamServiceAccountRequest) (*ServiceAccountViewResponse, *http.Response, error)
}

// TeamServiceAccountAPIService TeamServiceAccountAPI service
type TeamServiceAccountAPIService service

type ApiCreateTeamServiceAccountTokenRequest struct {
	ctx                             context.Context
	ApiService                      TeamServiceAccountAPI
	serviceAccountId                string
	appUserAccessTokenCreateRequest *AppUserAccessTokenCreateRequest
}

func (r ApiCreateTeamServiceAccountTokenRequest) AppUserAccessTokenCreateRequest(appUserAccessTokenCreateRequest AppUserAccessTokenCreateRequest) ApiCreateTeamServiceAccountTokenRequest {
	r.appUserAccessTokenCreateRequest = &appUserAccessTokenCreateRequest
	return r
}

func (r ApiCreateTeamServiceAccountTokenRequest) Execute() (*AppUserAccessTokenCreateResponse, *http.Response, error) {
	return r.ApiService.CreateTeamServiceAccountTokenExecute(r)
}

/*
CreateTeamServiceAccountToken Create Acess Token for Team Service Account

Create Acess Token for Team Service Account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceAccountId
	@return ApiCreateTeamServiceAccountTokenRequest
*/
func (a *TeamServiceAccountAPIService) CreateTeamServiceAccountToken(ctx context.Context, serviceAccountId string) ApiCreateTeamServiceAccountTokenRequest {
	return ApiCreateTeamServiceAccountTokenRequest{
		ApiService:       a,
		ctx:              ctx,
		serviceAccountId: serviceAccountId,
	}
}

// Execute executes the request
//
//	@return AppUserAccessTokenCreateResponse
func (a *TeamServiceAccountAPIService) CreateTeamServiceAccountTokenExecute(r ApiCreateTeamServiceAccountTokenRequest) (*AppUserAccessTokenCreateResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AppUserAccessTokenCreateResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamServiceAccountAPIService.CreateTeamServiceAccountToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service-accounts/team/{serviceAccountId}/tokens"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAccountId"+"}", url.PathEscape(parameterValueToString(r.serviceAccountId, "serviceAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appUserAccessTokenCreateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteTeamServiceAccountRequest struct {
	ctx              context.Context
	ApiService       TeamServiceAccountAPI
	serviceAccountId string
}

func (r ApiDeleteTeamServiceAccountRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTeamServiceAccountExecute(r)
}

/*
DeleteTeamServiceAccount Delete Team Service Account

Delete Team Service Account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceAccountId
	@return ApiDeleteTeamServiceAccountRequest
*/
func (a *TeamServiceAccountAPIService) DeleteTeamServiceAccount(ctx context.Context, serviceAccountId string) ApiDeleteTeamServiceAccountRequest {
	return ApiDeleteTeamServiceAccountRequest{
		ApiService:       a,
		ctx:              ctx,
		serviceAccountId: serviceAccountId,
	}
}

// Execute executes the request
func (a *TeamServiceAccountAPIService) DeleteTeamServiceAccountExecute(r ApiDeleteTeamServiceAccountRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamServiceAccountAPIService.DeleteTeamServiceAccount")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service-accounts/team/{serviceAccountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAccountId"+"}", url.PathEscape(parameterValueToString(r.serviceAccountId, "serviceAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTeamServiceAccountRequest struct {
	ctx              context.Context
	ApiService       TeamServiceAccountAPI
	serviceAccountId string
}

func (r ApiGetTeamServiceAccountRequest) Execute() (*ServiceAccountViewResponse, *http.Response, error) {
	return r.ApiService.GetTeamServiceAccountExecute(r)
}

/*
GetTeamServiceAccount Get Team Service Account

Get Team Service Account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceAccountId
	@return ApiGetTeamServiceAccountRequest
*/
func (a *TeamServiceAccountAPIService) GetTeamServiceAccount(ctx context.Context, serviceAccountId string) ApiGetTeamServiceAccountRequest {
	return ApiGetTeamServiceAccountRequest{
		ApiService:       a,
		ctx:              ctx,
		serviceAccountId: serviceAccountId,
	}
}

// Execute executes the request
//
//	@return ServiceAccountViewResponse
func (a *TeamServiceAccountAPIService) GetTeamServiceAccountExecute(r ApiGetTeamServiceAccountRequest) (*ServiceAccountViewResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceAccountViewResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamServiceAccountAPIService.GetTeamServiceAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service-accounts/team/{serviceAccountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAccountId"+"}", url.PathEscape(parameterValueToString(r.serviceAccountId, "serviceAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListTeamServiceAccountTokensRequest struct {
	ctx              context.Context
	ApiService       TeamServiceAccountAPI
	serviceAccountId string
}

func (r ApiListTeamServiceAccountTokensRequest) Execute() (*AppUserAccessTokenListResponse, *http.Response, error) {
	return r.ApiService.ListTeamServiceAccountTokensExecute(r)
}

/*
ListTeamServiceAccountTokens List Access Tokens for Team Service Account

List Access Tokens for Team Service Account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceAccountId
	@return ApiListTeamServiceAccountTokensRequest
*/
func (a *TeamServiceAccountAPIService) ListTeamServiceAccountTokens(ctx context.Context, serviceAccountId string) ApiListTeamServiceAccountTokensRequest {
	return ApiListTeamServiceAccountTokensRequest{
		ApiService:       a,
		ctx:              ctx,
		serviceAccountId: serviceAccountId,
	}
}

// Execute executes the request
//
//	@return AppUserAccessTokenListResponse
func (a *TeamServiceAccountAPIService) ListTeamServiceAccountTokensExecute(r ApiListTeamServiceAccountTokensRequest) (*AppUserAccessTokenListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AppUserAccessTokenListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamServiceAccountAPIService.ListTeamServiceAccountTokens")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service-accounts/team/{serviceAccountId}/tokens"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAccountId"+"}", url.PathEscape(parameterValueToString(r.serviceAccountId, "serviceAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTeamServiceAccountRequest struct {
	ctx                         context.Context
	ApiService                  TeamServiceAccountAPI
	serviceAccountId            string
	serviceAccountUpdateRequest *ServiceAccountUpdateRequest
}

func (r ApiUpdateTeamServiceAccountRequest) ServiceAccountUpdateRequest(serviceAccountUpdateRequest ServiceAccountUpdateRequest) ApiUpdateTeamServiceAccountRequest {
	r.serviceAccountUpdateRequest = &serviceAccountUpdateRequest
	return r
}

func (r ApiUpdateTeamServiceAccountRequest) Execute() (*ServiceAccountViewResponse, *http.Response, error) {
	return r.ApiService.UpdateTeamServiceAccountExecute(r)
}

/*
UpdateTeamServiceAccount Update Team Service Account

Update Team Service Account

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param serviceAccountId
	@return ApiUpdateTeamServiceAccountRequest
*/
func (a *TeamServiceAccountAPIService) UpdateTeamServiceAccount(ctx context.Context, serviceAccountId string) ApiUpdateTeamServiceAccountRequest {
	return ApiUpdateTeamServiceAccountRequest{
		ApiService:       a,
		ctx:              ctx,
		serviceAccountId: serviceAccountId,
	}
}

// Execute executes the request
//
//	@return ServiceAccountViewResponse
func (a *TeamServiceAccountAPIService) UpdateTeamServiceAccountExecute(r ApiUpdateTeamServiceAccountRequest) (*ServiceAccountViewResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *ServiceAccountViewResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamServiceAccountAPIService.UpdateTeamServiceAccount")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service-accounts/team/{serviceAccountId}"
	localVarPath = strings.Replace(localVarPath, "{"+"serviceAccountId"+"}", url.PathEscape(parameterValueToString(r.serviceAccountId, "serviceAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.serviceAccountUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
