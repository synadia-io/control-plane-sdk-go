/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"fmt"
)

// checks if the TeamLimitsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamLimitsResponse{}

// TeamLimitsResponse struct for TeamLimitsResponse
type TeamLimitsResponse struct {
	Allocated TeamLimits `json:"allocated"`
	Available TeamLimits `json:"available"`
	Total     TeamLimits `json:"total"`
}

type _TeamLimitsResponse TeamLimitsResponse

// NewTeamLimitsResponse instantiates a new TeamLimitsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamLimitsResponse(allocated TeamLimits, available TeamLimits, total TeamLimits) *TeamLimitsResponse {
	this := TeamLimitsResponse{}
	this.Allocated = allocated
	this.Available = available
	this.Total = total
	return &this
}

// NewTeamLimitsResponseWithDefaults instantiates a new TeamLimitsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamLimitsResponseWithDefaults() *TeamLimitsResponse {
	this := TeamLimitsResponse{}
	return &this
}

// GetAllocated returns the Allocated field value
func (o *TeamLimitsResponse) GetAllocated() TeamLimits {
	if o == nil {
		var ret TeamLimits
		return ret
	}

	return o.Allocated
}

// GetAllocatedOk returns a tuple with the Allocated field value
// and a boolean to check if the value has been set.
func (o *TeamLimitsResponse) GetAllocatedOk() (*TeamLimits, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Allocated, true
}

// SetAllocated sets field value
func (o *TeamLimitsResponse) SetAllocated(v TeamLimits) {
	o.Allocated = v
}

// GetAvailable returns the Available field value
func (o *TeamLimitsResponse) GetAvailable() TeamLimits {
	if o == nil {
		var ret TeamLimits
		return ret
	}

	return o.Available
}

// GetAvailableOk returns a tuple with the Available field value
// and a boolean to check if the value has been set.
func (o *TeamLimitsResponse) GetAvailableOk() (*TeamLimits, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Available, true
}

// SetAvailable sets field value
func (o *TeamLimitsResponse) SetAvailable(v TeamLimits) {
	o.Available = v
}

// GetTotal returns the Total field value
func (o *TeamLimitsResponse) GetTotal() TeamLimits {
	if o == nil {
		var ret TeamLimits
		return ret
	}

	return o.Total
}

// GetTotalOk returns a tuple with the Total field value
// and a boolean to check if the value has been set.
func (o *TeamLimitsResponse) GetTotalOk() (*TeamLimits, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Total, true
}

// SetTotal sets field value
func (o *TeamLimitsResponse) SetTotal(v TeamLimits) {
	o.Total = v
}

func (o TeamLimitsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamLimitsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["allocated"] = o.Allocated
	toSerialize["available"] = o.Available
	toSerialize["total"] = o.Total
	return toSerialize, nil
}

func (o *TeamLimitsResponse) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"allocated",
		"available",
		"total",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTeamLimitsResponse := _TeamLimitsResponse{}

	err = json.Unmarshal(bytes, &varTeamLimitsResponse)

	if err != nil {
		return err
	}

	*o = TeamLimitsResponse(varTeamLimitsResponse)

	return err
}

type NullableTeamLimitsResponse struct {
	value *TeamLimitsResponse
	isSet bool
}

func (v NullableTeamLimitsResponse) Get() *TeamLimitsResponse {
	return v.value
}

func (v *NullableTeamLimitsResponse) Set(val *TeamLimitsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamLimitsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamLimitsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamLimitsResponse(val *TeamLimitsResponse) *NullableTeamLimitsResponse {
	return &NullableTeamLimitsResponse{value: val, isSet: true}
}

func (v NullableTeamLimitsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamLimitsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
