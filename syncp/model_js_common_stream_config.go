/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

// checks if the JSCommonStreamConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSCommonStreamConfig{}

// JSCommonStreamConfig struct for JSCommonStreamConfig
type JSCommonStreamConfig struct {
	AllowDirect          bool                    `json:"allow_direct"`
	AllowRollupHdrs      bool                    `json:"allow_rollup_hdrs"`
	Compression          *S2Compression          `json:"compression,omitempty"`
	DenyDelete           bool                    `json:"deny_delete"`
	DenyPurge            bool                    `json:"deny_purge"`
	Description          *string                 `json:"description,omitempty"`
	Discard              DiscardPolicy           `json:"discard"`
	DiscardNewPerSubject *bool                   `json:"discard_new_per_subject,omitempty"`
	DuplicateWindow      *int64                  `json:"duplicate_window,omitempty"`
	FirstSeq             *uint64                 `json:"first_seq,omitempty"`
	MaxAge               int64                   `json:"max_age"`
	MaxBytes             int64                   `json:"max_bytes"`
	MaxConsumers         int64                   `json:"max_consumers"`
	MaxMsgSize           *int64                  `json:"max_msg_size,omitempty"`
	MaxMsgs              int64                   `json:"max_msgs"`
	MaxMsgsPerSubject    int64                   `json:"max_msgs_per_subject"`
	Metadata             map[string]string       `json:"metadata,omitempty"`
	Name                 string                  `json:"name"`
	NoAck                *bool                   `json:"no_ack,omitempty"`
	NumReplicas          int64                   `json:"num_replicas"`
	Placement            *Placement              `json:"placement,omitempty"`
	Republish            *RePublish              `json:"republish,omitempty"`
	Retention            RetentionPolicy         `json:"retention"`
	Sealed               bool                    `json:"sealed"`
	Sources              []StreamSource          `json:"sources,omitempty"`
	Storage              StorageType             `json:"storage"`
	SubjectTransform     *SubjectTransformConfig `json:"subject_transform,omitempty"`
	TemplateOwner        *string                 `json:"template_owner,omitempty"`
}

func (o JSCommonStreamConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["allow_direct"] = o.AllowDirect
	toSerialize["allow_rollup_hdrs"] = o.AllowRollupHdrs
	if o.Compression != nil {
		toSerialize["compression"] = o.Compression
	}
	toSerialize["deny_delete"] = o.DenyDelete
	toSerialize["deny_purge"] = o.DenyPurge
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	toSerialize["discard"] = o.Discard
	if o.DiscardNewPerSubject != nil {
		toSerialize["discard_new_per_subject"] = o.DiscardNewPerSubject
	}
	if o.DuplicateWindow != nil {
		toSerialize["duplicate_window"] = o.DuplicateWindow
	}
	if o.FirstSeq != nil {
		toSerialize["first_seq"] = o.FirstSeq
	}
	toSerialize["max_age"] = o.MaxAge
	toSerialize["max_bytes"] = o.MaxBytes
	toSerialize["max_consumers"] = o.MaxConsumers
	if o.MaxMsgSize != nil {
		toSerialize["max_msg_size"] = o.MaxMsgSize
	}
	toSerialize["max_msgs"] = o.MaxMsgs
	toSerialize["max_msgs_per_subject"] = o.MaxMsgsPerSubject
	if len(o.Metadata) != 0 {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["name"] = o.Name
	if o.NoAck != nil {
		toSerialize["no_ack"] = o.NoAck
	}
	toSerialize["num_replicas"] = o.NumReplicas
	if o.Placement != nil {
		toSerialize["placement"] = o.Placement
	}
	if o.Republish != nil {
		toSerialize["republish"] = o.Republish
	}
	toSerialize["retention"] = o.Retention
	toSerialize["sealed"] = o.Sealed
	if len(o.Sources) != 0 {
		toSerialize["sources"] = o.Sources
	}
	toSerialize["storage"] = o.Storage
	if o.SubjectTransform != nil {
		toSerialize["subject_transform"] = o.SubjectTransform
	}
	if o.TemplateOwner != nil {
		toSerialize["template_owner"] = o.TemplateOwner
	}
	return toSerialize, nil
}
