/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"fmt"
)

// checks if the JSKVBucketViewResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSKVBucketViewResponse{}

// JSKVBucketViewResponse struct for JSKVBucketViewResponse
type JSKVBucketViewResponse struct {
	BucketName string `json:"bucket_name"`
	Bytes      int32  `json:"bytes"`
	Id         string `json:"id"`
	NumValues  int32  `json:"num_values"`
	StreamName string `json:"stream_name"`
}

type _JSKVBucketViewResponse JSKVBucketViewResponse

// NewJSKVBucketViewResponse instantiates a new JSKVBucketViewResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSKVBucketViewResponse(bucketName string, bytes int32, id string, numValues int32, streamName string) *JSKVBucketViewResponse {
	this := JSKVBucketViewResponse{}
	this.BucketName = bucketName
	this.Bytes = bytes
	this.Id = id
	this.NumValues = numValues
	this.StreamName = streamName
	return &this
}

// NewJSKVBucketViewResponseWithDefaults instantiates a new JSKVBucketViewResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSKVBucketViewResponseWithDefaults() *JSKVBucketViewResponse {
	this := JSKVBucketViewResponse{}
	return &this
}

// GetBucketName returns the BucketName field value
func (o *JSKVBucketViewResponse) GetBucketName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
func (o *JSKVBucketViewResponse) GetBucketNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BucketName, true
}

// SetBucketName sets field value
func (o *JSKVBucketViewResponse) SetBucketName(v string) {
	o.BucketName = v
}

// GetBytes returns the Bytes field value
func (o *JSKVBucketViewResponse) GetBytes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Bytes
}

// GetBytesOk returns a tuple with the Bytes field value
// and a boolean to check if the value has been set.
func (o *JSKVBucketViewResponse) GetBytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bytes, true
}

// SetBytes sets field value
func (o *JSKVBucketViewResponse) SetBytes(v int32) {
	o.Bytes = v
}

// GetId returns the Id field value
func (o *JSKVBucketViewResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *JSKVBucketViewResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *JSKVBucketViewResponse) SetId(v string) {
	o.Id = v
}

// GetNumValues returns the NumValues field value
func (o *JSKVBucketViewResponse) GetNumValues() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumValues
}

// GetNumValuesOk returns a tuple with the NumValues field value
// and a boolean to check if the value has been set.
func (o *JSKVBucketViewResponse) GetNumValuesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumValues, true
}

// SetNumValues sets field value
func (o *JSKVBucketViewResponse) SetNumValues(v int32) {
	o.NumValues = v
}

// GetStreamName returns the StreamName field value
func (o *JSKVBucketViewResponse) GetStreamName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StreamName
}

// GetStreamNameOk returns a tuple with the StreamName field value
// and a boolean to check if the value has been set.
func (o *JSKVBucketViewResponse) GetStreamNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreamName, true
}

// SetStreamName sets field value
func (o *JSKVBucketViewResponse) SetStreamName(v string) {
	o.StreamName = v
}

func (o JSKVBucketViewResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSKVBucketViewResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bucket_name"] = o.BucketName
	toSerialize["bytes"] = o.Bytes
	toSerialize["id"] = o.Id
	toSerialize["num_values"] = o.NumValues
	toSerialize["stream_name"] = o.StreamName
	return toSerialize, nil
}

func (o *JSKVBucketViewResponse) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bucket_name",
		"bytes",
		"id",
		"num_values",
		"stream_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJSKVBucketViewResponse := _JSKVBucketViewResponse{}

	err = json.Unmarshal(bytes, &varJSKVBucketViewResponse)

	if err != nil {
		return err
	}

	*o = JSKVBucketViewResponse(varJSKVBucketViewResponse)

	return err
}

type NullableJSKVBucketViewResponse struct {
	value *JSKVBucketViewResponse
	isSet bool
}

func (v NullableJSKVBucketViewResponse) Get() *JSKVBucketViewResponse {
	return v.value
}

func (v *NullableJSKVBucketViewResponse) Set(val *JSKVBucketViewResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableJSKVBucketViewResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableJSKVBucketViewResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSKVBucketViewResponse(val *JSKVBucketViewResponse) *NullableJSKVBucketViewResponse {
	return &NullableJSKVBucketViewResponse{value: val, isSet: true}
}

func (v NullableJSKVBucketViewResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSKVBucketViewResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
