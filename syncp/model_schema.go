/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"time"
)

// checks if the Schema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Schema{}

// Schema struct for Schema
type Schema struct {
	CompatPolicy string `json:"compat_policy"`
	// The schema definition.
	Definition string `json:"definition"`
	// Deleted is a flag to indicate if the schema is deleted.
	Delete *bool `json:"delete,omitempty"`
	// Description of the schema.
	Description string `json:"description"`
	Format      string `json:"format"`
	// Metadata is a map of key-value pairs.
	Metadata map[string]string `json:"metadata"`
	// Unique name of the schema.
	Name string `json:"name"`
	// Revision of the schema.
	Revision int64 `json:"revision"`
	// Timestamp when this schema was added.
	Time time.Time `json:"time"`
	// TODO(jrm): We probably do not need the ID, as we can use subject + version as a compound unique identifier. Unique identifier of the schema. ID string `json:\"id\"`
	Version int64 `json:"version"`
}

func (o Schema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["compat_policy"] = o.CompatPolicy
	toSerialize["definition"] = o.Definition
	if o.Delete != nil {
		toSerialize["delete"] = o.Delete
	}
	toSerialize["description"] = o.Description
	toSerialize["format"] = o.Format
	toSerialize["metadata"] = o.Metadata
	toSerialize["name"] = o.Name
	toSerialize["revision"] = o.Revision
	toSerialize["time"] = o.Time
	toSerialize["version"] = o.Version
	return toSerialize, nil
}
