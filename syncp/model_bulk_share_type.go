/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// BulkShareType the model 'BulkShareType'
type BulkShareType string

// List of BulkShareType
const (
	BULKSHARETYPE_STREAM  BulkShareType = "stream"
	BULKSHARETYPE_SUBJECT BulkShareType = "subject"
)

// All allowed values of BulkShareType enum
var AllowedBulkShareTypeEnumValues = []BulkShareType{
	"stream",
	"subject",
}

func (v *BulkShareType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := BulkShareType(value)
	for _, existing := range AllowedBulkShareTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid BulkShareType", value)
}

// NewBulkShareTypeFromValue returns a pointer to a valid BulkShareType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBulkShareTypeFromValue(v string) (*BulkShareType, error) {
	ev := BulkShareType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for BulkShareType: valid values are %v", v, AllowedBulkShareTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BulkShareType) IsValid() bool {
	for _, existing := range AllowedBulkShareTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to BulkShareType value
func (v BulkShareType) Ptr() *BulkShareType {
	return &v
}
