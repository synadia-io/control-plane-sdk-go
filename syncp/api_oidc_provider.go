/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type OidcProviderAPI interface {

	/*
		CreateOidcProvider Create OIDC Provider

		Creates a new OIDC provider

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiCreateOidcProviderRequest
	*/
	CreateOidcProvider(ctx context.Context) ApiCreateOidcProviderRequest

	// CreateOidcProviderExecute executes the request
	//  @return OidcProviderViewResponse
	CreateOidcProviderExecute(r ApiCreateOidcProviderRequest) (*OidcProviderViewResponse, *http.Response, error)

	/*
		DeleteOidcProvider Delete OIDC Provider

		Deletes an OIDC provider

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param oidcProviderId
		@return ApiDeleteOidcProviderRequest
	*/
	DeleteOidcProvider(ctx context.Context, oidcProviderId string) ApiDeleteOidcProviderRequest

	// DeleteOidcProviderExecute executes the request
	DeleteOidcProviderExecute(r ApiDeleteOidcProviderRequest) (*http.Response, error)

	/*
		GetOidcProvider Get OIDC Provider

		Returns an OIDC provider by ID

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param oidcProviderId
		@return ApiGetOidcProviderRequest
	*/
	GetOidcProvider(ctx context.Context, oidcProviderId string) ApiGetOidcProviderRequest

	// GetOidcProviderExecute executes the request
	//  @return OidcProviderViewResponse
	GetOidcProviderExecute(r ApiGetOidcProviderRequest) (*OidcProviderViewResponse, *http.Response, error)

	/*
		ListOidcDefaultProvider List OIDC Provider Defaults

		Returns a list of OIDC provider defaults

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiListOidcDefaultProviderRequest
	*/
	ListOidcDefaultProvider(ctx context.Context) ApiListOidcDefaultProviderRequest

	// ListOidcDefaultProviderExecute executes the request
	//  @return OidcProviderDefaultsListResponse
	ListOidcDefaultProviderExecute(r ApiListOidcDefaultProviderRequest) (*OidcProviderDefaultsListResponse, *http.Response, error)

	/*
		ListOidcProviders List OIDC Providers

		Returns a list of OIDC providers

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiListOidcProvidersRequest
	*/
	ListOidcProviders(ctx context.Context) ApiListOidcProvidersRequest

	// ListOidcProvidersExecute executes the request
	//  @return OidcProviderListResponse
	ListOidcProvidersExecute(r ApiListOidcProvidersRequest) (*OidcProviderListResponse, *http.Response, error)

	/*
		UpdateOidcProvider Update OIDC Provider

		Updates an OIDC provider

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param oidcProviderId
		@return ApiUpdateOidcProviderRequest
	*/
	UpdateOidcProvider(ctx context.Context, oidcProviderId string) ApiUpdateOidcProviderRequest

	// UpdateOidcProviderExecute executes the request
	//  @return OidcProviderViewResponse
	UpdateOidcProviderExecute(r ApiUpdateOidcProviderRequest) (*OidcProviderViewResponse, *http.Response, error)
}

// OidcProviderAPIService OidcProviderAPI service
type OidcProviderAPIService service

type ApiCreateOidcProviderRequest struct {
	ctx                    context.Context
	ApiService             OidcProviderAPI
	oidcProviderAddRequest *OidcProviderAddRequest
}

func (r ApiCreateOidcProviderRequest) OidcProviderAddRequest(oidcProviderAddRequest OidcProviderAddRequest) ApiCreateOidcProviderRequest {
	r.oidcProviderAddRequest = &oidcProviderAddRequest
	return r
}

func (r ApiCreateOidcProviderRequest) Execute() (*OidcProviderViewResponse, *http.Response, error) {
	return r.ApiService.CreateOidcProviderExecute(r)
}

/*
CreateOidcProvider Create OIDC Provider

Creates a new OIDC provider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiCreateOidcProviderRequest
*/
func (a *OidcProviderAPIService) CreateOidcProvider(ctx context.Context) ApiCreateOidcProviderRequest {
	return ApiCreateOidcProviderRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return OidcProviderViewResponse
func (a *OidcProviderAPIService) CreateOidcProviderExecute(r ApiCreateOidcProviderRequest) (*OidcProviderViewResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OidcProviderViewResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OidcProviderAPIService.CreateOidcProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/beta/oidc-providers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.oidcProviderAddRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteOidcProviderRequest struct {
	ctx            context.Context
	ApiService     OidcProviderAPI
	oidcProviderId string
}

func (r ApiDeleteOidcProviderRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteOidcProviderExecute(r)
}

/*
DeleteOidcProvider Delete OIDC Provider

Deletes an OIDC provider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param oidcProviderId
	@return ApiDeleteOidcProviderRequest
*/
func (a *OidcProviderAPIService) DeleteOidcProvider(ctx context.Context, oidcProviderId string) ApiDeleteOidcProviderRequest {
	return ApiDeleteOidcProviderRequest{
		ApiService:     a,
		ctx:            ctx,
		oidcProviderId: oidcProviderId,
	}
}

// Execute executes the request
func (a *OidcProviderAPIService) DeleteOidcProviderExecute(r ApiDeleteOidcProviderRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OidcProviderAPIService.DeleteOidcProvider")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/beta/oidc-providers/{oidcProviderId}"
	localVarPath = strings.Replace(localVarPath, "{"+"oidcProviderId"+"}", url.PathEscape(parameterValueToString(r.oidcProviderId, "oidcProviderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetOidcProviderRequest struct {
	ctx            context.Context
	ApiService     OidcProviderAPI
	oidcProviderId string
}

func (r ApiGetOidcProviderRequest) Execute() (*OidcProviderViewResponse, *http.Response, error) {
	return r.ApiService.GetOidcProviderExecute(r)
}

/*
GetOidcProvider Get OIDC Provider

Returns an OIDC provider by ID

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param oidcProviderId
	@return ApiGetOidcProviderRequest
*/
func (a *OidcProviderAPIService) GetOidcProvider(ctx context.Context, oidcProviderId string) ApiGetOidcProviderRequest {
	return ApiGetOidcProviderRequest{
		ApiService:     a,
		ctx:            ctx,
		oidcProviderId: oidcProviderId,
	}
}

// Execute executes the request
//
//	@return OidcProviderViewResponse
func (a *OidcProviderAPIService) GetOidcProviderExecute(r ApiGetOidcProviderRequest) (*OidcProviderViewResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OidcProviderViewResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OidcProviderAPIService.GetOidcProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/beta/oidc-providers/{oidcProviderId}"
	localVarPath = strings.Replace(localVarPath, "{"+"oidcProviderId"+"}", url.PathEscape(parameterValueToString(r.oidcProviderId, "oidcProviderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListOidcDefaultProviderRequest struct {
	ctx        context.Context
	ApiService OidcProviderAPI
}

func (r ApiListOidcDefaultProviderRequest) Execute() (*OidcProviderDefaultsListResponse, *http.Response, error) {
	return r.ApiService.ListOidcDefaultProviderExecute(r)
}

/*
ListOidcDefaultProvider List OIDC Provider Defaults

Returns a list of OIDC provider defaults

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListOidcDefaultProviderRequest
*/
func (a *OidcProviderAPIService) ListOidcDefaultProvider(ctx context.Context) ApiListOidcDefaultProviderRequest {
	return ApiListOidcDefaultProviderRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return OidcProviderDefaultsListResponse
func (a *OidcProviderAPIService) ListOidcDefaultProviderExecute(r ApiListOidcDefaultProviderRequest) (*OidcProviderDefaultsListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OidcProviderDefaultsListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OidcProviderAPIService.ListOidcDefaultProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/beta/oidc-providers/defaults"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListOidcProvidersRequest struct {
	ctx        context.Context
	ApiService OidcProviderAPI
}

func (r ApiListOidcProvidersRequest) Execute() (*OidcProviderListResponse, *http.Response, error) {
	return r.ApiService.ListOidcProvidersExecute(r)
}

/*
ListOidcProviders List OIDC Providers

Returns a list of OIDC providers

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiListOidcProvidersRequest
*/
func (a *OidcProviderAPIService) ListOidcProviders(ctx context.Context) ApiListOidcProvidersRequest {
	return ApiListOidcProvidersRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return OidcProviderListResponse
func (a *OidcProviderAPIService) ListOidcProvidersExecute(r ApiListOidcProvidersRequest) (*OidcProviderListResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OidcProviderListResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OidcProviderAPIService.ListOidcProviders")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/beta/oidc-providers"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateOidcProviderRequest struct {
	ctx                       context.Context
	ApiService                OidcProviderAPI
	oidcProviderId            string
	oidcProviderUpdateRequest *OidcProviderUpdateRequest
}

func (r ApiUpdateOidcProviderRequest) OidcProviderUpdateRequest(oidcProviderUpdateRequest OidcProviderUpdateRequest) ApiUpdateOidcProviderRequest {
	r.oidcProviderUpdateRequest = &oidcProviderUpdateRequest
	return r
}

func (r ApiUpdateOidcProviderRequest) Execute() (*OidcProviderViewResponse, *http.Response, error) {
	return r.ApiService.UpdateOidcProviderExecute(r)
}

/*
UpdateOidcProvider Update OIDC Provider

Updates an OIDC provider

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param oidcProviderId
	@return ApiUpdateOidcProviderRequest
*/
func (a *OidcProviderAPIService) UpdateOidcProvider(ctx context.Context, oidcProviderId string) ApiUpdateOidcProviderRequest {
	return ApiUpdateOidcProviderRequest{
		ApiService:     a,
		ctx:            ctx,
		oidcProviderId: oidcProviderId,
	}
}

// Execute executes the request
//
//	@return OidcProviderViewResponse
func (a *OidcProviderAPIService) UpdateOidcProviderExecute(r ApiUpdateOidcProviderRequest) (*OidcProviderViewResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OidcProviderViewResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OidcProviderAPIService.UpdateOidcProvider")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/beta/oidc-providers/{oidcProviderId}"
	localVarPath = strings.Replace(localVarPath, "{"+"oidcProviderId"+"}", url.PathEscape(parameterValueToString(r.oidcProviderId, "oidcProviderId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.oidcProviderUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
