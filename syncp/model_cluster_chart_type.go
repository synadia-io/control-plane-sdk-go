/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"fmt"
)

// ClusterChartType the model 'ClusterChartType'
type ClusterChartType string

// List of ClusterChartType
const (
	CLUSTERCHARTTYPE_NUM_CONNECTIONS               ClusterChartType = "NumConnections"
	CLUSTERCHARTTYPE_NUM_SUBSCRIPTIONS             ClusterChartType = "NumSubscriptions"
	CLUSTERCHARTTYPE_CPU_USAGE                     ClusterChartType = "CPUUsage"
	CLUSTERCHARTTYPE_MEMORY_USAGE                  ClusterChartType = "MemoryUsage"
	CLUSTERCHARTTYPE_NUM_SLOW_CONSUMER             ClusterChartType = "NumSlowConsumer"
	CLUSTERCHARTTYPE_BYTES_SENT                    ClusterChartType = "BytesSent"
	CLUSTERCHARTTYPE_BYTES_RECEIVED                ClusterChartType = "BytesReceived"
	CLUSTERCHARTTYPE_NUM_MESSAGES_SENT             ClusterChartType = "NumMessagesSent"
	CLUSTERCHARTTYPE_NUM_MESSAGES_RECEIVED         ClusterChartType = "NumMessagesReceived"
	CLUSTERCHARTTYPE_GATEWAY_BYTES_SENT            ClusterChartType = "GatewayBytesSent"
	CLUSTERCHARTTYPE_GATEWAY_BYTES_RECEIVED        ClusterChartType = "GatewayBytesReceived"
	CLUSTERCHARTTYPE_GATEWAY_NUM_MESSAGES_SENT     ClusterChartType = "GatewayNumMessagesSent"
	CLUSTERCHARTTYPE_GATEWAY_NUM_MESSAGES_RECEIVED ClusterChartType = "GatewayNumMessagesReceived"
	CLUSTERCHARTTYPE_ROUTE_BYTES_SENT              ClusterChartType = "RouteBytesSent"
	CLUSTERCHARTTYPE_ROUTE_BYTES_RECEIVED          ClusterChartType = "RouteBytesReceived"
	CLUSTERCHARTTYPE_ROUTE_NUM_MESSAGES_SENT       ClusterChartType = "RouteNumMessagesSent"
	CLUSTERCHARTTYPE_ROUTE_NUM_MESSAGES_RECEIVED   ClusterChartType = "RouteNumMessagesReceived"
	CLUSTERCHARTTYPE_ROUTE_BYTES_PENDING           ClusterChartType = "RouteBytesPending"
)

// All allowed values of ClusterChartType enum
var AllowedClusterChartTypeEnumValues = []ClusterChartType{
	"NumConnections",
	"NumSubscriptions",
	"CPUUsage",
	"MemoryUsage",
	"NumSlowConsumer",
	"BytesSent",
	"BytesReceived",
	"NumMessagesSent",
	"NumMessagesReceived",
	"GatewayBytesSent",
	"GatewayBytesReceived",
	"GatewayNumMessagesSent",
	"GatewayNumMessagesReceived",
	"RouteBytesSent",
	"RouteBytesReceived",
	"RouteNumMessagesSent",
	"RouteNumMessagesReceived",
	"RouteBytesPending",
}

func (v *ClusterChartType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ClusterChartType(value)
	for _, existing := range AllowedClusterChartTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ClusterChartType", value)
}

// NewClusterChartTypeFromValue returns a pointer to a valid ClusterChartType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewClusterChartTypeFromValue(v string) (*ClusterChartType, error) {
	ev := ClusterChartType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ClusterChartType: valid values are %v", v, AllowedClusterChartTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ClusterChartType) IsValid() bool {
	for _, existing := range AllowedClusterChartTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ClusterChartType value
func (v ClusterChartType) Ptr() *ClusterChartType {
	return &v
}

type NullableClusterChartType struct {
	value *ClusterChartType
	isSet bool
}

func (v NullableClusterChartType) Get() *ClusterChartType {
	return v.value
}

func (v *NullableClusterChartType) Set(val *ClusterChartType) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterChartType) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterChartType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterChartType(val *ClusterChartType) *NullableClusterChartType {
	return &NullableClusterChartType{value: val, isSet: true}
}

func (v NullableClusterChartType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterChartType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
