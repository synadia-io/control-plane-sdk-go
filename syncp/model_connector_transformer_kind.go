/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// ConnectorTransformerKind the model 'ConnectorTransformerKind'
type ConnectorTransformerKind string

// List of ConnectorTransformerKind
const (
	CONNECTORTRANSFORMERKIND_MAPPING   ConnectorTransformerKind = "mapping"
	CONNECTORTRANSFORMERKIND_COMPOSITE ConnectorTransformerKind = "composite"
	CONNECTORTRANSFORMERKIND_SERVICE   ConnectorTransformerKind = "service"
)

// All allowed values of ConnectorTransformerKind enum
var AllowedConnectorTransformerKindEnumValues = []ConnectorTransformerKind{
	"mapping",
	"composite",
	"service",
}

func (v *ConnectorTransformerKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectorTransformerKind(value)
	for _, existing := range AllowedConnectorTransformerKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectorTransformerKind", value)
}

// NewConnectorTransformerKindFromValue returns a pointer to a valid ConnectorTransformerKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectorTransformerKindFromValue(v string) (*ConnectorTransformerKind, error) {
	ev := ConnectorTransformerKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectorTransformerKind: valid values are %v", v, AllowedConnectorTransformerKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectorTransformerKind) IsValid() bool {
	for _, existing := range AllowedConnectorTransformerKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectorTransformerKind value
func (v ConnectorTransformerKind) Ptr() *ConnectorTransformerKind {
	return &v
}
