/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"fmt"
)

// checks if the DataStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataStats{}

// DataStats DataStats reports how may msg and bytes. Applicable for both sent and received.
type DataStats struct {
	Bytes int64 `json:"bytes"`
	Msgs  int64 `json:"msgs"`
}

type _DataStats DataStats

// NewDataStats instantiates a new DataStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataStats(bytes int64, msgs int64) *DataStats {
	this := DataStats{}
	this.Bytes = bytes
	this.Msgs = msgs
	return &this
}

// NewDataStatsWithDefaults instantiates a new DataStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataStatsWithDefaults() *DataStats {
	this := DataStats{}
	return &this
}

// GetBytes returns the Bytes field value
func (o *DataStats) GetBytes() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Bytes
}

// GetBytesOk returns a tuple with the Bytes field value
// and a boolean to check if the value has been set.
func (o *DataStats) GetBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Bytes, true
}

// SetBytes sets field value
func (o *DataStats) SetBytes(v int64) {
	o.Bytes = v
}

// GetMsgs returns the Msgs field value
func (o *DataStats) GetMsgs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Msgs
}

// GetMsgsOk returns a tuple with the Msgs field value
// and a boolean to check if the value has been set.
func (o *DataStats) GetMsgsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Msgs, true
}

// SetMsgs sets field value
func (o *DataStats) SetMsgs(v int64) {
	o.Msgs = v
}

func (o DataStats) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bytes"] = o.Bytes
	toSerialize["msgs"] = o.Msgs
	return toSerialize, nil
}

func (o *DataStats) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bytes",
		"msgs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataStats := _DataStats{}

	err = json.Unmarshal(bytes, &varDataStats)

	if err != nil {
		return err
	}

	*o = DataStats(varDataStats)

	return err
}

type NullableDataStats struct {
	value *DataStats
	isSet bool
}

func (v NullableDataStats) Get() *DataStats {
	return v.value
}

func (v *NullableDataStats) Set(val *DataStats) {
	v.value = val
	v.isSet = true
}

func (v NullableDataStats) IsSet() bool {
	return v.isSet
}

func (v *NullableDataStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataStats(val *DataStats) *NullableDataStats {
	return &NullableDataStats{value: val, isSet: true}
}

func (v NullableDataStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
