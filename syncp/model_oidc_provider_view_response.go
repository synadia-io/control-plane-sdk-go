/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"time"
)

// checks if the OidcProviderViewResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OidcProviderViewResponse{}

// OidcProviderViewResponse struct for OidcProviderViewResponse
type OidcProviderViewResponse struct {
	AdditionalIdTokenAudiences []string               `json:"additional_id_token_audiences,omitempty"`
	AuthUrl                    *string                `json:"auth_url,omitempty"`
	Claims                     *string                `json:"claims,omitempty"`
	ClaimsSource               *string                `json:"claims_source,omitempty"`
	ClientId                   *string                `json:"client_id,omitempty"`
	Created                    time.Time              `json:"created"`
	Domain                     string                 `json:"domain"`
	Enabled                    bool                   `json:"enabled"`
	Id                         string                 `json:"id"`
	IssuerUrl                  *string                `json:"issuer_url,omitempty"`
	Label                      *string                `json:"label,omitempty"`
	Mapper                     *string                `json:"mapper,omitempty"`
	MicrosoftSubjectSource     *string                `json:"microsoft_subject_source,omitempty"`
	MicrosoftTenant            *string                `json:"microsoft_tenant,omitempty"`
	Provider                   *string                `json:"provider,omitempty"`
	RequestedClaims            *Nullable[interface{}] `json:"requested_claims,omitempty"`
	Scope                      []string               `json:"scope,omitempty"`
	TokenUrl                   *string                `json:"token_url,omitempty"`
}

func (o OidcProviderViewResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if len(o.AdditionalIdTokenAudiences) != 0 {
		toSerialize["additional_id_token_audiences"] = o.AdditionalIdTokenAudiences
	}
	if o.AuthUrl != nil {
		toSerialize["auth_url"] = o.AuthUrl
	}
	if o.Claims != nil {
		toSerialize["claims"] = o.Claims
	}
	if o.ClaimsSource != nil {
		toSerialize["claims_source"] = o.ClaimsSource
	}
	if o.ClientId != nil {
		toSerialize["client_id"] = o.ClientId
	}
	toSerialize["created"] = o.Created
	toSerialize["domain"] = o.Domain
	toSerialize["enabled"] = o.Enabled
	toSerialize["id"] = o.Id
	if o.IssuerUrl != nil {
		toSerialize["issuer_url"] = o.IssuerUrl
	}
	if o.Label != nil {
		toSerialize["label"] = o.Label
	}
	if o.Mapper != nil {
		toSerialize["mapper"] = o.Mapper
	}
	if o.MicrosoftSubjectSource != nil {
		toSerialize["microsoft_subject_source"] = o.MicrosoftSubjectSource
	}
	if o.MicrosoftTenant != nil {
		toSerialize["microsoft_tenant"] = o.MicrosoftTenant
	}
	if o.Provider != nil {
		toSerialize["provider"] = o.Provider
	}
	if o.RequestedClaims != nil && !o.RequestedClaims.IsNull() {
		toSerialize["requested_claims"] = o.RequestedClaims.Val
	}
	if len(o.Scope) != 0 {
		toSerialize["scope"] = o.Scope
	}
	if o.TokenUrl != nil {
		toSerialize["token_url"] = o.TokenUrl
	}
	return toSerialize, nil
}
