/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// ServiceAccountScope the model 'ServiceAccountScope'
type ServiceAccountScope string

// List of ServiceAccountScope
const (
	SERVICEACCOUNTSCOPE_APP  ServiceAccountScope = "App"
	SERVICEACCOUNTSCOPE_TEAM ServiceAccountScope = "Team"
)

// All allowed values of ServiceAccountScope enum
var AllowedServiceAccountScopeEnumValues = []ServiceAccountScope{
	"App",
	"Team",
}

func (v *ServiceAccountScope) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ServiceAccountScope(value)
	for _, existing := range AllowedServiceAccountScopeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ServiceAccountScope", value)
}

// NewServiceAccountScopeFromValue returns a pointer to a valid ServiceAccountScope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewServiceAccountScopeFromValue(v string) (*ServiceAccountScope, error) {
	ev := ServiceAccountScope(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ServiceAccountScope: valid values are %v", v, AllowedServiceAccountScopeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ServiceAccountScope) IsValid() bool {
	for _, existing := range AllowedServiceAccountScopeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ServiceAccountScope value
func (v ServiceAccountScope) Ptr() *ServiceAccountScope {
	return &v
}
