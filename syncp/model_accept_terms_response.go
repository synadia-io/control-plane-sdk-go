/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the AcceptTermsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AcceptTermsResponse{}

// AcceptTermsResponse struct for AcceptTermsResponse
type AcceptTermsResponse struct {
	AcceptedAt time.Time `json:"accepted_at"`
	IpAddress  string    `json:"ip_address"`
}

type _AcceptTermsResponse AcceptTermsResponse

// NewAcceptTermsResponse instantiates a new AcceptTermsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAcceptTermsResponse(acceptedAt time.Time, ipAddress string) *AcceptTermsResponse {
	this := AcceptTermsResponse{}
	this.AcceptedAt = acceptedAt
	this.IpAddress = ipAddress
	return &this
}

// NewAcceptTermsResponseWithDefaults instantiates a new AcceptTermsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAcceptTermsResponseWithDefaults() *AcceptTermsResponse {
	this := AcceptTermsResponse{}
	return &this
}

// GetAcceptedAt returns the AcceptedAt field value
func (o *AcceptTermsResponse) GetAcceptedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.AcceptedAt
}

// GetAcceptedAtOk returns a tuple with the AcceptedAt field value
// and a boolean to check if the value has been set.
func (o *AcceptTermsResponse) GetAcceptedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AcceptedAt, true
}

// SetAcceptedAt sets field value
func (o *AcceptTermsResponse) SetAcceptedAt(v time.Time) {
	o.AcceptedAt = v
}

// GetIpAddress returns the IpAddress field value
func (o *AcceptTermsResponse) GetIpAddress() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value
// and a boolean to check if the value has been set.
func (o *AcceptTermsResponse) GetIpAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IpAddress, true
}

// SetIpAddress sets field value
func (o *AcceptTermsResponse) SetIpAddress(v string) {
	o.IpAddress = v
}

func (o AcceptTermsResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AcceptTermsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accepted_at"] = o.AcceptedAt
	toSerialize["ip_address"] = o.IpAddress
	return toSerialize, nil
}

func (o *AcceptTermsResponse) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accepted_at",
		"ip_address",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAcceptTermsResponse := _AcceptTermsResponse{}

	err = json.Unmarshal(bytes, &varAcceptTermsResponse)

	if err != nil {
		return err
	}

	*o = AcceptTermsResponse(varAcceptTermsResponse)

	return err
}

type NullableAcceptTermsResponse struct {
	value *AcceptTermsResponse
	isSet bool
}

func (v NullableAcceptTermsResponse) Get() *AcceptTermsResponse {
	return v.value
}

func (v *NullableAcceptTermsResponse) Set(val *AcceptTermsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAcceptTermsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAcceptTermsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAcceptTermsResponse(val *AcceptTermsResponse) *NullableAcceptTermsResponse {
	return &NullableAcceptTermsResponse{value: val, isSet: true}
}

func (v NullableAcceptTermsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAcceptTermsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
