/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"fmt"
)

// AlertRuleOperator the model 'AlertRuleOperator'
type AlertRuleOperator string

// List of AlertRuleOperator
const (
	ALERTRULEOPERATOR_GREATER_THAN          AlertRuleOperator = "Greater Than"
	ALERTRULEOPERATOR_LESS_THAN             AlertRuleOperator = "Less Than"
	ALERTRULEOPERATOR_GREATER_THAN_OR_EQUAL AlertRuleOperator = "Greater Than Or Equal"
	ALERTRULEOPERATOR_LESS_THAN_OR_EQUAL    AlertRuleOperator = "Less Than Or Equal"
	ALERTRULEOPERATOR_EQUAL                 AlertRuleOperator = "Equal"
	ALERTRULEOPERATOR_NOT_EQUAL             AlertRuleOperator = "Not Equal"
)

// All allowed values of AlertRuleOperator enum
var AllowedAlertRuleOperatorEnumValues = []AlertRuleOperator{
	"Greater Than",
	"Less Than",
	"Greater Than Or Equal",
	"Less Than Or Equal",
	"Equal",
	"Not Equal",
}

func (v *AlertRuleOperator) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertRuleOperator(value)
	for _, existing := range AllowedAlertRuleOperatorEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertRuleOperator", value)
}

// NewAlertRuleOperatorFromValue returns a pointer to a valid AlertRuleOperator
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertRuleOperatorFromValue(v string) (*AlertRuleOperator, error) {
	ev := AlertRuleOperator(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertRuleOperator: valid values are %v", v, AllowedAlertRuleOperatorEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertRuleOperator) IsValid() bool {
	for _, existing := range AllowedAlertRuleOperatorEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlertRuleOperator value
func (v AlertRuleOperator) Ptr() *AlertRuleOperator {
	return &v
}

type NullableAlertRuleOperator struct {
	value *AlertRuleOperator
	isSet bool
}

func (v NullableAlertRuleOperator) Get() *AlertRuleOperator {
	return v.value
}

func (v *NullableAlertRuleOperator) Set(val *AlertRuleOperator) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertRuleOperator) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertRuleOperator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertRuleOperator(val *AlertRuleOperator) *NullableAlertRuleOperator {
	return &NullableAlertRuleOperator{value: val, isSet: true}
}

func (v NullableAlertRuleOperator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertRuleOperator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
