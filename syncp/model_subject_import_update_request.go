/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
)

// checks if the SubjectImportUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubjectImportUpdateRequest{}

// SubjectImportUpdateRequest struct for SubjectImportUpdateRequest
type SubjectImportUpdateRequest struct {
	JwtSettings *Import `json:"jwt_settings,omitempty"`
}

// NewSubjectImportUpdateRequest instantiates a new SubjectImportUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubjectImportUpdateRequest() *SubjectImportUpdateRequest {
	this := SubjectImportUpdateRequest{}
	return &this
}

// NewSubjectImportUpdateRequestWithDefaults instantiates a new SubjectImportUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubjectImportUpdateRequestWithDefaults() *SubjectImportUpdateRequest {
	this := SubjectImportUpdateRequest{}
	return &this
}

// GetJwtSettings returns the JwtSettings field value if set, zero value otherwise.
func (o *SubjectImportUpdateRequest) GetJwtSettings() Import {
	if o == nil || IsNil(o.JwtSettings) {
		var ret Import
		return ret
	}
	return *o.JwtSettings
}

// GetJwtSettingsOk returns a tuple with the JwtSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SubjectImportUpdateRequest) GetJwtSettingsOk() (*Import, bool) {
	if o == nil || IsNil(o.JwtSettings) {
		return nil, false
	}
	return o.JwtSettings, true
}

// HasJwtSettings returns a boolean if a field has been set.
func (o *SubjectImportUpdateRequest) HasJwtSettings() bool {
	if o != nil && !IsNil(o.JwtSettings) {
		return true
	}

	return false
}

// SetJwtSettings gets a reference to the given Import and assigns it to the JwtSettings field.
func (o *SubjectImportUpdateRequest) SetJwtSettings(v Import) {
	o.JwtSettings = &v
}

func (o SubjectImportUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubjectImportUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.JwtSettings) {
		toSerialize["jwt_settings"] = o.JwtSettings
	}
	return toSerialize, nil
}

type NullableSubjectImportUpdateRequest struct {
	value *SubjectImportUpdateRequest
	isSet bool
}

func (v NullableSubjectImportUpdateRequest) Get() *SubjectImportUpdateRequest {
	return v.value
}

func (v *NullableSubjectImportUpdateRequest) Set(val *SubjectImportUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSubjectImportUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSubjectImportUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubjectImportUpdateRequest(val *SubjectImportUpdateRequest) *NullableSubjectImportUpdateRequest {
	return &NullableSubjectImportUpdateRequest{value: val, isSet: true}
}

func (v NullableSubjectImportUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubjectImportUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
