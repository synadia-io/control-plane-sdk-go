/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type PullConsumerAPI interface {

	/*
		DeletePullConsumer Delete Pull Consumer

		Deletes a JetStream pull consumer

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param consumerId
		@return ApiDeletePullConsumerRequest
	*/
	DeletePullConsumer(ctx context.Context, consumerId string) ApiDeletePullConsumerRequest

	// DeletePullConsumerExecute executes the request
	DeletePullConsumerExecute(r ApiDeletePullConsumerRequest) (*http.Response, error)

	/*
		GetPullConsumerInfo Get Pull Consumer

		Returns JetStream pull consumer info

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param consumerId
		@return ApiGetPullConsumerInfoRequest
	*/
	GetPullConsumerInfo(ctx context.Context, consumerId string) ApiGetPullConsumerInfoRequest

	// GetPullConsumerInfoExecute executes the request
	//  @return JSPullConsumerInfoResponse
	GetPullConsumerInfoExecute(r ApiGetPullConsumerInfoRequest) (*JSPullConsumerInfoResponse, *http.Response, error)

	/*
		UpdatePullConsumer Update Pull Consumer

		Updates a JetStream consumer

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param consumerId
		@return ApiUpdatePullConsumerRequest
	*/
	UpdatePullConsumer(ctx context.Context, consumerId string) ApiUpdatePullConsumerRequest

	// UpdatePullConsumerExecute executes the request
	//  @return JSPullConsumerInfoResponse
	UpdatePullConsumerExecute(r ApiUpdatePullConsumerRequest) (*JSPullConsumerInfoResponse, *http.Response, error)
}

// PullConsumerAPIService PullConsumerAPI service
type PullConsumerAPIService service

type ApiDeletePullConsumerRequest struct {
	ctx        context.Context
	ApiService PullConsumerAPI
	consumerId string
}

func (r ApiDeletePullConsumerRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeletePullConsumerExecute(r)
}

/*
DeletePullConsumer Delete Pull Consumer

Deletes a JetStream pull consumer

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param consumerId
	@return ApiDeletePullConsumerRequest
*/
func (a *PullConsumerAPIService) DeletePullConsumer(ctx context.Context, consumerId string) ApiDeletePullConsumerRequest {
	return ApiDeletePullConsumerRequest{
		ApiService: a,
		ctx:        ctx,
		consumerId: consumerId,
	}
}

// Execute executes the request
func (a *PullConsumerAPIService) DeletePullConsumerExecute(r ApiDeletePullConsumerRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PullConsumerAPIService.DeletePullConsumer")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/consumers/pull/{consumerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"consumerId"+"}", url.PathEscape(parameterValueToString(r.consumerId, "consumerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetPullConsumerInfoRequest struct {
	ctx        context.Context
	ApiService PullConsumerAPI
	consumerId string
}

func (r ApiGetPullConsumerInfoRequest) Execute() (*JSPullConsumerInfoResponse, *http.Response, error) {
	return r.ApiService.GetPullConsumerInfoExecute(r)
}

/*
GetPullConsumerInfo Get Pull Consumer

Returns JetStream pull consumer info

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param consumerId
	@return ApiGetPullConsumerInfoRequest
*/
func (a *PullConsumerAPIService) GetPullConsumerInfo(ctx context.Context, consumerId string) ApiGetPullConsumerInfoRequest {
	return ApiGetPullConsumerInfoRequest{
		ApiService: a,
		ctx:        ctx,
		consumerId: consumerId,
	}
}

// Execute executes the request
//
//	@return JSPullConsumerInfoResponse
func (a *PullConsumerAPIService) GetPullConsumerInfoExecute(r ApiGetPullConsumerInfoRequest) (*JSPullConsumerInfoResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *JSPullConsumerInfoResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PullConsumerAPIService.GetPullConsumerInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/consumers/pull/{consumerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"consumerId"+"}", url.PathEscape(parameterValueToString(r.consumerId, "consumerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdatePullConsumerRequest struct {
	ctx                         context.Context
	ApiService                  PullConsumerAPI
	consumerId                  string
	jSPullConsumerUpdateRequest *JSPullConsumerUpdateRequest
}

func (r ApiUpdatePullConsumerRequest) JSPullConsumerUpdateRequest(jSPullConsumerUpdateRequest JSPullConsumerUpdateRequest) ApiUpdatePullConsumerRequest {
	r.jSPullConsumerUpdateRequest = &jSPullConsumerUpdateRequest
	return r
}

func (r ApiUpdatePullConsumerRequest) Execute() (*JSPullConsumerInfoResponse, *http.Response, error) {
	return r.ApiService.UpdatePullConsumerExecute(r)
}

/*
UpdatePullConsumer Update Pull Consumer

Updates a JetStream consumer

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param consumerId
	@return ApiUpdatePullConsumerRequest
*/
func (a *PullConsumerAPIService) UpdatePullConsumer(ctx context.Context, consumerId string) ApiUpdatePullConsumerRequest {
	return ApiUpdatePullConsumerRequest{
		ApiService: a,
		ctx:        ctx,
		consumerId: consumerId,
	}
}

// Execute executes the request
//
//	@return JSPullConsumerInfoResponse
func (a *PullConsumerAPIService) UpdatePullConsumerExecute(r ApiUpdatePullConsumerRequest) (*JSPullConsumerInfoResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *JSPullConsumerInfoResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PullConsumerAPIService.UpdatePullConsumer")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/consumers/pull/{consumerId}"
	localVarPath = strings.Replace(localVarPath, "{"+"consumerId"+"}", url.PathEscape(parameterValueToString(r.consumerId, "consumerId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.jSPullConsumerUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
