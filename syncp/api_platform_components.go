/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type PlatformComponentsAPI interface {

	/*
		PlatformComponentConnect Connect a Platform Component

		Connection endpoint for platform components to use. Requires a platform component bearer token

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param id
		@return ApiPlatformComponentConnectRequest
	*/
	PlatformComponentConnect(ctx context.Context, id string) ApiPlatformComponentConnectRequest

	// PlatformComponentConnectExecute executes the request
	//  @return PlatformComponentsConnectViewResponse
	PlatformComponentConnectExecute(r ApiPlatformComponentConnectRequest) (*PlatformComponentsConnectViewResponse, *http.Response, error)
}

// PlatformComponentsAPIService PlatformComponentsAPI service
type PlatformComponentsAPIService service

type ApiPlatformComponentConnectRequest struct {
	ctx                              context.Context
	ApiService                       PlatformComponentsAPI
	id                               string
	platformComponentsConnectRequest *PlatformComponentsConnectRequest
}

func (r ApiPlatformComponentConnectRequest) PlatformComponentsConnectRequest(platformComponentsConnectRequest PlatformComponentsConnectRequest) ApiPlatformComponentConnectRequest {
	r.platformComponentsConnectRequest = &platformComponentsConnectRequest
	return r
}

func (r ApiPlatformComponentConnectRequest) Execute() (*PlatformComponentsConnectViewResponse, *http.Response, error) {
	return r.ApiService.PlatformComponentConnectExecute(r)
}

/*
PlatformComponentConnect Connect a Platform Component

Connection endpoint for platform components to use. Requires a platform component bearer token

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param id
	@return ApiPlatformComponentConnectRequest
*/
func (a *PlatformComponentsAPIService) PlatformComponentConnect(ctx context.Context, id string) ApiPlatformComponentConnectRequest {
	return ApiPlatformComponentConnectRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

// Execute executes the request
//
//	@return PlatformComponentsConnectViewResponse
func (a *PlatformComponentsAPIService) PlatformComponentConnectExecute(r ApiPlatformComponentConnectRequest) (*PlatformComponentsConnectViewResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PlatformComponentsConnectViewResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "PlatformComponentsAPIService.PlatformComponentConnect")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/beta/platform-components/connect"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.platformComponentsConnectRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
