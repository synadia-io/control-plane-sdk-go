/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

// checks if the UserPermissionLimitsPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPermissionLimitsPatch{}

// UserPermissionLimitsPatch struct for UserPermissionLimitsPatch
type UserPermissionLimitsPatch struct {
	AllowedConnectionTypes []string                           `json:"allowed_connection_types,omitempty"`
	BearerToken            *bool                              `json:"bearer_token,omitempty"`
	Data                   *int64                             `json:"data,omitempty"`
	Payload                *int64                             `json:"payload,omitempty"`
	Pub                    *Nullable[PermissionPatch]         `json:"pub,omitempty"`
	Resp                   *Nullable[ResponsePermissionPatch] `json:"resp,omitempty"`
	Src                    []string                           `json:"src,omitempty"`
	Sub                    *Nullable[PermissionPatch]         `json:"sub,omitempty"`
	Subs                   *int64                             `json:"subs,omitempty"`
	Times                  []interface{}                      `json:"times,omitempty"`
	TimesLocation          *Nullable[string]                  `json:"times_location,omitempty"`
}

func (o UserPermissionLimitsPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowedConnectionTypes != nil {
		toSerialize["allowed_connection_types"] = o.AllowedConnectionTypes
	}
	if o.BearerToken != nil {
		toSerialize["bearer_token"] = o.BearerToken
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Payload != nil {
		toSerialize["payload"] = o.Payload
	}
	if o.Pub != nil && !o.Pub.IsNull() {
		toSerialize["pub"] = o.Pub.Val
	}
	if o.Resp != nil && !o.Resp.IsNull() {
		toSerialize["resp"] = o.Resp.Val
	}
	if o.Src != nil {
		toSerialize["src"] = o.Src
	}
	if o.Sub != nil && !o.Sub.IsNull() {
		toSerialize["sub"] = o.Sub.Val
	}
	if o.Subs != nil {
		toSerialize["subs"] = o.Subs
	}
	if o.Times != nil {
		toSerialize["times"] = o.Times
	}
	if o.TimesLocation != nil && !o.TimesLocation.IsNull() {
		toSerialize["times_location"] = o.TimesLocation.Val
	}
	return toSerialize, nil
}
