/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// WorkloadFieldType the model 'WorkloadFieldType'
type WorkloadFieldType string

// List of WorkloadFieldType
const (
	WORKLOADFIELDTYPE_BOOL   WorkloadFieldType = "bool"
	WORKLOADFIELDTYPE_INT    WorkloadFieldType = "int"
	WORKLOADFIELDTYPE_OBJECT WorkloadFieldType = "object"
	WORKLOADFIELDTYPE_STRING WorkloadFieldType = "string"
)

// All allowed values of WorkloadFieldType enum
var AllowedWorkloadFieldTypeEnumValues = []WorkloadFieldType{
	"bool",
	"int",
	"object",
	"string",
}

func (v *WorkloadFieldType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkloadFieldType(value)
	for _, existing := range AllowedWorkloadFieldTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkloadFieldType", value)
}

// NewWorkloadFieldTypeFromValue returns a pointer to a valid WorkloadFieldType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkloadFieldTypeFromValue(v string) (*WorkloadFieldType, error) {
	ev := WorkloadFieldType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkloadFieldType: valid values are %v", v, AllowedWorkloadFieldTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkloadFieldType) IsValid() bool {
	for _, existing := range AllowedWorkloadFieldTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkloadFieldType value
func (v WorkloadFieldType) Ptr() *WorkloadFieldType {
	return &v
}
