/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// ConnectorComponentKind -- Library
type ConnectorComponentKind string

// List of ConnectorComponentKind
const (
	CONNECTORCOMPONENTKIND_SOURCE  ConnectorComponentKind = "source"
	CONNECTORCOMPONENTKIND_SINK    ConnectorComponentKind = "sink"
	CONNECTORCOMPONENTKIND_SCANNER ConnectorComponentKind = "scanner"
)

// All allowed values of ConnectorComponentKind enum
var AllowedConnectorComponentKindEnumValues = []ConnectorComponentKind{
	"source",
	"sink",
	"scanner",
}

func (v *ConnectorComponentKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectorComponentKind(value)
	for _, existing := range AllowedConnectorComponentKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectorComponentKind", value)
}

// NewConnectorComponentKindFromValue returns a pointer to a valid ConnectorComponentKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectorComponentKindFromValue(v string) (*ConnectorComponentKind, error) {
	ev := ConnectorComponentKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectorComponentKind: valid values are %v", v, AllowedConnectorComponentKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectorComponentKind) IsValid() bool {
	for _, existing := range AllowedConnectorComponentKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectorComponentKind value
func (v ConnectorComponentKind) Ptr() *ConnectorComponentKind {
	return &v
}
