/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"reflect"
)

// Nullable is a generic type representing null values.
// By default, zero value in Val means serialization will result in a null value.
// Set zeroIsValid to true if you want to serialize Val even if set to a zero value.
type Nullable[T any] struct {
	Val         T
	ZeroIsValid bool
}

// NewNullable creates a new Nullable with the given value.
// This is useful when you want to create a Nullable with an initial value.
func NewNullable[T any](value T) Nullable[T] {
	return Nullable[T]{Val: value}
}

// IsNull returns true if Val is considered null for serialization
func (n Nullable[T]) IsNull() bool {
	val := reflect.ValueOf(n.Val)
	if !n.ZeroIsValid && val.IsZero() {
		return true
	}
	return false
}

// Ptr returns nil if IsNull is true or returns the pointer to Val.
// This is useful when assigning value of a Nullable to a pointer
func (n Nullable[T]) Ptr() *T {
	if n.IsNull() {
		return nil
	}
	return &n.Val
}

// UnmarshalJSON implements the json.Unmarshaler interface for Nullable, allowing it to be used as a nullable field in JSON operations.
// This method ensures proper unmarshalling of JSON data into the Nullable value, correctly setting the zeroIsValid flag based on the JSON data.
//
// During Unmarshaling, if we get "null", then the Val is set to zero value and zeroIsValid is set to false.
// if we get a zero value, then the Val is set to zero value and zeroIsValid is set to true
// otherwise, Val is set to the passed value and zeroIsValid is set to false
func (n *Nullable[T]) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		n.ZeroIsValid = false
		return nil
	}

	var value T
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	if val := reflect.ValueOf(value); val.IsZero() {
		n.ZeroIsValid = true
	} else {
		n.ZeroIsValid = false
	}
	n.Val = value
	return nil
}

// MarshalJSON implements the json.Marshaler interface for Nullable, enabling it to be used as a nullable field in JSON operations.
// If ZeroIsValid is true, the Nullable field in a struct serializes to the value of Val even if it is a zero value.
// If ZeroIsValid is false, the Nullable field in a struct serializes to "null" if it is a zero value.
func (n Nullable[T]) MarshalJSON() ([]byte, error) {
	val := reflect.ValueOf(n.Val)
	if !n.ZeroIsValid && val.IsZero() {
		return []byte("null"), nil
	}

	return json.Marshal(n.Val)
}

// Ptr is a generic helper function to return pointers to a given value
func Ptr[T any](v T) *T {
	return &v
}

type MappedNullable interface {
	ToMap() (map[string]interface{}, error)
}
