/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// AlertStatus the model 'AlertStatus'
type AlertStatus string

// List of AlertStatus
const (
	ALERTSTATUS_NEW    AlertStatus = "New"
	ALERTSTATUS_OPEN   AlertStatus = "Open"
	ALERTSTATUS_CLOSED AlertStatus = "Closed"
)

// All allowed values of AlertStatus enum
var AllowedAlertStatusEnumValues = []AlertStatus{
	"New",
	"Open",
	"Closed",
}

func (v *AlertStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertStatus(value)
	for _, existing := range AllowedAlertStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertStatus", value)
}

// NewAlertStatusFromValue returns a pointer to a valid AlertStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertStatusFromValue(v string) (*AlertStatus, error) {
	ev := AlertStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertStatus: valid values are %v", v, AllowedAlertStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertStatus) IsValid() bool {
	for _, existing := range AllowedAlertStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlertStatus value
func (v AlertStatus) Ptr() *AlertStatus {
	return &v
}
