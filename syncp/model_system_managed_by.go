/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// SystemManagedBy the model 'SystemManagedBy'
type SystemManagedBy string

// List of SystemManagedBy
const (
	SYSTEMMANAGEDBY_BYON   SystemManagedBy = "byon"
	SYSTEMMANAGEDBY_SDKUBE SystemManagedBy = "sdkube"
)

// All allowed values of SystemManagedBy enum
var AllowedSystemManagedByEnumValues = []SystemManagedBy{
	"byon",
	"sdkube",
}

func (v *SystemManagedBy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SystemManagedBy(value)
	for _, existing := range AllowedSystemManagedByEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SystemManagedBy", value)
}

// NewSystemManagedByFromValue returns a pointer to a valid SystemManagedBy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSystemManagedByFromValue(v string) (*SystemManagedBy, error) {
	ev := SystemManagedBy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SystemManagedBy: valid values are %v", v, AllowedSystemManagedByEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SystemManagedBy) IsValid() bool {
	for _, existing := range AllowedSystemManagedByEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SystemManagedBy value
func (v SystemManagedBy) Ptr() *SystemManagedBy {
	return &v
}
