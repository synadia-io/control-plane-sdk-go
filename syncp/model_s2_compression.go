/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// S2Compression the model 'S2Compression'
type S2Compression string

// List of S2Compression
const (
	S2COMPRESSION_S2 S2Compression = "s2"
)

// All allowed values of S2Compression enum
var AllowedS2CompressionEnumValues = []S2Compression{
	"s2",
}

func (v *S2Compression) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := S2Compression(value)
	for _, existing := range AllowedS2CompressionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid S2Compression", value)
}

// NewS2CompressionFromValue returns a pointer to a valid S2Compression
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewS2CompressionFromValue(v string) (*S2Compression, error) {
	ev := S2Compression(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for S2Compression: valid values are %v", v, AllowedS2CompressionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v S2Compression) IsValid() bool {
	for _, existing := range AllowedS2CompressionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to S2Compression value
func (v S2Compression) Ptr() *S2Compression {
	return &v
}
