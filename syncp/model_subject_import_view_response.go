/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the SubjectImportViewResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SubjectImportViewResponse{}

// SubjectImportViewResponse struct for SubjectImportViewResponse
type SubjectImportViewResponse struct {
	Created                 time.Time `json:"created"`
	Id                      string    `json:"id"`
	JwtSettings             Import    `json:"jwt_settings"`
	Name                    string    `json:"name"`
	RemoteAccountNkeyPublic string    `json:"remote_account_nkey_public"`
	RemoteSubject           string    `json:"remote_subject"`
}

type _SubjectImportViewResponse SubjectImportViewResponse

// NewSubjectImportViewResponse instantiates a new SubjectImportViewResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSubjectImportViewResponse(created time.Time, id string, jwtSettings Import, name string, remoteAccountNkeyPublic string, remoteSubject string) *SubjectImportViewResponse {
	this := SubjectImportViewResponse{}
	this.Created = created
	this.Id = id
	this.JwtSettings = jwtSettings
	this.Name = name
	this.RemoteAccountNkeyPublic = remoteAccountNkeyPublic
	this.RemoteSubject = remoteSubject
	return &this
}

// NewSubjectImportViewResponseWithDefaults instantiates a new SubjectImportViewResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSubjectImportViewResponseWithDefaults() *SubjectImportViewResponse {
	this := SubjectImportViewResponse{}
	return &this
}

// GetCreated returns the Created field value
func (o *SubjectImportViewResponse) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *SubjectImportViewResponse) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *SubjectImportViewResponse) SetCreated(v time.Time) {
	o.Created = v
}

// GetId returns the Id field value
func (o *SubjectImportViewResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SubjectImportViewResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SubjectImportViewResponse) SetId(v string) {
	o.Id = v
}

// GetJwtSettings returns the JwtSettings field value
func (o *SubjectImportViewResponse) GetJwtSettings() Import {
	if o == nil {
		var ret Import
		return ret
	}

	return o.JwtSettings
}

// GetJwtSettingsOk returns a tuple with the JwtSettings field value
// and a boolean to check if the value has been set.
func (o *SubjectImportViewResponse) GetJwtSettingsOk() (*Import, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JwtSettings, true
}

// SetJwtSettings sets field value
func (o *SubjectImportViewResponse) SetJwtSettings(v Import) {
	o.JwtSettings = v
}

// GetName returns the Name field value
func (o *SubjectImportViewResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SubjectImportViewResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SubjectImportViewResponse) SetName(v string) {
	o.Name = v
}

// GetRemoteAccountNkeyPublic returns the RemoteAccountNkeyPublic field value
func (o *SubjectImportViewResponse) GetRemoteAccountNkeyPublic() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteAccountNkeyPublic
}

// GetRemoteAccountNkeyPublicOk returns a tuple with the RemoteAccountNkeyPublic field value
// and a boolean to check if the value has been set.
func (o *SubjectImportViewResponse) GetRemoteAccountNkeyPublicOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteAccountNkeyPublic, true
}

// SetRemoteAccountNkeyPublic sets field value
func (o *SubjectImportViewResponse) SetRemoteAccountNkeyPublic(v string) {
	o.RemoteAccountNkeyPublic = v
}

// GetRemoteSubject returns the RemoteSubject field value
func (o *SubjectImportViewResponse) GetRemoteSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteSubject
}

// GetRemoteSubjectOk returns a tuple with the RemoteSubject field value
// and a boolean to check if the value has been set.
func (o *SubjectImportViewResponse) GetRemoteSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteSubject, true
}

// SetRemoteSubject sets field value
func (o *SubjectImportViewResponse) SetRemoteSubject(v string) {
	o.RemoteSubject = v
}

func (o SubjectImportViewResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SubjectImportViewResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created"] = o.Created
	toSerialize["id"] = o.Id
	toSerialize["jwt_settings"] = o.JwtSettings
	toSerialize["name"] = o.Name
	toSerialize["remote_account_nkey_public"] = o.RemoteAccountNkeyPublic
	toSerialize["remote_subject"] = o.RemoteSubject
	return toSerialize, nil
}

func (o *SubjectImportViewResponse) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created",
		"id",
		"jwt_settings",
		"name",
		"remote_account_nkey_public",
		"remote_subject",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSubjectImportViewResponse := _SubjectImportViewResponse{}

	err = json.Unmarshal(bytes, &varSubjectImportViewResponse)

	if err != nil {
		return err
	}

	*o = SubjectImportViewResponse(varSubjectImportViewResponse)

	return err
}

type NullableSubjectImportViewResponse struct {
	value *SubjectImportViewResponse
	isSet bool
}

func (v NullableSubjectImportViewResponse) Get() *SubjectImportViewResponse {
	return v.value
}

func (v *NullableSubjectImportViewResponse) Set(val *SubjectImportViewResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSubjectImportViewResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSubjectImportViewResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubjectImportViewResponse(val *SubjectImportViewResponse) *NullableSubjectImportViewResponse {
	return &NullableSubjectImportViewResponse{value: val, isSet: true}
}

func (v NullableSubjectImportViewResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubjectImportViewResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
