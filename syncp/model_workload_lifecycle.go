/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// WorkloadLifecycle the model 'WorkloadLifecycle'
type WorkloadLifecycle string

// List of WorkloadLifecycle
const (
	WORKLOADLIFECYCLE_FUNCTION WorkloadLifecycle = "function"
	WORKLOADLIFECYCLE_JOB      WorkloadLifecycle = "job"
	WORKLOADLIFECYCLE_SERVICE  WorkloadLifecycle = "service"
)

// All allowed values of WorkloadLifecycle enum
var AllowedWorkloadLifecycleEnumValues = []WorkloadLifecycle{
	"function",
	"job",
	"service",
}

func (v *WorkloadLifecycle) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkloadLifecycle(value)
	for _, existing := range AllowedWorkloadLifecycleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkloadLifecycle", value)
}

// NewWorkloadLifecycleFromValue returns a pointer to a valid WorkloadLifecycle
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkloadLifecycleFromValue(v string) (*WorkloadLifecycle, error) {
	ev := WorkloadLifecycle(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkloadLifecycle: valid values are %v", v, AllowedWorkloadLifecycleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkloadLifecycle) IsValid() bool {
	for _, existing := range AllowedWorkloadLifecycleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkloadLifecycle value
func (v WorkloadLifecycle) Ptr() *WorkloadLifecycle {
	return &v
}
