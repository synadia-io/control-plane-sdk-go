/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

// checks if the AlertRuleUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertRuleUpdateRequest{}

// AlertRuleUpdateRequest struct for AlertRuleUpdateRequest
type AlertRuleUpdateRequest struct {
	DurationInSecs                *int64                    `json:"duration_in_secs,omitempty"`
	IsEnabled                     *bool                     `json:"is_enabled,omitempty"`
	Message                       *string                   `json:"message,omitempty"`
	Severity                      *AlertRuleSeverity        `json:"severity,omitempty"`
	ThresholdExpressionMetric     *AlertRuleThresholdMetric `json:"threshold_expression_metric,omitempty"`
	ThresholdExpressionMultiplier *float32                  `json:"threshold_expression_multiplier,omitempty"`
	ThresholdFixedValue           *float32                  `json:"threshold_fixed_value,omitempty"`
	ThresholdOperator             *AlertRuleOperator        `json:"threshold_operator,omitempty"`
}

func (o AlertRuleUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DurationInSecs != nil {
		toSerialize["duration_in_secs"] = o.DurationInSecs
	}
	if o.IsEnabled != nil {
		toSerialize["is_enabled"] = o.IsEnabled
	}
	if o.Message != nil {
		toSerialize["message"] = o.Message
	}
	if o.Severity != nil {
		toSerialize["severity"] = o.Severity
	}
	if o.ThresholdExpressionMetric != nil {
		toSerialize["threshold_expression_metric"] = o.ThresholdExpressionMetric
	}
	if o.ThresholdExpressionMultiplier != nil {
		toSerialize["threshold_expression_multiplier"] = o.ThresholdExpressionMultiplier
	}
	if o.ThresholdFixedValue != nil {
		toSerialize["threshold_fixed_value"] = o.ThresholdFixedValue
	}
	if o.ThresholdOperator != nil {
		toSerialize["threshold_operator"] = o.ThresholdOperator
	}
	return toSerialize, nil
}
