/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// NatsUserIssuanceEventType the model 'NatsUserIssuanceEventType'
type NatsUserIssuanceEventType string

// List of NatsUserIssuanceEventType
const (
	NATSUSERISSUANCEEVENTTYPE_IMPORT   NatsUserIssuanceEventType = "Import"
	NATSUSERISSUANCEEVENTTYPE_DOWNLOAD NatsUserIssuanceEventType = "Download"
)

// All allowed values of NatsUserIssuanceEventType enum
var AllowedNatsUserIssuanceEventTypeEnumValues = []NatsUserIssuanceEventType{
	"Import",
	"Download",
}

func (v *NatsUserIssuanceEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NatsUserIssuanceEventType(value)
	for _, existing := range AllowedNatsUserIssuanceEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NatsUserIssuanceEventType", value)
}

// NewNatsUserIssuanceEventTypeFromValue returns a pointer to a valid NatsUserIssuanceEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNatsUserIssuanceEventTypeFromValue(v string) (*NatsUserIssuanceEventType, error) {
	ev := NatsUserIssuanceEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NatsUserIssuanceEventType: valid values are %v", v, AllowedNatsUserIssuanceEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NatsUserIssuanceEventType) IsValid() bool {
	for _, existing := range AllowedNatsUserIssuanceEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NatsUserIssuanceEventType value
func (v NatsUserIssuanceEventType) Ptr() *NatsUserIssuanceEventType {
	return &v
}
