/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

// checks if the OperatorLimits type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OperatorLimits{}

// OperatorLimits OperatorLimits are used to limit access by an account
type OperatorLimits struct {
	NatsLimits
	AccountLimits
	JetStreamLimits
	TieredLimits map[string]JetStreamLimits `json:"tiered_limits,omitempty"`
}

func (o OperatorLimits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if len(o.TieredLimits) != 0 {
		toSerialize["tiered_limits"] = o.TieredLimits
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Payload != nil {
		toSerialize["payload"] = o.Payload
	}
	if o.Subs != nil {
		toSerialize["subs"] = o.Subs
	}
	if o.Conn != nil {
		toSerialize["conn"] = o.Conn
	}
	if o.DisallowBearer != nil {
		toSerialize["disallow_bearer"] = o.DisallowBearer
	}
	if o.Exports != nil {
		toSerialize["exports"] = o.Exports
	}
	if o.Imports != nil {
		toSerialize["imports"] = o.Imports
	}
	if o.Leaf != nil {
		toSerialize["leaf"] = o.Leaf
	}
	if o.Wildcards != nil {
		toSerialize["wildcards"] = o.Wildcards
	}
	if o.Consumer != nil {
		toSerialize["consumer"] = o.Consumer
	}
	if o.DiskMaxStreamBytes != nil {
		toSerialize["disk_max_stream_bytes"] = o.DiskMaxStreamBytes
	}
	if o.DiskStorage != nil {
		toSerialize["disk_storage"] = o.DiskStorage
	}
	if o.MaxAckPending != nil {
		toSerialize["max_ack_pending"] = o.MaxAckPending
	}
	if o.MaxBytesRequired != nil {
		toSerialize["max_bytes_required"] = o.MaxBytesRequired
	}
	if o.MemMaxStreamBytes != nil {
		toSerialize["mem_max_stream_bytes"] = o.MemMaxStreamBytes
	}
	if o.MemStorage != nil {
		toSerialize["mem_storage"] = o.MemStorage
	}
	if o.Streams != nil {
		toSerialize["streams"] = o.Streams
	}
	return toSerialize, nil
}
