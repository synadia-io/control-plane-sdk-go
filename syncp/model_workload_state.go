/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// WorkloadState the model 'WorkloadState'
type WorkloadState string

// List of WorkloadState
const (
	WORKLOADSTATE_ERROR    WorkloadState = "error"
	WORKLOADSTATE_RUNNING  WorkloadState = "running"
	WORKLOADSTATE_STARTING WorkloadState = "starting"
	WORKLOADSTATE_STOPPING WorkloadState = "stopping"
	WORKLOADSTATE_STOPPED  WorkloadState = "stopped"
	WORKLOADSTATE_WARM     WorkloadState = "warm"
)

// All allowed values of WorkloadState enum
var AllowedWorkloadStateEnumValues = []WorkloadState{
	"error",
	"running",
	"starting",
	"stopping",
	"stopped",
	"warm",
}

func (v *WorkloadState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkloadState(value)
	for _, existing := range AllowedWorkloadStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkloadState", value)
}

// NewWorkloadStateFromValue returns a pointer to a valid WorkloadState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkloadStateFromValue(v string) (*WorkloadState, error) {
	ev := WorkloadState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkloadState: valid values are %v", v, AllowedWorkloadStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkloadState) IsValid() bool {
	for _, existing := range AllowedWorkloadStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkloadState value
func (v WorkloadState) Ptr() *WorkloadState {
	return &v
}
