/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// JSType the model 'JSType'
type JSType string

// List of JSType
const (
	JSTYPE_STREAM        JSType = "stream"
	JSTYPE_MIRROR        JSType = "mirror"
	JSTYPE_KV_BUCKET     JSType = "kv-bucket"
	JSTYPE_OBJECT_BUCKET JSType = "object-bucket"
)

// All allowed values of JSType enum
var AllowedJSTypeEnumValues = []JSType{
	"stream",
	"mirror",
	"kv-bucket",
	"object-bucket",
}

func (v *JSType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := JSType(value)
	for _, existing := range AllowedJSTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid JSType", value)
}

// NewJSTypeFromValue returns a pointer to a valid JSType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewJSTypeFromValue(v string) (*JSType, error) {
	ev := JSType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for JSType: valid values are %v", v, AllowedJSTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v JSType) IsValid() bool {
	for _, existing := range AllowedJSTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to JSType value
func (v JSType) Ptr() *JSType {
	return &v
}
