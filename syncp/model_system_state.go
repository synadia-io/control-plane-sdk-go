/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// SystemState the model 'SystemState'
type SystemState string

// List of SystemState
const (
	SYSTEMSTATE_PROVISIONING SystemState = "Provisioning"
	SYSTEMSTATE_CONNECTED    SystemState = "Connected"
	SYSTEMSTATE_DISCONNECTED SystemState = "Disconnected"
)

// All allowed values of SystemState enum
var AllowedSystemStateEnumValues = []SystemState{
	"Provisioning",
	"Connected",
	"Disconnected",
}

func (v *SystemState) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SystemState(value)
	for _, existing := range AllowedSystemStateEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SystemState", value)
}

// NewSystemStateFromValue returns a pointer to a valid SystemState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSystemStateFromValue(v string) (*SystemState, error) {
	ev := SystemState(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SystemState: valid values are %v", v, AllowedSystemStateEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SystemState) IsValid() bool {
	for _, existing := range AllowedSystemStateEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SystemState value
func (v SystemState) Ptr() *SystemState {
	return &v
}
