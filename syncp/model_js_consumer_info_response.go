/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"time"
)

// checks if the JSConsumerInfoResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSConsumerInfoResponse{}

// JSConsumerInfoResponse struct for JSConsumerInfoResponse
type JSConsumerInfoResponse struct {
	ConsumerType   *JSConsumerType             `json:"consumer_type,omitempty"`
	Id             *string                     `json:"id,omitempty"`
	AckFloor       SequenceInfo                `json:"ack_floor"`
	Cluster        NullableConsumerInfoCluster `json:"cluster,omitempty"`
	Config         ConsumerConfig              `json:"config"`
	Created        time.Time                   `json:"created"`
	Delivered      SequenceInfo                `json:"delivered"`
	Name           string                      `json:"name"`
	NumAckPending  int32                       `json:"num_ack_pending"`
	NumPending     int32                       `json:"num_pending"`
	NumRedelivered int32                       `json:"num_redelivered"`
	NumWaiting     int32                       `json:"num_waiting"`
	PushBound      *bool                       `json:"push_bound,omitempty"`
	StreamName     string                      `json:"stream_name"`
}

// NewJSConsumerInfoResponse instantiates a new JSConsumerInfoResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSConsumerInfoResponse(ackFloor SequenceInfo, config ConsumerConfig, created time.Time, delivered SequenceInfo, name string, numAckPending int32, numPending int32, numRedelivered int32, numWaiting int32, streamName string) *JSConsumerInfoResponse {
	this := JSConsumerInfoResponse{}
	this.AckFloor = ackFloor
	this.Config = config
	this.Created = created
	this.Delivered = delivered
	this.Name = name
	this.NumAckPending = numAckPending
	this.NumPending = numPending
	this.NumRedelivered = numRedelivered
	this.NumWaiting = numWaiting
	this.StreamName = streamName
	return &this
}

// NewJSConsumerInfoResponseWithDefaults instantiates a new JSConsumerInfoResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSConsumerInfoResponseWithDefaults() *JSConsumerInfoResponse {
	this := JSConsumerInfoResponse{}
	return &this
}

// GetConsumerType returns the ConsumerType field value if set, zero value otherwise.
func (o *JSConsumerInfoResponse) GetConsumerType() JSConsumerType {
	if o == nil || IsNil(o.ConsumerType) {
		var ret JSConsumerType
		return ret
	}
	return *o.ConsumerType
}

// GetConsumerTypeOk returns a tuple with the ConsumerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSConsumerInfoResponse) GetConsumerTypeOk() (*JSConsumerType, bool) {
	if o == nil || IsNil(o.ConsumerType) {
		return nil, false
	}
	return o.ConsumerType, true
}

// HasConsumerType returns a boolean if a field has been set.
func (o *JSConsumerInfoResponse) HasConsumerType() bool {
	if o != nil && !IsNil(o.ConsumerType) {
		return true
	}

	return false
}

// SetConsumerType gets a reference to the given JSConsumerType and assigns it to the ConsumerType field.
func (o *JSConsumerInfoResponse) SetConsumerType(v JSConsumerType) {
	o.ConsumerType = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *JSConsumerInfoResponse) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSConsumerInfoResponse) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *JSConsumerInfoResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *JSConsumerInfoResponse) SetId(v string) {
	o.Id = &v
}

// GetAckFloor returns the AckFloor field value
func (o *JSConsumerInfoResponse) GetAckFloor() SequenceInfo {
	if o == nil {
		var ret SequenceInfo
		return ret
	}

	return o.AckFloor
}

// GetAckFloorOk returns a tuple with the AckFloor field value
// and a boolean to check if the value has been set.
func (o *JSConsumerInfoResponse) GetAckFloorOk() (*SequenceInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AckFloor, true
}

// SetAckFloor sets field value
func (o *JSConsumerInfoResponse) SetAckFloor(v SequenceInfo) {
	o.AckFloor = v
}

// GetCluster returns the Cluster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JSConsumerInfoResponse) GetCluster() ConsumerInfoCluster {
	if o == nil || IsNil(o.Cluster.Get()) {
		var ret ConsumerInfoCluster
		return ret
	}
	return *o.Cluster.Get()
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JSConsumerInfoResponse) GetClusterOk() (*ConsumerInfoCluster, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cluster.Get(), o.Cluster.IsSet()
}

// HasCluster returns a boolean if a field has been set.
func (o *JSConsumerInfoResponse) HasCluster() bool {
	if o != nil && o.Cluster.IsSet() {
		return true
	}

	return false
}

// SetCluster gets a reference to the given NullableConsumerInfoCluster and assigns it to the Cluster field.
func (o *JSConsumerInfoResponse) SetCluster(v ConsumerInfoCluster) {
	o.Cluster.Set(&v)
}

// SetClusterNil sets the value for Cluster to be an explicit nil
func (o *JSConsumerInfoResponse) SetClusterNil() {
	o.Cluster.Set(nil)
}

// UnsetCluster ensures that no value is present for Cluster, not even an explicit nil
func (o *JSConsumerInfoResponse) UnsetCluster() {
	o.Cluster.Unset()
}

// GetConfig returns the Config field value
func (o *JSConsumerInfoResponse) GetConfig() ConsumerConfig {
	if o == nil {
		var ret ConsumerConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *JSConsumerInfoResponse) GetConfigOk() (*ConsumerConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *JSConsumerInfoResponse) SetConfig(v ConsumerConfig) {
	o.Config = v
}

// GetCreated returns the Created field value
func (o *JSConsumerInfoResponse) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *JSConsumerInfoResponse) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *JSConsumerInfoResponse) SetCreated(v time.Time) {
	o.Created = v
}

// GetDelivered returns the Delivered field value
func (o *JSConsumerInfoResponse) GetDelivered() SequenceInfo {
	if o == nil {
		var ret SequenceInfo
		return ret
	}

	return o.Delivered
}

// GetDeliveredOk returns a tuple with the Delivered field value
// and a boolean to check if the value has been set.
func (o *JSConsumerInfoResponse) GetDeliveredOk() (*SequenceInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Delivered, true
}

// SetDelivered sets field value
func (o *JSConsumerInfoResponse) SetDelivered(v SequenceInfo) {
	o.Delivered = v
}

// GetName returns the Name field value
func (o *JSConsumerInfoResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *JSConsumerInfoResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *JSConsumerInfoResponse) SetName(v string) {
	o.Name = v
}

// GetNumAckPending returns the NumAckPending field value
func (o *JSConsumerInfoResponse) GetNumAckPending() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumAckPending
}

// GetNumAckPendingOk returns a tuple with the NumAckPending field value
// and a boolean to check if the value has been set.
func (o *JSConsumerInfoResponse) GetNumAckPendingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumAckPending, true
}

// SetNumAckPending sets field value
func (o *JSConsumerInfoResponse) SetNumAckPending(v int32) {
	o.NumAckPending = v
}

// GetNumPending returns the NumPending field value
func (o *JSConsumerInfoResponse) GetNumPending() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumPending
}

// GetNumPendingOk returns a tuple with the NumPending field value
// and a boolean to check if the value has been set.
func (o *JSConsumerInfoResponse) GetNumPendingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumPending, true
}

// SetNumPending sets field value
func (o *JSConsumerInfoResponse) SetNumPending(v int32) {
	o.NumPending = v
}

// GetNumRedelivered returns the NumRedelivered field value
func (o *JSConsumerInfoResponse) GetNumRedelivered() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumRedelivered
}

// GetNumRedeliveredOk returns a tuple with the NumRedelivered field value
// and a boolean to check if the value has been set.
func (o *JSConsumerInfoResponse) GetNumRedeliveredOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumRedelivered, true
}

// SetNumRedelivered sets field value
func (o *JSConsumerInfoResponse) SetNumRedelivered(v int32) {
	o.NumRedelivered = v
}

// GetNumWaiting returns the NumWaiting field value
func (o *JSConsumerInfoResponse) GetNumWaiting() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumWaiting
}

// GetNumWaitingOk returns a tuple with the NumWaiting field value
// and a boolean to check if the value has been set.
func (o *JSConsumerInfoResponse) GetNumWaitingOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumWaiting, true
}

// SetNumWaiting sets field value
func (o *JSConsumerInfoResponse) SetNumWaiting(v int32) {
	o.NumWaiting = v
}

// GetPushBound returns the PushBound field value if set, zero value otherwise.
func (o *JSConsumerInfoResponse) GetPushBound() bool {
	if o == nil || IsNil(o.PushBound) {
		var ret bool
		return ret
	}
	return *o.PushBound
}

// GetPushBoundOk returns a tuple with the PushBound field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSConsumerInfoResponse) GetPushBoundOk() (*bool, bool) {
	if o == nil || IsNil(o.PushBound) {
		return nil, false
	}
	return o.PushBound, true
}

// HasPushBound returns a boolean if a field has been set.
func (o *JSConsumerInfoResponse) HasPushBound() bool {
	if o != nil && !IsNil(o.PushBound) {
		return true
	}

	return false
}

// SetPushBound gets a reference to the given bool and assigns it to the PushBound field.
func (o *JSConsumerInfoResponse) SetPushBound(v bool) {
	o.PushBound = &v
}

// GetStreamName returns the StreamName field value
func (o *JSConsumerInfoResponse) GetStreamName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StreamName
}

// GetStreamNameOk returns a tuple with the StreamName field value
// and a boolean to check if the value has been set.
func (o *JSConsumerInfoResponse) GetStreamNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreamName, true
}

// SetStreamName sets field value
func (o *JSConsumerInfoResponse) SetStreamName(v string) {
	o.StreamName = v
}

func (o JSConsumerInfoResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSConsumerInfoResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConsumerType) {
		toSerialize["consumer_type"] = o.ConsumerType
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["ack_floor"] = o.AckFloor
	if o.Cluster.IsSet() {
		toSerialize["cluster"] = o.Cluster.Get()
	}
	toSerialize["config"] = o.Config
	toSerialize["created"] = o.Created
	toSerialize["delivered"] = o.Delivered
	toSerialize["name"] = o.Name
	toSerialize["num_ack_pending"] = o.NumAckPending
	toSerialize["num_pending"] = o.NumPending
	toSerialize["num_redelivered"] = o.NumRedelivered
	toSerialize["num_waiting"] = o.NumWaiting
	if !IsNil(o.PushBound) {
		toSerialize["push_bound"] = o.PushBound
	}
	toSerialize["stream_name"] = o.StreamName
	return toSerialize, nil
}

type NullableJSConsumerInfoResponse struct {
	value *JSConsumerInfoResponse
	isSet bool
}

func (v NullableJSConsumerInfoResponse) Get() *JSConsumerInfoResponse {
	return v.value
}

func (v *NullableJSConsumerInfoResponse) Set(val *JSConsumerInfoResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableJSConsumerInfoResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableJSConsumerInfoResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSConsumerInfoResponse(val *JSConsumerInfoResponse) *NullableJSConsumerInfoResponse {
	return &NullableJSConsumerInfoResponse{value: val, isSet: true}
}

func (v NullableJSConsumerInfoResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSConsumerInfoResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
