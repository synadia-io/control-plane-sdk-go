/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the TeamViewResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamViewResponse{}

// TeamViewResponse struct for TeamViewResponse
type TeamViewResponse struct {
	Created time.Time   `json:"created"`
	Id      string      `json:"id"`
	Limits  *TeamLimits `json:"limits,omitempty"`
	Name    string      `json:"name"`
}

type _TeamViewResponse TeamViewResponse

// NewTeamViewResponse instantiates a new TeamViewResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamViewResponse(created time.Time, id string, name string) *TeamViewResponse {
	this := TeamViewResponse{}
	this.Created = created
	this.Id = id
	this.Name = name
	return &this
}

// NewTeamViewResponseWithDefaults instantiates a new TeamViewResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamViewResponseWithDefaults() *TeamViewResponse {
	this := TeamViewResponse{}
	return &this
}

// GetCreated returns the Created field value
func (o *TeamViewResponse) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *TeamViewResponse) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *TeamViewResponse) SetCreated(v time.Time) {
	o.Created = v
}

// GetId returns the Id field value
func (o *TeamViewResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TeamViewResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TeamViewResponse) SetId(v string) {
	o.Id = v
}

// GetLimits returns the Limits field value if set, zero value otherwise.
func (o *TeamViewResponse) GetLimits() TeamLimits {
	if o == nil || IsNil(o.Limits) {
		var ret TeamLimits
		return ret
	}
	return *o.Limits
}

// GetLimitsOk returns a tuple with the Limits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamViewResponse) GetLimitsOk() (*TeamLimits, bool) {
	if o == nil || IsNil(o.Limits) {
		return nil, false
	}
	return o.Limits, true
}

// HasLimits returns a boolean if a field has been set.
func (o *TeamViewResponse) HasLimits() bool {
	if o != nil && !IsNil(o.Limits) {
		return true
	}

	return false
}

// SetLimits gets a reference to the given TeamLimits and assigns it to the Limits field.
func (o *TeamViewResponse) SetLimits(v TeamLimits) {
	o.Limits = &v
}

// GetName returns the Name field value
func (o *TeamViewResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TeamViewResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TeamViewResponse) SetName(v string) {
	o.Name = v
}

func (o TeamViewResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamViewResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["created"] = o.Created
	toSerialize["id"] = o.Id
	if !IsNil(o.Limits) {
		toSerialize["limits"] = o.Limits
	}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *TeamViewResponse) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"created",
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTeamViewResponse := _TeamViewResponse{}

	err = json.Unmarshal(bytes, &varTeamViewResponse)

	if err != nil {
		return err
	}

	*o = TeamViewResponse(varTeamViewResponse)

	return err
}

type NullableTeamViewResponse struct {
	value *TeamViewResponse
	isSet bool
}

func (v NullableTeamViewResponse) Get() *TeamViewResponse {
	return v.value
}

func (v *NullableTeamViewResponse) Set(val *TeamViewResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamViewResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamViewResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamViewResponse(val *TeamViewResponse) *NullableTeamViewResponse {
	return &NullableTeamViewResponse{value: val, isSet: true}
}

func (v NullableTeamViewResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamViewResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
