/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"fmt"
)

// checks if the JSKVBucketCreateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JSKVBucketCreateRequest{}

// JSKVBucketCreateRequest struct for JSKVBucketCreateRequest
type JSKVBucketCreateRequest struct {
	BucketName  string         `json:"bucket_name"`
	Description string         `json:"description"`
	History     int32          `json:"history"`
	MaxBytes    int64          `json:"max_bytes"`
	MaxValSize  int32          `json:"max_val_size"`
	Mirror      *StreamSource  `json:"mirror,omitempty"`
	Placement   *Placement     `json:"placement,omitempty"`
	Replicas    int32          `json:"replicas"`
	Republish   *RePublish     `json:"republish,omitempty"`
	Sources     []StreamSource `json:"sources,omitempty"`
	Storage     StorageType    `json:"storage"`
	Ttl         int64          `json:"ttl"`
}

type _JSKVBucketCreateRequest JSKVBucketCreateRequest

// NewJSKVBucketCreateRequest instantiates a new JSKVBucketCreateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJSKVBucketCreateRequest(bucketName string, description string, history int32, maxBytes int64, maxValSize int32, replicas int32, storage StorageType, ttl int64) *JSKVBucketCreateRequest {
	this := JSKVBucketCreateRequest{}
	this.BucketName = bucketName
	this.Description = description
	this.History = history
	this.MaxBytes = maxBytes
	this.MaxValSize = maxValSize
	this.Replicas = replicas
	this.Storage = storage
	this.Ttl = ttl
	return &this
}

// NewJSKVBucketCreateRequestWithDefaults instantiates a new JSKVBucketCreateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJSKVBucketCreateRequestWithDefaults() *JSKVBucketCreateRequest {
	this := JSKVBucketCreateRequest{}
	return &this
}

// GetBucketName returns the BucketName field value
func (o *JSKVBucketCreateRequest) GetBucketName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
func (o *JSKVBucketCreateRequest) GetBucketNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BucketName, true
}

// SetBucketName sets field value
func (o *JSKVBucketCreateRequest) SetBucketName(v string) {
	o.BucketName = v
}

// GetDescription returns the Description field value
func (o *JSKVBucketCreateRequest) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *JSKVBucketCreateRequest) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *JSKVBucketCreateRequest) SetDescription(v string) {
	o.Description = v
}

// GetHistory returns the History field value
func (o *JSKVBucketCreateRequest) GetHistory() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.History
}

// GetHistoryOk returns a tuple with the History field value
// and a boolean to check if the value has been set.
func (o *JSKVBucketCreateRequest) GetHistoryOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.History, true
}

// SetHistory sets field value
func (o *JSKVBucketCreateRequest) SetHistory(v int32) {
	o.History = v
}

// GetMaxBytes returns the MaxBytes field value
func (o *JSKVBucketCreateRequest) GetMaxBytes() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.MaxBytes
}

// GetMaxBytesOk returns a tuple with the MaxBytes field value
// and a boolean to check if the value has been set.
func (o *JSKVBucketCreateRequest) GetMaxBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxBytes, true
}

// SetMaxBytes sets field value
func (o *JSKVBucketCreateRequest) SetMaxBytes(v int64) {
	o.MaxBytes = v
}

// GetMaxValSize returns the MaxValSize field value
func (o *JSKVBucketCreateRequest) GetMaxValSize() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaxValSize
}

// GetMaxValSizeOk returns a tuple with the MaxValSize field value
// and a boolean to check if the value has been set.
func (o *JSKVBucketCreateRequest) GetMaxValSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxValSize, true
}

// SetMaxValSize sets field value
func (o *JSKVBucketCreateRequest) SetMaxValSize(v int32) {
	o.MaxValSize = v
}

// GetMirror returns the Mirror field value if set, zero value otherwise.
func (o *JSKVBucketCreateRequest) GetMirror() StreamSource {
	if o == nil || IsNil(o.Mirror) {
		var ret StreamSource
		return ret
	}
	return *o.Mirror
}

// GetMirrorOk returns a tuple with the Mirror field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSKVBucketCreateRequest) GetMirrorOk() (*StreamSource, bool) {
	if o == nil || IsNil(o.Mirror) {
		return nil, false
	}
	return o.Mirror, true
}

// HasMirror returns a boolean if a field has been set.
func (o *JSKVBucketCreateRequest) HasMirror() bool {
	if o != nil && !IsNil(o.Mirror) {
		return true
	}

	return false
}

// SetMirror gets a reference to the given StreamSource and assigns it to the Mirror field.
func (o *JSKVBucketCreateRequest) SetMirror(v StreamSource) {
	o.Mirror = &v
}

// GetPlacement returns the Placement field value if set, zero value otherwise.
func (o *JSKVBucketCreateRequest) GetPlacement() Placement {
	if o == nil || IsNil(o.Placement) {
		var ret Placement
		return ret
	}
	return *o.Placement
}

// GetPlacementOk returns a tuple with the Placement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSKVBucketCreateRequest) GetPlacementOk() (*Placement, bool) {
	if o == nil || IsNil(o.Placement) {
		return nil, false
	}
	return o.Placement, true
}

// HasPlacement returns a boolean if a field has been set.
func (o *JSKVBucketCreateRequest) HasPlacement() bool {
	if o != nil && !IsNil(o.Placement) {
		return true
	}

	return false
}

// SetPlacement gets a reference to the given Placement and assigns it to the Placement field.
func (o *JSKVBucketCreateRequest) SetPlacement(v Placement) {
	o.Placement = &v
}

// GetReplicas returns the Replicas field value
func (o *JSKVBucketCreateRequest) GetReplicas() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Replicas
}

// GetReplicasOk returns a tuple with the Replicas field value
// and a boolean to check if the value has been set.
func (o *JSKVBucketCreateRequest) GetReplicasOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Replicas, true
}

// SetReplicas sets field value
func (o *JSKVBucketCreateRequest) SetReplicas(v int32) {
	o.Replicas = v
}

// GetRepublish returns the Republish field value if set, zero value otherwise.
func (o *JSKVBucketCreateRequest) GetRepublish() RePublish {
	if o == nil || IsNil(o.Republish) {
		var ret RePublish
		return ret
	}
	return *o.Republish
}

// GetRepublishOk returns a tuple with the Republish field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSKVBucketCreateRequest) GetRepublishOk() (*RePublish, bool) {
	if o == nil || IsNil(o.Republish) {
		return nil, false
	}
	return o.Republish, true
}

// HasRepublish returns a boolean if a field has been set.
func (o *JSKVBucketCreateRequest) HasRepublish() bool {
	if o != nil && !IsNil(o.Republish) {
		return true
	}

	return false
}

// SetRepublish gets a reference to the given RePublish and assigns it to the Republish field.
func (o *JSKVBucketCreateRequest) SetRepublish(v RePublish) {
	o.Republish = &v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *JSKVBucketCreateRequest) GetSources() []StreamSource {
	if o == nil || IsNil(o.Sources) {
		var ret []StreamSource
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JSKVBucketCreateRequest) GetSourcesOk() ([]StreamSource, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *JSKVBucketCreateRequest) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []StreamSource and assigns it to the Sources field.
func (o *JSKVBucketCreateRequest) SetSources(v []StreamSource) {
	o.Sources = v
}

// GetStorage returns the Storage field value
func (o *JSKVBucketCreateRequest) GetStorage() StorageType {
	if o == nil {
		var ret StorageType
		return ret
	}

	return o.Storage
}

// GetStorageOk returns a tuple with the Storage field value
// and a boolean to check if the value has been set.
func (o *JSKVBucketCreateRequest) GetStorageOk() (*StorageType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Storage, true
}

// SetStorage sets field value
func (o *JSKVBucketCreateRequest) SetStorage(v StorageType) {
	o.Storage = v
}

// GetTtl returns the Ttl field value
func (o *JSKVBucketCreateRequest) GetTtl() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value
// and a boolean to check if the value has been set.
func (o *JSKVBucketCreateRequest) GetTtlOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ttl, true
}

// SetTtl sets field value
func (o *JSKVBucketCreateRequest) SetTtl(v int64) {
	o.Ttl = v
}

func (o JSKVBucketCreateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JSKVBucketCreateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bucket_name"] = o.BucketName
	toSerialize["description"] = o.Description
	toSerialize["history"] = o.History
	toSerialize["max_bytes"] = o.MaxBytes
	toSerialize["max_val_size"] = o.MaxValSize
	if !IsNil(o.Mirror) {
		toSerialize["mirror"] = o.Mirror
	}
	if !IsNil(o.Placement) {
		toSerialize["placement"] = o.Placement
	}
	toSerialize["replicas"] = o.Replicas
	if !IsNil(o.Republish) {
		toSerialize["republish"] = o.Republish
	}
	if !IsNil(o.Sources) {
		toSerialize["sources"] = o.Sources
	}
	toSerialize["storage"] = o.Storage
	toSerialize["ttl"] = o.Ttl
	return toSerialize, nil
}

func (o *JSKVBucketCreateRequest) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bucket_name",
		"description",
		"history",
		"max_bytes",
		"max_val_size",
		"replicas",
		"storage",
		"ttl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJSKVBucketCreateRequest := _JSKVBucketCreateRequest{}

	err = json.Unmarshal(bytes, &varJSKVBucketCreateRequest)

	if err != nil {
		return err
	}

	*o = JSKVBucketCreateRequest(varJSKVBucketCreateRequest)

	return err
}

type NullableJSKVBucketCreateRequest struct {
	value *JSKVBucketCreateRequest
	isSet bool
}

func (v NullableJSKVBucketCreateRequest) Get() *JSKVBucketCreateRequest {
	return v.value
}

func (v *NullableJSKVBucketCreateRequest) Set(val *JSKVBucketCreateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableJSKVBucketCreateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableJSKVBucketCreateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJSKVBucketCreateRequest(val *JSKVBucketCreateRequest) *NullableJSKVBucketCreateRequest {
	return &NullableJSKVBucketCreateRequest{value: val, isSet: true}
}

func (v NullableJSKVBucketCreateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJSKVBucketCreateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
