/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the ServerInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServerInfo{}

// ServerInfo ServerInfo identifies remote servers.
type ServerInfo struct {
	Cluster   *string   `json:"cluster,omitempty"`
	Domain    *string   `json:"domain,omitempty"`
	Host      string    `json:"host"`
	Id        string    `json:"id"`
	Jetstream bool      `json:"jetstream"`
	Name      string    `json:"name"`
	Seq       int32     `json:"seq"`
	Tags      []string  `json:"tags,omitempty"`
	Time      time.Time `json:"time"`
	Ver       string    `json:"ver"`
}

type _ServerInfo ServerInfo

// NewServerInfo instantiates a new ServerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServerInfo(host string, id string, jetstream bool, name string, seq int32, time time.Time, ver string) *ServerInfo {
	this := ServerInfo{}
	this.Host = host
	this.Id = id
	this.Jetstream = jetstream
	this.Name = name
	this.Seq = seq
	this.Time = time
	this.Ver = ver
	return &this
}

// NewServerInfoWithDefaults instantiates a new ServerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServerInfoWithDefaults() *ServerInfo {
	this := ServerInfo{}
	return &this
}

// GetCluster returns the Cluster field value if set, zero value otherwise.
func (o *ServerInfo) GetCluster() string {
	if o == nil || IsNil(o.Cluster) {
		var ret string
		return ret
	}
	return *o.Cluster
}

// GetClusterOk returns a tuple with the Cluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetClusterOk() (*string, bool) {
	if o == nil || IsNil(o.Cluster) {
		return nil, false
	}
	return o.Cluster, true
}

// HasCluster returns a boolean if a field has been set.
func (o *ServerInfo) HasCluster() bool {
	if o != nil && !IsNil(o.Cluster) {
		return true
	}

	return false
}

// SetCluster gets a reference to the given string and assigns it to the Cluster field.
func (o *ServerInfo) SetCluster(v string) {
	o.Cluster = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *ServerInfo) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *ServerInfo) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *ServerInfo) SetDomain(v string) {
	o.Domain = &v
}

// GetHost returns the Host field value
func (o *ServerInfo) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *ServerInfo) SetHost(v string) {
	o.Host = v
}

// GetId returns the Id field value
func (o *ServerInfo) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServerInfo) SetId(v string) {
	o.Id = v
}

// GetJetstream returns the Jetstream field value
func (o *ServerInfo) GetJetstream() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Jetstream
}

// GetJetstreamOk returns a tuple with the Jetstream field value
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetJetstreamOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Jetstream, true
}

// SetJetstream sets field value
func (o *ServerInfo) SetJetstream(v bool) {
	o.Jetstream = v
}

// GetName returns the Name field value
func (o *ServerInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ServerInfo) SetName(v string) {
	o.Name = v
}

// GetSeq returns the Seq field value
func (o *ServerInfo) GetSeq() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Seq
}

// GetSeqOk returns a tuple with the Seq field value
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetSeqOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Seq, true
}

// SetSeq sets field value
func (o *ServerInfo) SetSeq(v int32) {
	o.Seq = v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *ServerInfo) GetTags() []string {
	if o == nil || IsNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *ServerInfo) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *ServerInfo) SetTags(v []string) {
	o.Tags = v
}

// GetTime returns the Time field value
func (o *ServerInfo) GetTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Time
}

// GetTimeOk returns a tuple with the Time field value
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Time, true
}

// SetTime sets field value
func (o *ServerInfo) SetTime(v time.Time) {
	o.Time = v
}

// GetVer returns the Ver field value
func (o *ServerInfo) GetVer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ver
}

// GetVerOk returns a tuple with the Ver field value
// and a boolean to check if the value has been set.
func (o *ServerInfo) GetVerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ver, true
}

// SetVer sets field value
func (o *ServerInfo) SetVer(v string) {
	o.Ver = v
}

func (o ServerInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServerInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cluster) {
		toSerialize["cluster"] = o.Cluster
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	toSerialize["host"] = o.Host
	toSerialize["id"] = o.Id
	toSerialize["jetstream"] = o.Jetstream
	toSerialize["name"] = o.Name
	toSerialize["seq"] = o.Seq
	if !IsNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	toSerialize["time"] = o.Time
	toSerialize["ver"] = o.Ver
	return toSerialize, nil
}

func (o *ServerInfo) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"host",
		"id",
		"jetstream",
		"name",
		"seq",
		"time",
		"ver",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServerInfo := _ServerInfo{}

	err = json.Unmarshal(bytes, &varServerInfo)

	if err != nil {
		return err
	}

	*o = ServerInfo(varServerInfo)

	return err
}

type NullableServerInfo struct {
	value *ServerInfo
	isSet bool
}

func (v NullableServerInfo) Get() *ServerInfo {
	return v.value
}

func (v *NullableServerInfo) Set(val *ServerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableServerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableServerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServerInfo(val *ServerInfo) *NullableServerInfo {
	return &NullableServerInfo{value: val, isSet: true}
}

func (v NullableServerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
