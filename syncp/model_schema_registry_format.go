/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// SchemaRegistryFormat the model 'SchemaRegistryFormat'
type SchemaRegistryFormat string

// List of SchemaRegistryFormat
const (
	SCHEMAREGISTRYFORMAT_JSONSCHEMA SchemaRegistryFormat = "jsonschema"
	SCHEMAREGISTRYFORMAT_PROTOBUF   SchemaRegistryFormat = "protobuf"
	SCHEMAREGISTRYFORMAT_AVRO       SchemaRegistryFormat = "avro"
)

// All allowed values of SchemaRegistryFormat enum
var AllowedSchemaRegistryFormatEnumValues = []SchemaRegistryFormat{
	"jsonschema",
	"protobuf",
	"avro",
}

func (v *SchemaRegistryFormat) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SchemaRegistryFormat(value)
	for _, existing := range AllowedSchemaRegistryFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SchemaRegistryFormat", value)
}

// NewSchemaRegistryFormatFromValue returns a pointer to a valid SchemaRegistryFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSchemaRegistryFormatFromValue(v string) (*SchemaRegistryFormat, error) {
	ev := SchemaRegistryFormat(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SchemaRegistryFormat: valid values are %v", v, AllowedSchemaRegistryFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SchemaRegistryFormat) IsValid() bool {
	for _, existing := range AllowedSchemaRegistryFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SchemaRegistryFormat value
func (v SchemaRegistryFormat) Ptr() *SchemaRegistryFormat {
	return &v
}
