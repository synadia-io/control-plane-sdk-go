/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"fmt"
)

// SubjectExportChartTypes the model 'SubjectExportChartTypes'
type SubjectExportChartTypes string

// List of SubjectExportChartTypes
const (
	SUBJECTEXPORTCHARTTYPES_SERVICE_LATENCY SubjectExportChartTypes = "ServiceLatency"
	SUBJECTEXPORTCHARTTYPES_SYSTEM_LATENCY  SubjectExportChartTypes = "SystemLatency"
	SUBJECTEXPORTCHARTTYPES_TOTAL_LATENCY   SubjectExportChartTypes = "TotalLatency"
	SUBJECTEXPORTCHARTTYPES_THROUGHPUT      SubjectExportChartTypes = "Throughput"
	SUBJECTEXPORTCHARTTYPES_ERROR_RATE      SubjectExportChartTypes = "ErrorRate"
)

// All allowed values of SubjectExportChartTypes enum
var AllowedSubjectExportChartTypesEnumValues = []SubjectExportChartTypes{
	"ServiceLatency",
	"SystemLatency",
	"TotalLatency",
	"Throughput",
	"ErrorRate",
}

func (v *SubjectExportChartTypes) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SubjectExportChartTypes(value)
	for _, existing := range AllowedSubjectExportChartTypesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SubjectExportChartTypes", value)
}

// NewSubjectExportChartTypesFromValue returns a pointer to a valid SubjectExportChartTypes
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSubjectExportChartTypesFromValue(v string) (*SubjectExportChartTypes, error) {
	ev := SubjectExportChartTypes(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SubjectExportChartTypes: valid values are %v", v, AllowedSubjectExportChartTypesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SubjectExportChartTypes) IsValid() bool {
	for _, existing := range AllowedSubjectExportChartTypesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SubjectExportChartTypes value
func (v SubjectExportChartTypes) Ptr() *SubjectExportChartTypes {
	return &v
}

type NullableSubjectExportChartTypes struct {
	value *SubjectExportChartTypes
	isSet bool
}

func (v NullableSubjectExportChartTypes) Get() *SubjectExportChartTypes {
	return v.value
}

func (v *NullableSubjectExportChartTypes) Set(val *SubjectExportChartTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableSubjectExportChartTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableSubjectExportChartTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSubjectExportChartTypes(val *SubjectExportChartTypes) *NullableSubjectExportChartTypes {
	return &NullableSubjectExportChartTypes{value: val, isSet: true}
}

func (v NullableSubjectExportChartTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSubjectExportChartTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
