/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"fmt"
)

// checks if the AppPolicyStatement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppPolicyStatement{}

// AppPolicyStatement struct for AppPolicyStatement
type AppPolicyStatement struct {
	Action      []string        `json:"action"`
	Effect      []AppRoleEffect `json:"effect"`
	Name        string          `json:"name"`
	OperationId *string         `json:"operation_id,omitempty"`
	Resource    []string        `json:"resource"`
	Service     *string         `json:"service,omitempty"`
}

type _AppPolicyStatement AppPolicyStatement

// NewAppPolicyStatement instantiates a new AppPolicyStatement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppPolicyStatement(action []string, effect []AppRoleEffect, name string, resource []string) *AppPolicyStatement {
	this := AppPolicyStatement{}
	this.Action = action
	this.Effect = effect
	this.Name = name
	this.Resource = resource
	return &this
}

// NewAppPolicyStatementWithDefaults instantiates a new AppPolicyStatement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppPolicyStatementWithDefaults() *AppPolicyStatement {
	this := AppPolicyStatement{}
	return &this
}

// GetAction returns the Action field value
func (o *AppPolicyStatement) GetAction() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *AppPolicyStatement) GetActionOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Action, true
}

// SetAction sets field value
func (o *AppPolicyStatement) SetAction(v []string) {
	o.Action = v
}

// GetEffect returns the Effect field value
func (o *AppPolicyStatement) GetEffect() []AppRoleEffect {
	if o == nil {
		var ret []AppRoleEffect
		return ret
	}

	return o.Effect
}

// GetEffectOk returns a tuple with the Effect field value
// and a boolean to check if the value has been set.
func (o *AppPolicyStatement) GetEffectOk() ([]AppRoleEffect, bool) {
	if o == nil {
		return nil, false
	}
	return o.Effect, true
}

// SetEffect sets field value
func (o *AppPolicyStatement) SetEffect(v []AppRoleEffect) {
	o.Effect = v
}

// GetName returns the Name field value
func (o *AppPolicyStatement) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AppPolicyStatement) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AppPolicyStatement) SetName(v string) {
	o.Name = v
}

// GetOperationId returns the OperationId field value if set, zero value otherwise.
func (o *AppPolicyStatement) GetOperationId() string {
	if o == nil || IsNil(o.OperationId) {
		var ret string
		return ret
	}
	return *o.OperationId
}

// GetOperationIdOk returns a tuple with the OperationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppPolicyStatement) GetOperationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OperationId) {
		return nil, false
	}
	return o.OperationId, true
}

// HasOperationId returns a boolean if a field has been set.
func (o *AppPolicyStatement) HasOperationId() bool {
	if o != nil && !IsNil(o.OperationId) {
		return true
	}

	return false
}

// SetOperationId gets a reference to the given string and assigns it to the OperationId field.
func (o *AppPolicyStatement) SetOperationId(v string) {
	o.OperationId = &v
}

// GetResource returns the Resource field value
func (o *AppPolicyStatement) GetResource() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Resource
}

// GetResourceOk returns a tuple with the Resource field value
// and a boolean to check if the value has been set.
func (o *AppPolicyStatement) GetResourceOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Resource, true
}

// SetResource sets field value
func (o *AppPolicyStatement) SetResource(v []string) {
	o.Resource = v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *AppPolicyStatement) GetService() string {
	if o == nil || IsNil(o.Service) {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppPolicyStatement) GetServiceOk() (*string, bool) {
	if o == nil || IsNil(o.Service) {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *AppPolicyStatement) HasService() bool {
	if o != nil && !IsNil(o.Service) {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *AppPolicyStatement) SetService(v string) {
	o.Service = &v
}

func (o AppPolicyStatement) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppPolicyStatement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	toSerialize["effect"] = o.Effect
	toSerialize["name"] = o.Name
	if !IsNil(o.OperationId) {
		toSerialize["operation_id"] = o.OperationId
	}
	toSerialize["resource"] = o.Resource
	if !IsNil(o.Service) {
		toSerialize["service"] = o.Service
	}
	return toSerialize, nil
}

func (o *AppPolicyStatement) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"effect",
		"name",
		"resource",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAppPolicyStatement := _AppPolicyStatement{}

	err = json.Unmarshal(bytes, &varAppPolicyStatement)

	if err != nil {
		return err
	}

	*o = AppPolicyStatement(varAppPolicyStatement)

	return err
}

type NullableAppPolicyStatement struct {
	value *AppPolicyStatement
	isSet bool
}

func (v NullableAppPolicyStatement) Get() *AppPolicyStatement {
	return v.value
}

func (v *NullableAppPolicyStatement) Set(val *AppPolicyStatement) {
	v.value = val
	v.isSet = true
}

func (v NullableAppPolicyStatement) IsSet() bool {
	return v.isSet
}

func (v *NullableAppPolicyStatement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppPolicyStatement(val *AppPolicyStatement) *NullableAppPolicyStatement {
	return &NullableAppPolicyStatement{value: val, isSet: true}
}

func (v NullableAppPolicyStatement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppPolicyStatement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
