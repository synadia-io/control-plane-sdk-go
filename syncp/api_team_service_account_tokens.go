/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type TeamServiceAccountTokensAPI interface {

	/*
		DeleteTeamServiceAccountToken Delete Team Service Account Token

		Delete Team Service Account Token

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param tokenId
		@return ApiDeleteTeamServiceAccountTokenRequest
	*/
	DeleteTeamServiceAccountToken(ctx context.Context, tokenId string) ApiDeleteTeamServiceAccountTokenRequest

	// DeleteTeamServiceAccountTokenExecute executes the request
	DeleteTeamServiceAccountTokenExecute(r ApiDeleteTeamServiceAccountTokenRequest) (*http.Response, error)

	/*
		GetTeamServiceAccountToken Get Team Service Account Token

		Get Team Service Account Token

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param tokenId
		@return ApiGetTeamServiceAccountTokenRequest
	*/
	GetTeamServiceAccountToken(ctx context.Context, tokenId string) ApiGetTeamServiceAccountTokenRequest

	// GetTeamServiceAccountTokenExecute executes the request
	//  @return AppUserAccessTokenViewResponse
	GetTeamServiceAccountTokenExecute(r ApiGetTeamServiceAccountTokenRequest) (*AppUserAccessTokenViewResponse, *http.Response, error)

	/*
		UpdateTeamServiceAccountToken Update Team Service Account Token

		Update Team Service Account Token

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param tokenId
		@return ApiUpdateTeamServiceAccountTokenRequest
	*/
	UpdateTeamServiceAccountToken(ctx context.Context, tokenId string) ApiUpdateTeamServiceAccountTokenRequest

	// UpdateTeamServiceAccountTokenExecute executes the request
	//  @return AppUserAccessTokenViewResponse
	UpdateTeamServiceAccountTokenExecute(r ApiUpdateTeamServiceAccountTokenRequest) (*AppUserAccessTokenViewResponse, *http.Response, error)
}

// TeamServiceAccountTokensAPIService TeamServiceAccountTokensAPI service
type TeamServiceAccountTokensAPIService service

type ApiDeleteTeamServiceAccountTokenRequest struct {
	ctx        context.Context
	ApiService TeamServiceAccountTokensAPI
	tokenId    string
}

func (r ApiDeleteTeamServiceAccountTokenRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteTeamServiceAccountTokenExecute(r)
}

/*
DeleteTeamServiceAccountToken Delete Team Service Account Token

Delete Team Service Account Token

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tokenId
	@return ApiDeleteTeamServiceAccountTokenRequest
*/
func (a *TeamServiceAccountTokensAPIService) DeleteTeamServiceAccountToken(ctx context.Context, tokenId string) ApiDeleteTeamServiceAccountTokenRequest {
	return ApiDeleteTeamServiceAccountTokenRequest{
		ApiService: a,
		ctx:        ctx,
		tokenId:    tokenId,
	}
}

// Execute executes the request
func (a *TeamServiceAccountTokensAPIService) DeleteTeamServiceAccountTokenExecute(r ApiDeleteTeamServiceAccountTokenRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamServiceAccountTokensAPIService.DeleteTeamServiceAccountToken")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service-account-tokens/team/{tokenId}"
	localVarPath = strings.Replace(localVarPath, "{"+"tokenId"+"}", url.PathEscape(parameterValueToString(r.tokenId, "tokenId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetTeamServiceAccountTokenRequest struct {
	ctx        context.Context
	ApiService TeamServiceAccountTokensAPI
	tokenId    string
}

func (r ApiGetTeamServiceAccountTokenRequest) Execute() (*AppUserAccessTokenViewResponse, *http.Response, error) {
	return r.ApiService.GetTeamServiceAccountTokenExecute(r)
}

/*
GetTeamServiceAccountToken Get Team Service Account Token

Get Team Service Account Token

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tokenId
	@return ApiGetTeamServiceAccountTokenRequest
*/
func (a *TeamServiceAccountTokensAPIService) GetTeamServiceAccountToken(ctx context.Context, tokenId string) ApiGetTeamServiceAccountTokenRequest {
	return ApiGetTeamServiceAccountTokenRequest{
		ApiService: a,
		ctx:        ctx,
		tokenId:    tokenId,
	}
}

// Execute executes the request
//
//	@return AppUserAccessTokenViewResponse
func (a *TeamServiceAccountTokensAPIService) GetTeamServiceAccountTokenExecute(r ApiGetTeamServiceAccountTokenRequest) (*AppUserAccessTokenViewResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AppUserAccessTokenViewResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamServiceAccountTokensAPIService.GetTeamServiceAccountToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service-account-tokens/team/{tokenId}"
	localVarPath = strings.Replace(localVarPath, "{"+"tokenId"+"}", url.PathEscape(parameterValueToString(r.tokenId, "tokenId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateTeamServiceAccountTokenRequest struct {
	ctx                             context.Context
	ApiService                      TeamServiceAccountTokensAPI
	tokenId                         string
	appUserAccessTokenUpdateRequest *AppUserAccessTokenUpdateRequest
}

func (r ApiUpdateTeamServiceAccountTokenRequest) AppUserAccessTokenUpdateRequest(appUserAccessTokenUpdateRequest AppUserAccessTokenUpdateRequest) ApiUpdateTeamServiceAccountTokenRequest {
	r.appUserAccessTokenUpdateRequest = &appUserAccessTokenUpdateRequest
	return r
}

func (r ApiUpdateTeamServiceAccountTokenRequest) Execute() (*AppUserAccessTokenViewResponse, *http.Response, error) {
	return r.ApiService.UpdateTeamServiceAccountTokenExecute(r)
}

/*
UpdateTeamServiceAccountToken Update Team Service Account Token

Update Team Service Account Token

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param tokenId
	@return ApiUpdateTeamServiceAccountTokenRequest
*/
func (a *TeamServiceAccountTokensAPIService) UpdateTeamServiceAccountToken(ctx context.Context, tokenId string) ApiUpdateTeamServiceAccountTokenRequest {
	return ApiUpdateTeamServiceAccountTokenRequest{
		ApiService: a,
		ctx:        ctx,
		tokenId:    tokenId,
	}
}

// Execute executes the request
//
//	@return AppUserAccessTokenViewResponse
func (a *TeamServiceAccountTokensAPIService) UpdateTeamServiceAccountTokenExecute(r ApiUpdateTeamServiceAccountTokenRequest) (*AppUserAccessTokenViewResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPatch
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *AppUserAccessTokenViewResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TeamServiceAccountTokensAPIService.UpdateTeamServiceAccountToken")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/service-account-tokens/team/{tokenId}"
	localVarPath = strings.Replace(localVarPath, "{"+"tokenId"+"}", url.PathEscape(parameterValueToString(r.tokenId, "tokenId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.appUserAccessTokenUpdateRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
