/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"fmt"
)

// checks if the TenantLimits type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TenantLimits{}

// TenantLimits struct for TenantLimits
type TenantLimits struct {
	NumAccounts    int32          `json:"num_accounts"`
	ResourceLimits OperatorLimits `json:"resource_limits"`
}

type _TenantLimits TenantLimits

// NewTenantLimits instantiates a new TenantLimits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantLimits(numAccounts int32, resourceLimits OperatorLimits) *TenantLimits {
	this := TenantLimits{}
	this.NumAccounts = numAccounts
	this.ResourceLimits = resourceLimits
	return &this
}

// NewTenantLimitsWithDefaults instantiates a new TenantLimits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantLimitsWithDefaults() *TenantLimits {
	this := TenantLimits{}
	return &this
}

// GetNumAccounts returns the NumAccounts field value
func (o *TenantLimits) GetNumAccounts() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumAccounts
}

// GetNumAccountsOk returns a tuple with the NumAccounts field value
// and a boolean to check if the value has been set.
func (o *TenantLimits) GetNumAccountsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumAccounts, true
}

// SetNumAccounts sets field value
func (o *TenantLimits) SetNumAccounts(v int32) {
	o.NumAccounts = v
}

// GetResourceLimits returns the ResourceLimits field value
func (o *TenantLimits) GetResourceLimits() OperatorLimits {
	if o == nil {
		var ret OperatorLimits
		return ret
	}

	return o.ResourceLimits
}

// GetResourceLimitsOk returns a tuple with the ResourceLimits field value
// and a boolean to check if the value has been set.
func (o *TenantLimits) GetResourceLimitsOk() (*OperatorLimits, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ResourceLimits, true
}

// SetResourceLimits sets field value
func (o *TenantLimits) SetResourceLimits(v OperatorLimits) {
	o.ResourceLimits = v
}

func (o TenantLimits) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenantLimits) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["num_accounts"] = o.NumAccounts
	toSerialize["resource_limits"] = o.ResourceLimits
	return toSerialize, nil
}

func (o *TenantLimits) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"num_accounts",
		"resource_limits",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTenantLimits := _TenantLimits{}

	err = json.Unmarshal(bytes, &varTenantLimits)

	if err != nil {
		return err
	}

	*o = TenantLimits(varTenantLimits)

	return err
}

type NullableTenantLimits struct {
	value *TenantLimits
	isSet bool
}

func (v NullableTenantLimits) Get() *TenantLimits {
	return v.value
}

func (v *NullableTenantLimits) Set(val *TenantLimits) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantLimits(val *TenantLimits) *NullableTenantLimits {
	return &NullableTenantLimits{value: val, isSet: true}
}

func (v NullableTenantLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
