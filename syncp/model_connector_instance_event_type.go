/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// ConnectorInstanceEventType the model 'ConnectorInstanceEventType'
type ConnectorInstanceEventType string

// List of ConnectorInstanceEventType
const (
	CONNECTORINSTANCEEVENTTYPE_SCHEDULED ConnectorInstanceEventType = "scheduled"
	CONNECTORINSTANCEEVENTTYPE_CREATED   ConnectorInstanceEventType = "created"
	CONNECTORINSTANCEEVENTTYPE_RUNNING   ConnectorInstanceEventType = "running"
	CONNECTORINSTANCEEVENTTYPE_STOPPED   ConnectorInstanceEventType = "stopped"
	CONNECTORINSTANCEEVENTTYPE_FAILED    ConnectorInstanceEventType = "failed"
)

// All allowed values of ConnectorInstanceEventType enum
var AllowedConnectorInstanceEventTypeEnumValues = []ConnectorInstanceEventType{
	"scheduled",
	"created",
	"running",
	"stopped",
	"failed",
}

func (v *ConnectorInstanceEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectorInstanceEventType(value)
	for _, existing := range AllowedConnectorInstanceEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectorInstanceEventType", value)
}

// NewConnectorInstanceEventTypeFromValue returns a pointer to a valid ConnectorInstanceEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectorInstanceEventTypeFromValue(v string) (*ConnectorInstanceEventType, error) {
	ev := ConnectorInstanceEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectorInstanceEventType: valid values are %v", v, AllowedConnectorInstanceEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectorInstanceEventType) IsValid() bool {
	for _, existing := range AllowedConnectorInstanceEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectorInstanceEventType value
func (v ConnectorInstanceEventType) Ptr() *ConnectorInstanceEventType {
	return &v
}
