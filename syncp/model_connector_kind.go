/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// ConnectorKind -- Control
type ConnectorKind string

// List of ConnectorKind
const (
	CONNECTORKIND_INLET   ConnectorKind = "inlet"
	CONNECTORKIND_OUTLET  ConnectorKind = "outlet"
	CONNECTORKIND_UNKNOWN ConnectorKind = "unknown"
)

// All allowed values of ConnectorKind enum
var AllowedConnectorKindEnumValues = []ConnectorKind{
	"inlet",
	"outlet",
	"unknown",
}

func (v *ConnectorKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ConnectorKind(value)
	for _, existing := range AllowedConnectorKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ConnectorKind", value)
}

// NewConnectorKindFromValue returns a pointer to a valid ConnectorKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewConnectorKindFromValue(v string) (*ConnectorKind, error) {
	ev := ConnectorKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ConnectorKind: valid values are %v", v, AllowedConnectorKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ConnectorKind) IsValid() bool {
	for _, existing := range AllowedConnectorKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ConnectorKind value
func (v ConnectorKind) Ptr() *ConnectorKind {
	return &v
}
