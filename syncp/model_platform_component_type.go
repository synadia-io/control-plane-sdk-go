/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// PlatformComponentType the model 'PlatformComponentType'
type PlatformComponentType string

// List of PlatformComponentType
const (
	PLATFORMCOMPONENTTYPE_HTTP_GATEWAY    PlatformComponentType = "http_gateway"
	PLATFORMCOMPONENTTYPE_CONNECTORS      PlatformComponentType = "connectors"
	PLATFORMCOMPONENTTYPE_AUTHENTICATORS  PlatformComponentType = "authenticators"
	PLATFORMCOMPONENTTYPE_WORKLOADS       PlatformComponentType = "workloads"
	PLATFORMCOMPONENTTYPE_SCRAPER         PlatformComponentType = "scraper"
	PLATFORMCOMPONENTTYPE_SCHEMA_REGISTRY PlatformComponentType = "schema_registry"
)

// All allowed values of PlatformComponentType enum
var AllowedPlatformComponentTypeEnumValues = []PlatformComponentType{
	"http_gateway",
	"connectors",
	"authenticators",
	"workloads",
	"scraper",
	"schema_registry",
}

func (v *PlatformComponentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PlatformComponentType(value)
	for _, existing := range AllowedPlatformComponentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PlatformComponentType", value)
}

// NewPlatformComponentTypeFromValue returns a pointer to a valid PlatformComponentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlatformComponentTypeFromValue(v string) (*PlatformComponentType, error) {
	ev := PlatformComponentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PlatformComponentType: valid values are %v", v, AllowedPlatformComponentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PlatformComponentType) IsValid() bool {
	for _, existing := range AllowedPlatformComponentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PlatformComponentType value
func (v PlatformComponentType) Ptr() *PlatformComponentType {
	return &v
}
