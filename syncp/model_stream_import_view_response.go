/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the StreamImportViewResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StreamImportViewResponse{}

// StreamImportViewResponse struct for StreamImportViewResponse
type StreamImportViewResponse struct {
	AccountId               string    `json:"account_id"`
	Created                 time.Time `json:"created"`
	DeliverSubject          string    `json:"deliver_subject"`
	Id                      string    `json:"id"`
	JsSubjectPrefix         string    `json:"js_subject_prefix"`
	RemoteAccountNkeyPublic string    `json:"remote_account_nkey_public"`
	StreamName              string    `json:"stream_name"`
}

type _StreamImportViewResponse StreamImportViewResponse

// NewStreamImportViewResponse instantiates a new StreamImportViewResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStreamImportViewResponse(accountId string, created time.Time, deliverSubject string, id string, jsSubjectPrefix string, remoteAccountNkeyPublic string, streamName string) *StreamImportViewResponse {
	this := StreamImportViewResponse{}
	this.AccountId = accountId
	this.Created = created
	this.DeliverSubject = deliverSubject
	this.Id = id
	this.JsSubjectPrefix = jsSubjectPrefix
	this.RemoteAccountNkeyPublic = remoteAccountNkeyPublic
	this.StreamName = streamName
	return &this
}

// NewStreamImportViewResponseWithDefaults instantiates a new StreamImportViewResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStreamImportViewResponseWithDefaults() *StreamImportViewResponse {
	this := StreamImportViewResponse{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *StreamImportViewResponse) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *StreamImportViewResponse) GetAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *StreamImportViewResponse) SetAccountId(v string) {
	o.AccountId = v
}

// GetCreated returns the Created field value
func (o *StreamImportViewResponse) GetCreated() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.Created
}

// GetCreatedOk returns a tuple with the Created field value
// and a boolean to check if the value has been set.
func (o *StreamImportViewResponse) GetCreatedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Created, true
}

// SetCreated sets field value
func (o *StreamImportViewResponse) SetCreated(v time.Time) {
	o.Created = v
}

// GetDeliverSubject returns the DeliverSubject field value
func (o *StreamImportViewResponse) GetDeliverSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeliverSubject
}

// GetDeliverSubjectOk returns a tuple with the DeliverSubject field value
// and a boolean to check if the value has been set.
func (o *StreamImportViewResponse) GetDeliverSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeliverSubject, true
}

// SetDeliverSubject sets field value
func (o *StreamImportViewResponse) SetDeliverSubject(v string) {
	o.DeliverSubject = v
}

// GetId returns the Id field value
func (o *StreamImportViewResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *StreamImportViewResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *StreamImportViewResponse) SetId(v string) {
	o.Id = v
}

// GetJsSubjectPrefix returns the JsSubjectPrefix field value
func (o *StreamImportViewResponse) GetJsSubjectPrefix() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JsSubjectPrefix
}

// GetJsSubjectPrefixOk returns a tuple with the JsSubjectPrefix field value
// and a boolean to check if the value has been set.
func (o *StreamImportViewResponse) GetJsSubjectPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JsSubjectPrefix, true
}

// SetJsSubjectPrefix sets field value
func (o *StreamImportViewResponse) SetJsSubjectPrefix(v string) {
	o.JsSubjectPrefix = v
}

// GetRemoteAccountNkeyPublic returns the RemoteAccountNkeyPublic field value
func (o *StreamImportViewResponse) GetRemoteAccountNkeyPublic() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RemoteAccountNkeyPublic
}

// GetRemoteAccountNkeyPublicOk returns a tuple with the RemoteAccountNkeyPublic field value
// and a boolean to check if the value has been set.
func (o *StreamImportViewResponse) GetRemoteAccountNkeyPublicOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteAccountNkeyPublic, true
}

// SetRemoteAccountNkeyPublic sets field value
func (o *StreamImportViewResponse) SetRemoteAccountNkeyPublic(v string) {
	o.RemoteAccountNkeyPublic = v
}

// GetStreamName returns the StreamName field value
func (o *StreamImportViewResponse) GetStreamName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StreamName
}

// GetStreamNameOk returns a tuple with the StreamName field value
// and a boolean to check if the value has been set.
func (o *StreamImportViewResponse) GetStreamNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StreamName, true
}

// SetStreamName sets field value
func (o *StreamImportViewResponse) SetStreamName(v string) {
	o.StreamName = v
}

func (o StreamImportViewResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StreamImportViewResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["account_id"] = o.AccountId
	toSerialize["created"] = o.Created
	toSerialize["deliver_subject"] = o.DeliverSubject
	toSerialize["id"] = o.Id
	toSerialize["js_subject_prefix"] = o.JsSubjectPrefix
	toSerialize["remote_account_nkey_public"] = o.RemoteAccountNkeyPublic
	toSerialize["stream_name"] = o.StreamName
	return toSerialize, nil
}

func (o *StreamImportViewResponse) UnmarshalJSON(bytes []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"account_id",
		"created",
		"deliver_subject",
		"id",
		"js_subject_prefix",
		"remote_account_nkey_public",
		"stream_name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(bytes, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStreamImportViewResponse := _StreamImportViewResponse{}

	err = json.Unmarshal(bytes, &varStreamImportViewResponse)

	if err != nil {
		return err
	}

	*o = StreamImportViewResponse(varStreamImportViewResponse)

	return err
}

type NullableStreamImportViewResponse struct {
	value *StreamImportViewResponse
	isSet bool
}

func (v NullableStreamImportViewResponse) Get() *StreamImportViewResponse {
	return v.value
}

func (v *NullableStreamImportViewResponse) Set(val *StreamImportViewResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableStreamImportViewResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableStreamImportViewResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStreamImportViewResponse(val *StreamImportViewResponse) *NullableStreamImportViewResponse {
	return &NullableStreamImportViewResponse{value: val, isSet: true}
}

func (v NullableStreamImportViewResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStreamImportViewResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
