/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// NatsUserIssuanceStatus NatsUserIssuanceStatus indicates status of an issuance relative to its signing key In context of issuance, status indicates following:   Active - Signing key exists, and no revocations   Revoked - Signing key exists, and has revocation entry with RevokedBefore > IatMax   Partially Revoked - Signing key exists, and has revocation entry with IssMax > RevokedBefore > IatMin   SK Disabled - Signing key is disabled   SK Group Disabled - Signing key group is disabled   SK Removed - Signing key no longer exists   Expired - All issuances are expired In context of an issuance event, status indicates following:   Active - Signing key exists, and no revocations   Revoked - Signing key exists, and has revocation entry with RevokedBefore > Iat   SK Disabled - Signing key is disabled   SK Group Disabled - Signing key group is disabled   SK Removed - Signing key no longer exists   Expired - Expired time set on credential has passed
type NatsUserIssuanceStatus string

// List of NatsUserIssuanceStatus
const (
	NATSUSERISSUANCESTATUS_ACTIVE            NatsUserIssuanceStatus = "Active"
	NATSUSERISSUANCESTATUS_REVOKED           NatsUserIssuanceStatus = "Revoked"
	NATSUSERISSUANCESTATUS_PARTIALLY_REVOKED NatsUserIssuanceStatus = "Partially Revoked"
	NATSUSERISSUANCESTATUS_SK_DISABLED       NatsUserIssuanceStatus = "SK Disabled"
	NATSUSERISSUANCESTATUS_SK_GROUP_DISABLED NatsUserIssuanceStatus = "SK Group Disabled"
	NATSUSERISSUANCESTATUS_SK_REMOVED        NatsUserIssuanceStatus = "SK Removed"
	NATSUSERISSUANCESTATUS_EXPIRED           NatsUserIssuanceStatus = "Expired"
)

// All allowed values of NatsUserIssuanceStatus enum
var AllowedNatsUserIssuanceStatusEnumValues = []NatsUserIssuanceStatus{
	"Active",
	"Revoked",
	"Partially Revoked",
	"SK Disabled",
	"SK Group Disabled",
	"SK Removed",
	"Expired",
}

func (v *NatsUserIssuanceStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NatsUserIssuanceStatus(value)
	for _, existing := range AllowedNatsUserIssuanceStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NatsUserIssuanceStatus", value)
}

// NewNatsUserIssuanceStatusFromValue returns a pointer to a valid NatsUserIssuanceStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNatsUserIssuanceStatusFromValue(v string) (*NatsUserIssuanceStatus, error) {
	ev := NatsUserIssuanceStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NatsUserIssuanceStatus: valid values are %v", v, AllowedNatsUserIssuanceStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NatsUserIssuanceStatus) IsValid() bool {
	for _, existing := range AllowedNatsUserIssuanceStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NatsUserIssuanceStatus value
func (v NatsUserIssuanceStatus) Ptr() *NatsUserIssuanceStatus {
	return &v
}
