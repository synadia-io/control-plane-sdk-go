/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// SystemLogLevel the model 'SystemLogLevel'
type SystemLogLevel string

// List of SystemLogLevel
const (
	SYSTEMLOGLEVEL_PANIC SystemLogLevel = "panic"
	SYSTEMLOGLEVEL_FATAL SystemLogLevel = "fatal"
	SYSTEMLOGLEVEL_ERROR SystemLogLevel = "error"
	SYSTEMLOGLEVEL_WARN  SystemLogLevel = "warn"
	SYSTEMLOGLEVEL_INFO  SystemLogLevel = "info"
	SYSTEMLOGLEVEL_DEBUG SystemLogLevel = "debug"
	SYSTEMLOGLEVEL_TRACE SystemLogLevel = "trace"
)

// All allowed values of SystemLogLevel enum
var AllowedSystemLogLevelEnumValues = []SystemLogLevel{
	"panic",
	"fatal",
	"error",
	"warn",
	"info",
	"debug",
	"trace",
}

func (v *SystemLogLevel) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := SystemLogLevel(value)
	for _, existing := range AllowedSystemLogLevelEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid SystemLogLevel", value)
}

// NewSystemLogLevelFromValue returns a pointer to a valid SystemLogLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSystemLogLevelFromValue(v string) (*SystemLogLevel, error) {
	ev := SystemLogLevel(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for SystemLogLevel: valid values are %v", v, AllowedSystemLogLevelEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SystemLogLevel) IsValid() bool {
	for _, existing := range AllowedSystemLogLevelEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to SystemLogLevel value
func (v SystemLogLevel) Ptr() *SystemLogLevel {
	return &v
}
