/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)

type ComponentVersionsAPI interface {

	/*
		GetAvailableComponentVersions Get Available Component Versions

		Get available component versions

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetAvailableComponentVersionsRequest
	*/
	GetAvailableComponentVersions(ctx context.Context) ApiGetAvailableComponentVersionsRequest

	// GetAvailableComponentVersionsExecute executes the request
	//  @return map[string][]AvailableChartVersion
	GetAvailableComponentVersionsExecute(r ApiGetAvailableComponentVersionsRequest) (*map[string][]AvailableChartVersion, *http.Response, error)

	/*
		GetAvailableComponentVersionsByType Get Available Component Versions By Type

		Get available component versions by type

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@return ApiGetAvailableComponentVersionsByTypeRequest
	*/
	GetAvailableComponentVersionsByType(ctx context.Context) ApiGetAvailableComponentVersionsByTypeRequest

	// GetAvailableComponentVersionsByTypeExecute executes the request
	//  @return []AvailableChartVersion
	GetAvailableComponentVersionsByTypeExecute(r ApiGetAvailableComponentVersionsByTypeRequest) ([]AvailableChartVersion, *http.Response, error)
}

// ComponentVersionsAPIService ComponentVersionsAPI service
type ComponentVersionsAPIService service

type ApiGetAvailableComponentVersionsRequest struct {
	ctx        context.Context
	ApiService ComponentVersionsAPI
}

func (r ApiGetAvailableComponentVersionsRequest) Execute() (*map[string][]AvailableChartVersion, *http.Response, error) {
	return r.ApiService.GetAvailableComponentVersionsExecute(r)
}

/*
GetAvailableComponentVersions Get Available Component Versions

Get available component versions

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAvailableComponentVersionsRequest
*/
func (a *ComponentVersionsAPIService) GetAvailableComponentVersions(ctx context.Context) ApiGetAvailableComponentVersionsRequest {
	return ApiGetAvailableComponentVersionsRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return map[string][]AvailableChartVersion
func (a *ComponentVersionsAPIService) GetAvailableComponentVersionsExecute(r ApiGetAvailableComponentVersionsRequest) (*map[string][]AvailableChartVersion, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *map[string][]AvailableChartVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentVersionsAPIService.GetAvailableComponentVersions")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/beta/component-versions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetAvailableComponentVersionsByTypeRequest struct {
	ctx                               context.Context
	ApiService                        ComponentVersionsAPI
	availableComponentVersionsRequest *AvailableComponentVersionsRequest
}

func (r ApiGetAvailableComponentVersionsByTypeRequest) AvailableComponentVersionsRequest(availableComponentVersionsRequest AvailableComponentVersionsRequest) ApiGetAvailableComponentVersionsByTypeRequest {
	r.availableComponentVersionsRequest = &availableComponentVersionsRequest
	return r
}

func (r ApiGetAvailableComponentVersionsByTypeRequest) Execute() ([]AvailableChartVersion, *http.Response, error) {
	return r.ApiService.GetAvailableComponentVersionsByTypeExecute(r)
}

/*
GetAvailableComponentVersionsByType Get Available Component Versions By Type

Get available component versions by type

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAvailableComponentVersionsByTypeRequest
*/
func (a *ComponentVersionsAPIService) GetAvailableComponentVersionsByType(ctx context.Context) ApiGetAvailableComponentVersionsByTypeRequest {
	return ApiGetAvailableComponentVersionsByTypeRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return []AvailableChartVersion
func (a *ComponentVersionsAPIService) GetAvailableComponentVersionsByTypeExecute(r ApiGetAvailableComponentVersionsByTypeRequest) ([]AvailableChartVersion, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodPost
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []AvailableChartVersion
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ComponentVersionsAPIService.GetAvailableComponentVersionsByType")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/core/beta/component-versions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.availableComponentVersionsRequest
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
