/*
Synadia Control Plane

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
)

// checks if the ImportsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportsInner{}

// ImportsInner struct for ImportsInner
type ImportsInner struct {
	Account *string `json:"account,omitempty"`
	// Subject is a string that represents a NATS subject
	LocalSubject *string `json:"local_subject,omitempty"`
	Name         *string `json:"name,omitempty"`
	Share        *bool   `json:"share,omitempty"`
	// Subject is a string that represents a NATS subject
	Subject *string `json:"subject,omitempty"`
	// Subject is a string that represents a NATS subject
	To    *string     `json:"to,omitempty"`
	Token *string     `json:"token,omitempty"`
	Type  *ExportType `json:"type,omitempty"`
}

// NewImportsInner instantiates a new ImportsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportsInner() *ImportsInner {
	this := ImportsInner{}
	return &this
}

// NewImportsInnerWithDefaults instantiates a new ImportsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportsInnerWithDefaults() *ImportsInner {
	this := ImportsInner{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *ImportsInner) GetAccount() string {
	if o == nil || IsNil(o.Account) {
		var ret string
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportsInner) GetAccountOk() (*string, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *ImportsInner) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given string and assigns it to the Account field.
func (o *ImportsInner) SetAccount(v string) {
	o.Account = &v
}

// GetLocalSubject returns the LocalSubject field value if set, zero value otherwise.
func (o *ImportsInner) GetLocalSubject() string {
	if o == nil || IsNil(o.LocalSubject) {
		var ret string
		return ret
	}
	return *o.LocalSubject
}

// GetLocalSubjectOk returns a tuple with the LocalSubject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportsInner) GetLocalSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.LocalSubject) {
		return nil, false
	}
	return o.LocalSubject, true
}

// HasLocalSubject returns a boolean if a field has been set.
func (o *ImportsInner) HasLocalSubject() bool {
	if o != nil && !IsNil(o.LocalSubject) {
		return true
	}

	return false
}

// SetLocalSubject gets a reference to the given string and assigns it to the LocalSubject field.
func (o *ImportsInner) SetLocalSubject(v string) {
	o.LocalSubject = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ImportsInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportsInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ImportsInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ImportsInner) SetName(v string) {
	o.Name = &v
}

// GetShare returns the Share field value if set, zero value otherwise.
func (o *ImportsInner) GetShare() bool {
	if o == nil || IsNil(o.Share) {
		var ret bool
		return ret
	}
	return *o.Share
}

// GetShareOk returns a tuple with the Share field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportsInner) GetShareOk() (*bool, bool) {
	if o == nil || IsNil(o.Share) {
		return nil, false
	}
	return o.Share, true
}

// HasShare returns a boolean if a field has been set.
func (o *ImportsInner) HasShare() bool {
	if o != nil && !IsNil(o.Share) {
		return true
	}

	return false
}

// SetShare gets a reference to the given bool and assigns it to the Share field.
func (o *ImportsInner) SetShare(v bool) {
	o.Share = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *ImportsInner) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportsInner) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *ImportsInner) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *ImportsInner) SetSubject(v string) {
	o.Subject = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *ImportsInner) GetTo() string {
	if o == nil || IsNil(o.To) {
		var ret string
		return ret
	}
	return *o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportsInner) GetToOk() (*string, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *ImportsInner) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given string and assigns it to the To field.
func (o *ImportsInner) SetTo(v string) {
	o.To = &v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *ImportsInner) GetToken() string {
	if o == nil || IsNil(o.Token) {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportsInner) GetTokenOk() (*string, bool) {
	if o == nil || IsNil(o.Token) {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *ImportsInner) HasToken() bool {
	if o != nil && !IsNil(o.Token) {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *ImportsInner) SetToken(v string) {
	o.Token = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ImportsInner) GetType() ExportType {
	if o == nil || IsNil(o.Type) {
		var ret ExportType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportsInner) GetTypeOk() (*ExportType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ImportsInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given ExportType and assigns it to the Type field.
func (o *ImportsInner) SetType(v ExportType) {
	o.Type = &v
}

func (o ImportsInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.LocalSubject) {
		toSerialize["local_subject"] = o.LocalSubject
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Share) {
		toSerialize["share"] = o.Share
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	if !IsNil(o.Token) {
		toSerialize["token"] = o.Token
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableImportsInner struct {
	value *ImportsInner
	isSet bool
}

func (v NullableImportsInner) Get() *ImportsInner {
	return v.value
}

func (v *NullableImportsInner) Set(val *ImportsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableImportsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableImportsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportsInner(val *ImportsInner) *NullableImportsInner {
	return &NullableImportsInner{value: val, isSet: true}
}

func (v NullableImportsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
