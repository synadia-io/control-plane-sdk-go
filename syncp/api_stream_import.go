/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)

type StreamImportAPI interface {

	/*
		DeleteStreamImport Delete Stream Import

		Delete Stream Import

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param streamImportId
		@return ApiDeleteStreamImportRequest
	*/
	DeleteStreamImport(ctx context.Context, streamImportId string) ApiDeleteStreamImportRequest

	// DeleteStreamImportExecute executes the request
	DeleteStreamImportExecute(r ApiDeleteStreamImportRequest) (*http.Response, error)

	/*
		GetStreamImport Get Stream Import

		Returns Stream Import

		@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
		@param streamImportId
		@return ApiGetStreamImportRequest
	*/
	GetStreamImport(ctx context.Context, streamImportId string) ApiGetStreamImportRequest

	// GetStreamImportExecute executes the request
	//  @return StreamImportViewResponse
	GetStreamImportExecute(r ApiGetStreamImportRequest) (*StreamImportViewResponse, *http.Response, error)
}

// StreamImportAPIService StreamImportAPI service
type StreamImportAPIService service

type ApiDeleteStreamImportRequest struct {
	ctx            context.Context
	ApiService     StreamImportAPI
	streamImportId string
}

func (r ApiDeleteStreamImportRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteStreamImportExecute(r)
}

/*
DeleteStreamImport Delete Stream Import

Delete Stream Import

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param streamImportId
	@return ApiDeleteStreamImportRequest
*/
func (a *StreamImportAPIService) DeleteStreamImport(ctx context.Context, streamImportId string) ApiDeleteStreamImportRequest {
	return ApiDeleteStreamImportRequest{
		ApiService:     a,
		ctx:            ctx,
		streamImportId: streamImportId,
	}
}

// Execute executes the request
func (a *StreamImportAPIService) DeleteStreamImportExecute(r ApiDeleteStreamImportRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod = http.MethodDelete
		localVarPostBody   interface{}
		formFiles          []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StreamImportAPIService.DeleteStreamImport")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stream-imports/{streamImportId}"
	localVarPath = strings.Replace(localVarPath, "{"+"streamImportId"+"}", url.PathEscape(parameterValueToString(r.streamImportId, "streamImportId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetStreamImportRequest struct {
	ctx            context.Context
	ApiService     StreamImportAPI
	streamImportId string
}

func (r ApiGetStreamImportRequest) Execute() (*StreamImportViewResponse, *http.Response, error) {
	return r.ApiService.GetStreamImportExecute(r)
}

/*
GetStreamImport Get Stream Import

Returns Stream Import

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param streamImportId
	@return ApiGetStreamImportRequest
*/
func (a *StreamImportAPIService) GetStreamImport(ctx context.Context, streamImportId string) ApiGetStreamImportRequest {
	return ApiGetStreamImportRequest{
		ApiService:     a,
		ctx:            ctx,
		streamImportId: streamImportId,
	}
}

// Execute executes the request
//
//	@return StreamImportViewResponse
func (a *StreamImportAPIService) GetStreamImportExecute(r ApiGetStreamImportRequest) (*StreamImportViewResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *StreamImportViewResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StreamImportAPIService.GetStreamImport")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/stream-imports/{streamImportId}"
	localVarPath = strings.Replace(localVarPath, "{"+"streamImportId"+"}", url.PathEscape(parameterValueToString(r.streamImportId, "streamImportId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			code:  localVarHTTPResponse.StatusCode,
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
