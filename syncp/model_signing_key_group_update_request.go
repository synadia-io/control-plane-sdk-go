/*
Synadia Control Plane

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"encoding/json"
)

// checks if the SigningKeyGroupUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SigningKeyGroupUpdateRequest{}

// SigningKeyGroupUpdateRequest struct for SigningKeyGroupUpdateRequest
type SigningKeyGroupUpdateRequest struct {
	Disabled *bool                 `json:"disabled,omitempty"`
	Name     *string               `json:"name,omitempty"`
	Scope    *UserPermissionLimits `json:"scope,omitempty"`
}

// NewSigningKeyGroupUpdateRequest instantiates a new SigningKeyGroupUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSigningKeyGroupUpdateRequest() *SigningKeyGroupUpdateRequest {
	this := SigningKeyGroupUpdateRequest{}
	return &this
}

// NewSigningKeyGroupUpdateRequestWithDefaults instantiates a new SigningKeyGroupUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSigningKeyGroupUpdateRequestWithDefaults() *SigningKeyGroupUpdateRequest {
	this := SigningKeyGroupUpdateRequest{}
	return &this
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *SigningKeyGroupUpdateRequest) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigningKeyGroupUpdateRequest) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *SigningKeyGroupUpdateRequest) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *SigningKeyGroupUpdateRequest) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SigningKeyGroupUpdateRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigningKeyGroupUpdateRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SigningKeyGroupUpdateRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SigningKeyGroupUpdateRequest) SetName(v string) {
	o.Name = &v
}

// GetScope returns the Scope field value if set, zero value otherwise.
func (o *SigningKeyGroupUpdateRequest) GetScope() UserPermissionLimits {
	if o == nil || IsNil(o.Scope) {
		var ret UserPermissionLimits
		return ret
	}
	return *o.Scope
}

// GetScopeOk returns a tuple with the Scope field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SigningKeyGroupUpdateRequest) GetScopeOk() (*UserPermissionLimits, bool) {
	if o == nil || IsNil(o.Scope) {
		return nil, false
	}
	return o.Scope, true
}

// HasScope returns a boolean if a field has been set.
func (o *SigningKeyGroupUpdateRequest) HasScope() bool {
	if o != nil && !IsNil(o.Scope) {
		return true
	}

	return false
}

// SetScope gets a reference to the given UserPermissionLimits and assigns it to the Scope field.
func (o *SigningKeyGroupUpdateRequest) SetScope(v UserPermissionLimits) {
	o.Scope = &v
}

func (o SigningKeyGroupUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SigningKeyGroupUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Scope) {
		toSerialize["scope"] = o.Scope
	}
	return toSerialize, nil
}

type NullableSigningKeyGroupUpdateRequest struct {
	value *SigningKeyGroupUpdateRequest
	isSet bool
}

func (v NullableSigningKeyGroupUpdateRequest) Get() *SigningKeyGroupUpdateRequest {
	return v.value
}

func (v *NullableSigningKeyGroupUpdateRequest) Set(val *SigningKeyGroupUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSigningKeyGroupUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSigningKeyGroupUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSigningKeyGroupUpdateRequest(val *SigningKeyGroupUpdateRequest) *NullableSigningKeyGroupUpdateRequest {
	return &NullableSigningKeyGroupUpdateRequest{value: val, isSet: true}
}

func (v NullableSigningKeyGroupUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSigningKeyGroupUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
