/*
Synadia Control Plane

API for Synadia Control Plane Server

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"time"
)

// checks if the NatsUserIssuanceViewResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NatsUserIssuanceViewResponse{}

// NatsUserIssuanceViewResponse struct for NatsUserIssuanceViewResponse
type NatsUserIssuanceViewResponse struct {
	// sha256 sum of (NatsUserId,Iss,Sub,Name,json_encode(Nats)) If a credential is downloaded and results in a unique checksum then a new issuance record is created. If a credential's checksum matches an existing record, a new event is appended to the existing record.
	Checksum string    `json:"checksum"`
	Created  time.Time `json:"created"`
	// trail of download events
	Events []NatsUserIssuanceEvent `json:"events"`
	// highest expiry time, undefined means Unlimited (exp not set)
	ExpMax *int64 `json:"exp_max,omitempty"`
	// most recent time this was issued
	IatMax int64 `json:"iat_max"`
	// first time this was issued
	IatMin int64  `json:"iat_min"`
	Id     string `json:"id"`
	// issuer account public nkey
	Iss    string                 `json:"iss"`
	Name   string                 `json:"name"`
	Nats   User                   `json:"nats"`
	Status NatsUserIssuanceStatus `json:"status"`
	// nats user public nkey
	Sub string `json:"sub"`
}

func (o NatsUserIssuanceViewResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["checksum"] = o.Checksum
	toSerialize["created"] = o.Created
	toSerialize["events"] = o.Events
	if o.ExpMax != nil {
		toSerialize["exp_max"] = o.ExpMax
	}
	toSerialize["iat_max"] = o.IatMax
	toSerialize["iat_min"] = o.IatMin
	toSerialize["id"] = o.Id
	toSerialize["iss"] = o.Iss
	toSerialize["name"] = o.Name
	toSerialize["nats"] = o.Nats
	toSerialize["status"] = o.Status
	toSerialize["sub"] = o.Sub
	return toSerialize, nil
}
