/*
Synadia Control Plane / Synadia Cloud

API for Synadia Control Plane / Synadia Cloud

API version: beta
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package syncp

import (
	"fmt"

	"encoding/json"
)

// WorkloadFieldKind the model 'WorkloadFieldKind'
type WorkloadFieldKind string

// List of WorkloadFieldKind
const (
	WORKLOADFIELDKIND_SCALAR WorkloadFieldKind = "scalar"
	WORKLOADFIELDKIND_MAP    WorkloadFieldKind = "map"
	WORKLOADFIELDKIND_LIST   WorkloadFieldKind = "list"
)

// All allowed values of WorkloadFieldKind enum
var AllowedWorkloadFieldKindEnumValues = []WorkloadFieldKind{
	"scalar",
	"map",
	"list",
}

func (v *WorkloadFieldKind) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkloadFieldKind(value)
	for _, existing := range AllowedWorkloadFieldKindEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkloadFieldKind", value)
}

// NewWorkloadFieldKindFromValue returns a pointer to a valid WorkloadFieldKind
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkloadFieldKindFromValue(v string) (*WorkloadFieldKind, error) {
	ev := WorkloadFieldKind(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkloadFieldKind: valid values are %v", v, AllowedWorkloadFieldKindEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkloadFieldKind) IsValid() bool {
	for _, existing := range AllowedWorkloadFieldKindEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkloadFieldKind value
func (v WorkloadFieldKind) Ptr() *WorkloadFieldKind {
	return &v
}
